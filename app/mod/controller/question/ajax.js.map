{
    "version": 3,
    "sources": [
        "../../../../src/mod/controller/question/ajax.js"
    ],
    "names": [
        "locale",
        "indexAction",
        "display",
        "getgroupsAction",
        "cid",
        "get",
        "model",
        "get_groups",
        "groups",
        "think",
        "isEmpty",
        "json",
        "ajaxquestionfocusAction",
        "weblogin",
        "type",
        "id",
        "res",
        "Number",
        "add",
        "question_id",
        "uid",
        "user",
        "add_time",
        "Date",
        "getTime",
        "where",
        "increment",
        "success",
        "name",
        "delete",
        "decrement",
        "fail",
        "ajaxanswercommentsAction",
        "answer_id",
        "select",
        "comments",
        "c",
        "get_nickname",
        "username",
        "time",
        "fromNow",
        "is_admin",
        "is_login",
        "in_array",
        "parseInt",
        "config",
        "data",
        "ajaxanswercommentspostAction",
        "post",
        "editanswerAction",
        "find",
        "answer",
        "http",
        "error",
        "Error",
        "statusAction",
        "assign",
        "modtemp",
        "delanswerAction",
        "delcommentsAction"
    ],
    "mappings": "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",
    "file": "../../../../src/mod/controller/question/ajax.js",
    "sourcesContent": [
        "'use strict';\nimport Base from '../index.js';\nimport moment from \"moment\"\nmoment.locale('zh-cn');\nexport default class extends Base {\n    /**\n     * index action\n     * @return {Promise} []\n     * 封面入口\n     */\n    indexAction(){\n        //console.log(this);\n        //auto render template file index_index.html\n\n        return this.display();\n    }\n\n    /**\n     * ajax获取栏目分组\n     * @param cid 栏目id\n     * @returns {*}\n     */\n    async getgroupsAction(){\n        let cid = this.get(\"cid\");\n        let groups = await this.model('category').get_groups(cid);\n        if(think.isEmpty(groups)){\n            groups=false;\n        }\n        return this.json(groups);\n    }\n//关注\n    async ajaxquestionfocusAction(){\n        //前端验证登录\n        await this.weblogin();\n        //获取关注的类型，1关注，2取消关注\n        let type= this.get(\"type\");\n        //获取要关注的id;\n        let id = this.get(\"id\");\n        let res;\n        switch (Number(type)){\n            case 1:\n            //关注\n            await this.model(\"question_focus\").add({question_id:id,uid:this.user.uid,add_time:new Date().getTime()});\n                 await this.model(\"question\").where({id:id}).increment(\"focus_count\");\n                 this.success({name:\"关注成功!\"});\n                break;\n            case 2:\n               //取消关注\n                await this.model(\"question_focus\").where({question_id:id,uid:this.user.uid}).delete();\n                await this.model(\"question\").where({id:id}).decrement(\"focus_count\");\n                this.success({name:\"取消关注成功!\"});\n            break;\n            default:\n                return this.fail(\"缺少参数!\")\n        }\n\n    }\n    //获取评论\n    async ajaxanswercommentsAction(){\n        let answer_id = this.get(\"answer_id\");\n        //let comments =\n        let comments = await this.model(\"question_answer_comments\").where({answer_id:answer_id}).select();\n        for(let c of comments){\n            c.username = await get_nickname(c.uid);\n            c.time = moment(c.time).fromNow()\n        }\n        //判断是不是超级管理员\n        let is_admin =false;\n        if(this.is_login){\n            is_admin=in_array(parseInt(this.user.uid), this.config('user_administrator'));\n        }\n        this.json({data:comments,is_login:this.is_login,is_admin:is_admin});\n    }\n    async ajaxanswercommentspostAction(){\n        //前端验证登录\n        await this.weblogin();\n\n        let data = this.post();\n        data.uid = this.user.uid;\n        data.time = new Date().getTime();\n        let add = await this.model(\"question_answer_comments\").add(data);\n        if(add){\n            return this.success({name:\"评论成功!\"})\n        }else {\n            return this.fail(\"评论失败！\")\n        }\n    }\n    //编辑回复\n    async editanswerAction(){\n        //前端登录验证\n        await this.weblogin();\n        let answer_id = this.get(\"id\");\n        let answer = await this.model(\"question_answer\").where({answer_id:answer_id}).find();\n        //后台管理员跳过验证\n        if(!in_array(parseInt(this.user.uid), this.config('user_administrator'))){\n            //await this.c_verify(\"edit\");\n            //安全判断\n            if(answer.uid !=this.user.uid){\n                this.http.error = new Error('你不能编辑，不属于自己的东西！');\n                return think.statusAction(702, this.http);\n            }\n        }\n        this.assign(\"answer\",answer);\n        //pc\n       return this.modtemp();\n\n    }\n    async delanswerAction(){\n        //前端登录验证\n        await this.weblogin();\n        let answer_id = this.get(\"id\");\n        let answer = await this.model(\"question_answer\").where({answer_id:answer_id}).find();\n        //后台管理员跳过验证\n        if(!in_array(parseInt(this.user.uid), this.config('user_administrator'))){\n            //await this.c_verify(\"edit\");\n            //安全判断\n            if(answer.uid !=this.user.uid){\n                this.http.error = new Error('你不能编辑，不属于自己的东西！');\n                return think.statusAction(702, this.http);\n            }\n        }\n        //删除相关回复\n        await this.model(\"question_answer\").where({answer_id:answer_id}).delete();\n        //删除相关的回复评论\n        await this.model(\"question_answer_comments\").where({answer_id:answer_id}).delete();\n        //删除统计\n        await this.model(\"question\").where({id:this.get(\"qid\")}).decrement(\"answer_count\",1);\n       return this.success({name:\"删除成功!\"})\n    }\n    async delcommentsAction(){\n        //前端登录验证\n        await this.weblogin();\n        let id = this.get(\"id\");\n        let comments = await this.model(\"question_answer_comments\").where({id:id}).find();\n        //后台管理员跳过验证\n        if(!in_array(parseInt(this.user.uid), this.config('user_administrator'))){\n            //await this.c_verify(\"edit\");\n            //安全判断\n            if(comments.uid !=this.user.uid){\n                this.http.error = new Error('你不能编辑，不属于自己的东西！');\n                return think.statusAction(702, this.http);\n            }\n        }\n        //删除相关的回复评论\n        await this.model(\"question_answer_comments\").where({id:id}).delete();\n        return this.success({name:\"删除成功!\"})\n    }\n}"
    ]
}