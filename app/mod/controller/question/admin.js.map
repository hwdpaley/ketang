{
    "version": 3,
    "sources": [
        "../../../../src/mod/controller/question/admin.js"
    ],
    "names": [
        "init",
        "http",
        "tactive",
        "indexAction",
        "cate_id",
        "get",
        "group_id",
        "think",
        "isEmpty",
        "error",
        "Error",
        "statusAction",
        "model",
        "get_category",
        "name",
        "get_parent_category",
        "nav",
        "assign",
        "question",
        "map",
        "get_sub_category",
        "subcate",
        "push",
        "category_id",
        "groups",
        "parse_config_attr",
        "title",
        "where",
        "order",
        "page",
        "countSelect",
        "list",
        "Pages",
        "adapter",
        "pages",
        "console",
        "log",
        "meta_title",
        "m_cate",
        "modtemp",
        "mod",
        "delAction",
        "ids",
        "post",
        "fail",
        "id",
        "delete",
        "question_id",
        "getField",
        "qm",
        "answer_id",
        "isArray",
        "delsearch",
        "delkey",
        "success"
    ],
    "mappings": "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",
    "file": "../../../../src/mod/controller/question/admin.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from '../admin.js';\n\nexport default class extends Base {\n  init(http) {\n    super.init(http);\n    this.tactive = \"article\";\n  }\n  /**\n   * 模型后台管理入口\n   * index action\n   * @return {Promise} []\n   */\n  async indexAction(){\n    let cate_id = this.get('cate_id') || null;\n    let group_id =  this.get('group_id') || 0;\n    if(think.isEmpty(cate_id)){\n      this.http.error = new Error('该栏目不存在！');\n      return think.statusAction(702, this.http);\n    }\n    let name = await this.model(\"category\").get_category(cate_id, 'name')||cate_id;\n    //获取面包屑信息\n    let nav = await this.model('category').get_parent_category(cate_id);\n    this.assign('breadcrumb', nav);\n    //获取内容\n    // 构建列表数据\n    let question = this.model('question');\n    let map = {}\n    if (cate_id) {\n      //获取当前分类的所有子栏目\n      let subcate = await this.model('category').get_sub_category(cate_id);\n      // console.log(subcate);\n      subcate.push(cate_id);\n      map.category_id = ['IN', subcate];\n    }\n    if(group_id){\n        map.group_id=group_id;\n    }\n\n    //获取分组\n    let  groups = await this.model(\"category\").get_category(cate_id, 'groups');\n    if (groups) {\n      groups = parse_config_attr(groups);\n    }\n    this.assign('groups', groups);\n    //搜索\n    if(this.get(\"title\")){\n      map.title=[\"like\",\"%\"+this.get(\"title\")+\"%\"]\n    }\n    let list = await question.where(map).order('update_time DESC').page(this.get(\"page\"),20).countSelect();\n    let Pages = think.adapter(\"pages\", \"page\"); //加载名为 dot 的 Template Adapter\n    let pages = new Pages(this.http); //实例化 Adapter\n    let page = pages.pages(list);\n    this.assign('list', list);\n    this.assign('pagerData', page); //分页展示使用\n    console.log(map);\n    this.meta_title = this.m_cate.title;\n    this.assign({\n      \"navxs\": true,\n      \"name\":name,\n    });\n      this.assign('group_id', group_id);\n    return this.modtemp(this.mod.name);\n  }\n  //删除\n  async delAction(){\n    let ids = this.post(\"ids\");\n    if(think.isEmpty(ids)){\n      return this.fail(\"至少选择一条数据！\")\n    }\n    //删除帖子\n     await this.model(\"question\").where({id:[\"IN\",ids]}).delete();\n    //查出相关的回复id\n    let qm = await this.model(\"question_answer\").where({question_id:[\"IN\",ids]}).getField(\"answer_id\");\n    //删除相关回复\n    await this.model(\"question_answer\").where({question_id:[\"IN\",ids]}).delete();\n    //删除相关的回复评论\n    if(!think.isEmpty(qm)){\n      await this.model(\"question_answer_comments\").where({answer_id:[\"IN\",qm]}).delete();\n    }\n      //console.log(ids);\n      //删除搜索\n     if(think.isArray(ids)){\n      for(let id of ids){\n          await this.model(\"search\").delsearch(8,id);\n          //删除话题\n          await this.model(\"keyword\").delkey(id,8);\n      }\n     }else {\n         await this.model('search').delsearch(8,ids);\n         //话题\n         await this.model(\"keyword\").delkey(ids,8);\n     }\n    //删除相关的\n    return this.success({name:\"删除成功！\"});\n  }\n}"
    ]
}