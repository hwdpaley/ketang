{
    "version": 3,
    "sources": [
        "../../../../src/mod/controller/question/sys.js"
    ],
    "names": [
        "indexAction",
        "display",
        "addAction",
        "weblogin",
        "cid",
        "get",
        "c_verify",
        "model",
        "get_parent_category",
        "breadcrumb",
        "assign",
        "console",
        "log",
        "m_cate",
        "meta_title",
        "checkMobile",
        "userAgent",
        "modtemp",
        "testAction",
        "editAction",
        "find",
        "info",
        "in_array",
        "parseInt",
        "user",
        "uid",
        "config",
        "http",
        "error",
        "Error",
        "think",
        "statusAction",
        "category_id",
        "category",
        "cate",
        "get_groups",
        "id",
        "group",
        "isEmpty",
        "_",
        "filter",
        "group_id",
        "where",
        "docid",
        "mod_type",
        "mod_id",
        "keyword",
        "getField",
        "topicid",
        "join",
        "updateAction",
        "data",
        "post",
        "ip",
        "_ip2int",
        "is_login",
        "roleid",
        "priv",
        "addexa",
        "adds",
        "title",
        "addp",
        "success",
        "name",
        "url",
        "fail",
        "userid",
        "anonymous",
        "updates",
        "res",
        "updateanswerAction",
        "answer_id"
    ],
    "mappings": "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",
    "file": "../../../../src/mod/controller/question/sys.js",
    "sourcesContent": [
        "'use strict';\nimport Base from '../index.js';\n\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   * 封面入口\n   */\n  indexAction(){\n    //console.log(this);\n    //auto render template file index_index.html\n\n   return this.display();\n  }\n\n  async addAction(){\n      //前台登录验证\n      await this.weblogin();\n      let cid = this.get(\"cid\");\n      //验证用户权限\n      await this.c_verify(\"add\",cid,\"您所在的用户组，没有发布权限！\");\n      //获取面包屑信息\n      let breadcrumb = await this.model('category').get_parent_category(cid,true);\n      this.assign('breadcrumb', breadcrumb);\n      console.log(breadcrumb)\n      this.assign('category', this.m_cate);\n      this.meta_title = \"发布\";\n      if(checkMobile(this.userAgent())){\n          //手机端模版\n          return this.modtemp(\"question\",\"mobile\");\n      }else{\n          //console.log(temp);\n          // return this.display(temp);\n          return this.modtemp();\n      }\n  }\n  async testAction(){\n      return this.display();\n  }\n  //编辑主题\n    async editAction(){\n     //前台登录验证\n        await this.weblogin();\n        let info = await this.model(\"question\").find(this.get(\"id\"));\n        //console.log(info);\n        this.assign(\"info\",info);\n        //后台管理员跳过验证\n       if(!in_array(parseInt(this.user.uid), this.config('user_administrator'))){\n           //await this.c_verify(\"edit\");\n           //安全判断\n           if(info.uid !=this.user.uid){\n               this.http.error = new Error('你不能编辑，不属于自己的东西！');\n               return think.statusAction(702, this.http);\n           }\n       }\n        //获取面包屑信息\n        let breadcrumb = await this.model('category').get_parent_category(info.category_id,true);\n        this.assign('breadcrumb', breadcrumb);\n        //获取栏目信息\n        let cate = await this.category(info.category_id);\n       // console.log(cate);\n        this.assign('category', cate);\n        //获取分组\n        let group = await this.model(\"category\").get_groups(cate.id);\n       // console.log(group);\n        if(!think.isEmpty(group)){\n            this.assign('group', think._.filter(group, {'id': info.group_id}));\n        }\n        //获取相关话题;\n        let where = {};\n        where.docid=info.id;\n        where.mod_type=1;\n        where.mod_id=cate.model;\n        let keyword;\n        let topicid = await think.model(\"keyword_data\", think.config(\"db\")).where(where).getField(\"tagid\");\n        if(!think.isEmpty(topicid)){\n            keyword = await think.model(\"keyword\", think.config(\"db\")).where({id:[\"IN\",topicid]}).getField(\"keyname\");\n            if(!think.isEmpty(keyword)){\n                this.assign(\"keyword\",keyword.join(\",\"))\n            }\n\n        }\n        //seo\n        this.meta_title = \"编辑\"; //标题\n        return this.display()\n    }\n  //添加或编辑主题\n  async updateAction(){\n      //前台登录验证\n      await this.weblogin();\n\n      let data = this.post();\n      if(think.isEmpty(data.id)){//发布\n          data.uid = this.user.uid;\n          data.ip = _ip2int(this.ip());\n          //检查本栏目发布是否需要审核\n          let roleid = await this.model(\"member\").where({id:this.is_login}).getField('groupid', true);\n          let addexa = await this.model(\"category_priv\").priv(data.category_id,roleid,'addexa');\n          if(addexa){\n              let addp = await this.model(\"approval\").adds(data.mod_id,this.user.uid,data.title,data);\n              if(addp){\n                  return this.success({name: \"发布成功, 请等待管理员审核...\", url: '/'+data.category_id});\n              }else {\n                  return this.fail(\"操作失败！\");\n              }\n\n          }\n      }else {//修改\n          data.userid=this.user.uid;\n      }\n      data.anonymous = data.anonymous||1;\n      //console.log(data);\n      // return this.fail(data);\n      let res = await this.model('question').updates(data);\n      if (res) {\n          //行为记录\n          if (!res.data.id) {\n              //添加操作日志，可根据需求后台设置日志类型。\n              await this.model(\"action\").log(\"addquestion\", \"question\", res.id, this.user.uid, this.ip(), this.http.url);\n\n            return this.success({name: \"添加成功\", url: '/mod/question/'+res.id});\n          } else {\n              return this.success({name: \"更新成功\", url: '/mod/question/'+res.data.id});\n          }\n\n      } else {\n          return this.fail(\"操作失败！\");\n      }\n\n  }\n  //添加或编辑回复\n    async updateanswerAction(){\n        //前台登录验证\n        await this.weblogin();\n        let data = this.post();\n        if(think.isEmpty(data.answer_id)){\n            data.uid = this.user.uid;\n            data.ip = _ip2int(this.ip());\n            data.anonymous = data.anonymous||1;\n        }\n        //console.log(data);\n        let res = await this.model('question_answer').updates(data);\n        if (res) {\n            //行为记录\n            if (!res.data.answer_id) {\n                //添加操作日志，可根据需求后台设置日志类型。\n                //await this.model(\"action\").log(\"add_document\", \"document\", res.id, this.user.uid, this.ip(), this.http.url);\n                this.success({name: \"添加成功\",data:res});\n            } else {\n                this.success({name: \"更新成功\",data:res});\n            }\n\n        } else {\n            this.fail(\"操作失败！\");\n        }\n    }\n\n}"
    ]
}