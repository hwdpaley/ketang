{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/public.js"
    ],
    "names": [
        "__before",
        "model",
        "getset",
        "setup",
        "session",
        "csrf",
        "cookie",
        "assign",
        "signinAction",
        "islogin",
        "is_login",
        "isPost",
        "GEETEST_IS_ADMLOGIN",
        "Geetest",
        "think",
        "service",
        "geetest",
        "validate",
        "post",
        "res",
        "status",
        "http",
        "error",
        "Error",
        "statusAction",
        "username",
        "password",
        "encryptPassword",
        "signin",
        "ip",
        "uid",
        "log",
        "url",
        "redirect",
        "fail",
        "display",
        "logoutAction",
        "user",
        "isEmpty",
        "verAction",
        "end",
        "categorynameAction",
        "name",
        "get",
        "pid",
        "where",
        "find",
        "json",
        "selectcateAction",
        "meta_title",
        "getmenuAction",
        "get_all_category",
        "cate",
        "val",
        "id",
        "title",
        "arr_to_tree",
        "geetestAction",
        "register",
        "data",
        "deferred",
        "defer",
        "challenge",
        "geetest_challenge",
        "geetest_validate",
        "seccode",
        "geetest_seccode",
        "err",
        "result",
        "console",
        "resolve",
        "promise",
        "getkeywordAction",
        "term",
        "keyname",
        "field",
        "select",
        "getrelationAction",
        "key",
        "map",
        "remoteAction",
        "table",
        "v",
        "_",
        "trim",
        "controller",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/public.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nexport default class extends think.controller.base {\n    async __before() {\n            this.setup = await this.model(\"setup\").getset();\n            let csrf = await this.session('__CSRF__');\n            // console.log(\"__CSRF__-------------,\" + csrf);\n            await this.cookie('__CSRF__', csrf);\n            this.assign('csrf', csrf);\n        }\n        /**\n         * public action\n         * @return {Promise} []\n         */\n    async signinAction() {\n        //用户登录\n        let is_login = await this.islogin();\n        if (this.isPost()) {\n            //验证码\n            if (1 == this.setup.GEETEST_IS_ADMLOGIN) {\n                let Geetest = think.service(\"geetest\"); //加载 commoon 模块下的 geetset service\n                let geetest = new Geetest();\n                let res = await geetest.validate(this.post());\n                if (\"success\" != res.status) {\n                    this.http.error = new Error(\"验证码不正确\");\n                    return think.statusAction(702, this.http);\n                }\n            }\n\n\n            let username = this.post('username');\n            let password = this.post('password');\n            password = encryptPassword(password);\n            let res = await this.model(\"member\").signin(username, password, this.ip(), 5, 1);\n            if (0 < res.uid) {\n                //记录用户登录行为\n                await this.model(\"action\").log(\"user_login\", \"member\", res.uid, res.uid, this.ip(), this.http.url);\n                //console.log(11111111111111);\n                await this.session('userInfo', res);\n                //TODO 用户密钥\n                this.redirect('/admin/index');\n            } else { //登录失败\n                let fail;\n                switch (res) {\n                    case -1:\n                        fail = '用户不存在或被禁用';\n                        break; //系统级别禁用\n                    case -2:\n                        fail = '密码错误';\n                        break;\n                    case -3:\n                        fail = '您无权登陆后台！';\n                        break;\n                    default:\n                        fail = '未知错误'; // 0-接口参数错误（调试阶段使用）\n                }\n\n                this.http.error = new Error(fail);\n                return think.statusAction(702, this.http);\n            }\n\n        } else {\n            if (is_login) {\n                this.redirect('/admin/index');\n            } else {\n                await this.session('userInfo', null); \n                return this.display();\n            }\n        }\n    }\n\n    async logoutAction() {\n        //退出登录\n        let is_login = await this.islogin();\n        if (is_login) {\n            await this.session('userInfo', null);\n            this.redirect('/admin/public/signin');\n        } else {\n            this.redirect('/admin/public/signin');\n        }\n    }\n\n    async islogin() {\n        let user = await this.session('userInfo');\n        let res = think.isEmpty(user) ? false : true;\n        return res;\n    }\n    verAction() {\n            this.end(\"df11df\")\n        }\n        //验证菜单标示是否重复\n    async categorynameAction() {\n            let name = this.get('name');\n            let pid = this.get('pid');\n            let res = await this.model(\"category\").where({ name: name, pid: pid }).find();\n            if (!think.isEmpty(res)) {\n                return this.json({ \"message\": \"your custom message\" });\n            } else {\n                return this.json(1);\n            }\n\n        }\n        //选择分离\n    async selectcateAction() {\n            this.meta_title = \"选择分类\"\n            return this.display();\n        }\n        //获取分类\n    async getmenuAction() {\n        let cate = await this.model(\"category\").get_all_category();\n        //console.log(cate);\n        //生成菜单\n\n        for (let val of cate) {\n            let id = think.isEmpty(val.title) ? val.id : val.title;\n            val.url = `/${id}`;\n\n        }\n        //think.log(cate);\n        return this.json(arr_to_tree(cate, 0))\n    }\n\n    //验证码\n    async geetestAction() {\n        let Geetest = think.service(\"geetest\"); //加载 commoon 模块下的 geetset service\n        let geetest = new Geetest();\n        if (this.isPost()) {\n            let post = this.post();\n            //console.log(post);\n            let res = await geetest.validate(post);\n            return this.json(res);\n        } else {\n            let res = await geetest.register(this.get('type'));\n            //console.log(res);\n            return this.json(res);\n        }\n\n\n    }\n    async validate(data) {\n        let deferred = think.defer();\n        geetest.validate({\n\n            challenge: data.geetest_challenge,\n            validate: data.geetest_validate,\n            seccode: data.geetest_seccode\n\n        }, function(err, result) {\n\n            var data = { status: \"success\" };\n\n            // if (err || !result) {\n            //     console.log(err);\n            //     data.status = \"fail\";\n            // }\n            console.log(result);\n            deferred.resolve(data);\n        });\n        return deferred.promise;\n    }\n\n    /**\n     * 关键词自动完成\n     */\n    async getkeywordAction() {\n        let term = this.get(\"term\");\n        let data = await this.model(\"keyword\").where({ keyname: [\"LIKE\", `%${term}%`] }).field(\"id,keyname as label,keyname as value\").select()\n        return this.json(data);\n    }\n\n    /**\n     * 关联字段\n     * @returns {Promise<PreventPromise>}\n     */\n    async getrelationAction() {\n        let model = this.get(\"model\");\n        let id = this.get(\"id\");\n        let val = this.get(\"val\");\n        let key = this.get(\"key\");\n        let map = {};\n        map[val] = [\"like\", \"%\" + key + \"%\"]\n        let data = await this.model(model).where(map).field(`${id} as id, ${val} as data`).select();\n        return this.end(data);\n    }\n\n    /**\n     * 验证表内字段是否重复\n     * /public/remote/table/要验证的表名\n     * @returns {Promise<PreventPromise>}\n     */\n    async remoteAction() {\n        let data = this.get();\n        let table = this.get('table');\n        for (let v in data) {\n            data[v] = think._.trim(data[v]);\n        }\n        delete data.table;\n        let res = await this.model(table).where(data).find();\n        if (think.isEmpty(res)) {\n            return this.json(1);\n        } else {\n            return this.json(0);\n        }\n    }\n}\n"
    ]
}