{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/user.js"
    ],
    "names": [
        "init",
        "http",
        "db",
        "model",
        "tactive",
        "indexAction",
        "map",
        "think",
        "isEmpty",
        "get",
        "username",
        "session",
        "user",
        "where",
        "pid",
        "groupid",
        "select",
        "groups",
        "grs",
        "val",
        "push",
        "console",
        "log",
        "page",
        "order",
        "countSelect",
        "data",
        "Pages",
        "adapter",
        "pages",
        "assign",
        "meta_title",
        "status",
        "role",
        "display",
        "userlistAction",
        "gets",
        "start",
        "parseInt",
        "length",
        "draw",
        "key",
        "join",
        "table",
        "as",
        "on",
        "field",
        "limit",
        "userList",
        "forEach",
        "v",
        "last_login_time",
        "times",
        "last_login_ip",
        "_int2iP",
        "count",
        "json",
        "rechargeAction",
        "isAjax",
        "post",
        "id",
        "increment",
        "balance",
        "res",
        "getField",
        "amount_log",
        "uid",
        "Date",
        "valueOf",
        "get_nickname",
        "admin_id",
        "user_id",
        "type",
        "time",
        "amount",
        "note",
        "add",
        "success",
        "name",
        "fail",
        "adduserAction",
        "isPost",
        "password",
        "repassword",
        "encryptPassword",
        "reg_time",
        "getTime",
        "vip",
        "overduedate",
        "is_admin",
        "role_id",
        "usergroup",
        "sendmessageAction",
        "message",
        "find",
        "openid",
        "cache",
        "action",
        "result",
        "in_array",
        "config",
        "error",
        "Error",
        "statusAction",
        "roleid",
        "edituserAction",
        "delavatar",
        "uploadPath",
        "RESOURCE_PATH",
        "path",
        "isFile",
        "rmdir",
        "thenAdd",
        "addrole",
        "update",
        "showuserAction",
        "userdelAction",
        "param",
        "isadmin",
        "chstaAction",
        "parsleyAction",
        "avatarAction",
        "pic",
        "readFileSync",
        "end"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/user.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nimport Base from './base.js';\nimport fs from 'fs';\nexport default class extends Base {\n    /**\n     * index action\n     * @return {Promise} []\n     */\n    init(http) {\n            super.init(http);\n            this.db = this.model(\"member\");\n            this.tactive = \"user\";\n\n        }\n        /**\n         * 用户首页\n         * @returns {*}\n         */\n\n\n    async indexAction() {\n        let map = { 'status': ['>', -1] }\n        if (!think.isEmpty(this.get(\"username\"))) {\n            map.username = [\"like\", \"%\" + this.get(\"username\") + \"%\"]\n        }\n        let user = await this.session('userInfo');\n        let groups =await this.model(\"member_group\").where({ pid: user.groupid }).select();\n        // console.log(\"groups---------\"+JSON.stringify(groups));\n        let grs=[user.groupid];\n        for (let val of groups) {\n            grs.push(val.groupid);\n        }\n        console.log(\"groups---------\"+JSON.stringify(grs));\n        map.groupid=[\"IN\",grs];\n        // if(user.uid!=1){\n        //     map.groupid=user.groupid;\n        // }\n        console.log(\"user---------\"+JSON.stringify(user));\n        console.log(\"map---------\"+JSON.stringify(map));\n        let data = await this.db.where(map).page(this.get('page'), 20).order('groupid DESC').countSelect();\n        let Pages = think.adapter(\"pages\", \"page\"); //加载名为 dot 的 Template Adapter\n        let pages = new Pages(this.http); //实例化 Adapter\n        let page = pages.pages(data);\n        // for(let v of data.data){\n        //     console.log(await this.model(\"member_group\").getgroup({groupid:v.groupid}));\n        // }\n        this.assign('pagerData', page); //分页展示使用\n        this.assign('list', data.data);\n        this.meta_title = \"用户列表\";\n        //获取管理组\n        let role =await this.model(\"auth_role\").where({ status: 1 }).select();\n        this.assign(\"role\", role);\n        return this.display();\n    }\n\n    async userlistAction() {\n        //用户列表\n        let gets = this.get()\n        let start = parseInt(gets.start);\n        let length = parseInt(gets.length);\n        let draw = gets.draw;\n        let key = gets['search[value]'];\n        let userList = await this.db.join({\n            table: \"customer\",\n            join: \"left\",\n            as: \"u\",\n            on: ['id', 'user_id']\n        }).field(\"id,username,score,login,last_login_ip,last_login_time,status,u.real_name,u.group_id,u.balance\").limit(start, length).where({ username: [\"like\", \"%\" + key + \"%\"], status: [\">\", -1] }).order(\"id DESC\").countSelect()\n        userList.data.forEach(v => {\n                v.last_login_time = times(v.last_login_time)\n                v.last_login_ip = _int2iP(v.last_login_ip)\n            })\n            //console.log(userList)\n        let data = {\n            \"draw\": draw,\n            \"recordsTotal\": userList.count,\n            \"recordsFiltered\": userList.count,\n            \"data\": userList.data\n        }\n        return this.json(data);\n    }\n\n    /**\n     * 会员充值\n     */\n    async rechargeAction() {\n            if (this.isAjax(\"POST\")) {\n                let data = this.post();\n                let res = await this.model(\"member\").where({ id: data.id }).increment(\"amount\", data.balance);\n                console.log(res);\n                if (res) {\n                    let amount_log = await this.model(\"member\").where({ id: data.id }).getField(\"amount\", true);\n                    console.log(amount_log);\n                    //充值成功后插入日志\n                    let log = {\n                        admin_id: this.user.uid,\n                        user_id: data.id,\n                        type: 2,\n                        time: new Date().valueOf(),\n                        amount: data.balance,\n                        amount_log: amount_log,\n                        note: `管理员（${await get_nickname(this.user.uid)}）为您充值，充值的金额为：${data.balance} 元`\n                    }\n                    await this.model('balance_log').add(log);\n                    return this.success({ name: \"充值成功！\" });\n                } else {\n                    return this.fail(\"充值失败！\");\n                }\n            } else {\n                let id = this.get(\"ids\");\n                let name = get_nickname(id);\n                this.assign(\"name\", name);\n                this.assign(\"id\", id);\n                this.meta_title = \"会员充值\";\n                return this.display();\n            }\n\n        }\n        /**\n         * adduser\n         * 添加用户\n         * @returns {Promise|*}\n         */\n    async adduserAction() {\n        if (this.isPost()) {\n            let data = this.post();\n            if (data.password != data.repassword) {\n                return this.fail(\"两次填入的密码不一致\");\n            }\n            data.password = encryptPassword(data.password);\n            data.reg_time = new Date().getTime();\n            if (data.vip == 1) {\n                data.overduedate = new Date(data.overduedate).getTime();\n            } else {\n                data.overduedate = think.isEmpty(data.overduedate) ? 0 : data.overduedate;\n            }\n            //  console.log(data);\n            // return this.fail(\"ddd\")\n            data.status = 1;\n            let res = await this.db.add(data);\n            if (res) {\n                //添加角色\n                if (data.is_admin == 1) {\n                    await this.model(\"auth_user_role\").add({ user_id: res, role_id: data.role_id });\n                }\n                return this.success({ name: \"添加成功！\" });\n            } else {\n                return this.fail(\"添加失败!\")\n            }\n        } else {\n            //会员组\n            let usergroup = await this.model(\"member_group\").select();\n            this.assign(\"usergroup\", usergroup);\n            //获取管理组\n            let role = this.model(\"auth_role\").where({ status: 1 }).select();\n            this.assign(\"role\", role);\n            this.meta_title = \"添加用户\";\n            return this.display();\n        }\n\n    }\n    async sendmessageAction() {\n            if (this.isPost()) {\n                let data = this.post();\n                let message=data.message; \n                let res=await this.model(\"wx_user\").where({ uid: data.id }).find();\n                console.log(\"res----------\"+JSON.stringify(res));\n                let openid=res.openid;\n                if(think.isEmpty(openid)){\n                    return this.fail(\"用户信息不全！\");\n                }\n                await this.cache('getuserinfo',openid);\n                let result=await this.action(\"uc/wechat\", \"masssendtext\");\n                // let result=await this.action(\"uc/wechat\", \"getuserinfo\");\n                // let controllerInstance = this.controller(\"uc/wechat\");\n                // let result=await controllerInstance.getuserinfoAction(openid);\n                console.log(\"result----------\"+JSON.stringify(result));\n                return this.success({ name: \"消息发送成功！\"+openid });\n                \n            } else \n            {\n                let id = this.get(\"id\");\n                let user = await this.model(\"member\").find(id);\n                //不能修改超级管理员的信息\n                if (!this.is_admin) {\n                    if (in_array(id, this.config(\"user_administrator\"))) {\n                        this.http.error = new Error('您无权操作！');\n                        return think.statusAction(702, this.http);\n                    }\n\n                }\n                this.assign(\"user\", user);\n                console.log(user);\n                //所属管理组\n                if (user.is_admin == 1) {\n                    let roleid = await this.model(\"auth_user_role\").where({ user_id: user.id }).getField(\"role_id\", true);\n                    this.assign(\"roleid\", roleid)\n                }\n                //会员组\n                let usergroup = await this.model(\"member_group\").select();\n                this.assign(\"usergroup\", usergroup);\n                //获取管理组\n                let role = this.model(\"auth_role\").where({ status: 1 }).select();\n                this.assign(\"role\", role);\n                this.meta_title = \"发送消息\";\n                return this.display();\n            }\n        }\n        /**\n         * 编辑头像\n         * @returns {PreventPromise}\n         */\n    async edituserAction() {\n        if (this.isPost()) {\n            let data = this.post();\n            //删除头像\n            if (data.delavatar == 1) {\n                let uploadPath = think.RESOURCE_PATH + '/upload/avatar/' + data.id;\n                let path = think.isFile(uploadPath + \"/avatar.png\");\n                if (path) {\n                    think.rmdir(uploadPath, false)\n                }\n            }\n\n            if (think.isEmpty(data.password) && think.isEmpty(data.repassword)) {\n                delete data.password;\n            } else {\n                if (data.password != data.repassword) {\n                    return this.fail(\"两次填入的密码不一致\");\n                }\n                data.password = encryptPassword(data.password);\n            }\n            if (data.vip == 1) {\n                data.overduedate = new Date(data.overduedate).getTime();\n            } else {\n                data.overduedate = 0;\n            }\n            //添加角色\n            console.log(\"data-------\"+JSON.stringify(data));\n            if (data.is_admin == 1) {\n                let addrole = await this.model(\"auth_user_role\").where({ user_id: data.id }).thenAdd({ user_id: data.id, role_id: data.role_id });\n                console.log(\"addrole-------\"+JSON.stringify(addrole));\n                if (addrole.type == \"exist\") {\n                    console.log(\"auth_user_role update-------\");\n                    await this.model(\"auth_user_role\").update({ id: addrole.id, role_id: data.role_id });\n                }\n            }\n            let res = await this.db.update(data);\n\n            if (res) {\n                return this.success({ name: \"编辑成功！\" });\n            } else {\n                return this.fail(\"编辑失败!\")\n            }\n        } else {\n            let id = this.get(\"id\");\n            let user = await this.model(\"member\").find(id);\n            //不能修改超级管理员的信息\n            if (!this.is_admin) {\n                if (in_array(id, this.config(\"user_administrator\"))) {\n                    this.http.error = new Error('您无权操作！');\n                    return think.statusAction(702, this.http);\n                }\n\n            }\n            this.assign(\"user\", user);\n            console.log(\"user------------\"+JSON.stringify(user));\n            //所属管理组\n            if (user.is_admin == 1) {\n                let roleid = await this.model(\"auth_user_role\").where({ user_id: user.id }).getField(\"role_id\", true);\n                this.assign(\"roleid\", roleid)\n            }\n            //会员组\n            let usergroup = await this.model(\"member_group\").select();\n            this.assign(\"usergroup\", usergroup);\n            //获取管理组\n            let role = this.model(\"auth_role\").where({ status: 1 }).select();\n            this.assign(\"role\", role);\n            this.meta_title = \"编辑用户\";\n            return this.display();\n        }\n    }\n\n    /**\n     * 显示用户信息\n     * @returns {PreventPromise}\n     */\n    async showuserAction() {\n            let id = this.get(\"id\");\n            let user = await this.model(\"member\").find(id);\n            //非超级管理员只能修改自己的用户信息\n            // if(!this.is_admin){\n            //     if(this.user.uid!=id){\n            //         this.http.error = new Error('您无权操作！');\n            //         return think.statusAction(702, this.http);\n            //     }\n            //\n            // }\n            this.assign(\"user\", user);\n            console.log(user);\n            //所属管理组\n            if (user.is_admin == 1) {\n                let roleid = await this.model(\"auth_user_role\").where({ user_id: user.id }).getField(\"role_id\", true);\n                this.assign(\"roleid\", roleid)\n            }\n            //会员组\n            let usergroup = await this.model(\"member_group\").select();\n            this.assign(\"usergroup\", usergroup);\n            //获取管理组\n            let role = this.model(\"auth_role\").where({ status: 1 }).select();\n            this.assign(\"role\", role);\n            this.meta_title = \"个人信息\";\n            return this.display();\n        }\n        /**\n         * userdel\n         * 用户删除\n         * @returns {Promise|*}\n         */\n    async userdelAction() {\n            let id = this.param(\"ids\");\n            //console.log(id);\n            let res;\n            // 判断是否是管理员，如果是不能删除;\n            if (await this.isadmin(id)) {\n                return this.fail(\"不能删除管理员!\")\n            } else {\n                //res = await this.db.where({id: id}).delete();\n                //逻辑删除\n                res = await this.db.where({ id: [\"IN\", id] }).update({ status: -1 });\n                if (res) {\n                    return this.success({ name: \"删除成功！\" })\n                } else {\n                    return this.fail(\"删除失败！\")\n                }\n            }\n\n\n        }\n        /**\n         * 改变角色状态\n         * @returns {Promise|*}\n         */\n    async chstaAction() {\n        let res = await this.db.update(this.get());\n        if (res) {\n            return this.json(res);\n        }\n    }\n\n    /**\n     * 注册异步验证用户数据\n     * @returns {Promise|*}\n     */\n    async parsleyAction() {\n        //验证\n        let data = this.get();\n        // console.log(data);\n        let res = await this.db.where(data).find();\n        // console.log(res);\n        if (think.isEmpty(res)) {\n            return this.json(1);\n        } else {\n            return this.json(0);\n        }\n    }\n\n    /**\n     * 获取用户头像\n     */\n    async avatarAction() {\n        var uploadPath = think.RESOURCE_PATH + '/upload/avatar/' + this.user.uid;\n        let path = think.isFile(uploadPath + \"/\" + \"/avatar.png\");\n        this.type(\"image/png\");\n        let pic;\n        if (path) {\n            // this.download(uploadPath + \"/\" + \"/avatar.png\");\n            pic = fs.readFileSync(uploadPath + \"/\" + \"/avatar.png\")\n        } else {\n            //this.download(think.RESOURCE_PATH + '/upload/avatar/avatar.jpg')\n            pic = fs.readFileSync(think.RESOURCE_PATH + '/upload/avatar/avatar.jpg')\n        }\n        this.end(pic)\n    }\n\n}\n"
    ]
}