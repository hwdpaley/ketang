{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/mpbase2.js"
    ],
    "names": [
        "init",
        "http",
        "api",
        "fodderAction",
        "assign",
        "display",
        "spiderImage",
        "imgUrl",
        "filePath",
        "deferred",
        "think",
        "defer",
        "get",
        "res",
        "imgData",
        "setEncoding",
        "on",
        "chunk",
        "writeFileSync",
        "resolve",
        "promise",
        "wxuploadtmpAction",
        "thumb_id",
        "model",
        "get_pic",
        "pic",
        "paths",
        "RESOURCE_PATH",
        "indexOf",
        "mkdir",
        "get_cover",
        "name",
        "longpic",
        "ROOT_PATH",
        "wx",
        "data",
        "uploadMaterial",
        "err",
        "result",
        "isEmpty",
        "console",
        "error",
        "setup",
        "wx_AppID",
        "wx_AppSecret",
        "img_result",
        "unlinkSync",
        "where",
        "id",
        "update",
        "url",
        "source_id",
        "media_id",
        "hs_image_src",
        "json",
        "savefodderAction",
        "self",
        "params",
        "post",
        "edit_id",
        "find",
        "olddata",
        "wxr",
        "removeMaterial",
        "reject",
        "wxrres",
        "delete",
        "delrow",
        "anews",
        "JSON",
        "parse",
        "uploadNewsMaterial",
        "wxres",
        "wxg",
        "getMaterial",
        "wx_news",
        "time",
        "Date",
        "getTime",
        "add",
        "effect",
        "success",
        "fail",
        "fodderlistAction",
        "meta_title",
        "page",
        "order",
        "countSelect",
        "Pages",
        "adapter",
        "pages",
        "deletefodderAction",
        "getField",
        "wxremove",
        "errcode",
        "asyncfodderlistAction",
        "foddereditAction",
        "autoreplyAction",
        "select",
        "rule",
        "i",
        "length",
        "current",
        "keywords_id",
        "ks",
        "reply_id",
        "rs",
        "createkruleAction",
        "rule_name",
        "ruleid",
        "createrAction",
        "type",
        "currtime",
        "currwebtoken",
        "startTrans",
        "content",
        "rulemodel",
        "ruledata",
        "log",
        "split",
        "push",
        "join",
        "r",
        "commit",
        "rid",
        "rollback",
        "deleterAction",
        "rr",
        "tmp",
        "editreplyAction",
        "ruleeditAction",
        "edittype",
        "kmodel",
        "kid",
        "v",
        "kname",
        "ktype",
        "ruledeleteAction",
        "currentrule",
        "kids",
        "rids",
        "rmodel",
        "kres",
        "rres",
        "rulres",
        "ruleeditnameAction",
        "rulename",
        "followAction",
        "reply_type",
        "thenAdd",
        "info",
        "initinfo",
        "active",
        "messageAction",
        "saveinfoAction",
        "media_model",
        "send_type",
        "editor_content",
        "me_id",
        "wx_content",
        "material_content",
        "targetArr",
        "articles",
        "host",
        "key",
        "tmpobj",
        "title",
        "description",
        "picurl",
        "create_time",
        "isAdd",
        "custommenuAction",
        "version",
        "button",
        "act_list",
        "sub_button",
        "value",
        "personality",
        "ddata",
        "custom_menu",
        "savecustommenuAction",
        "newv",
        "menuid",
        "web_token",
        "asyncwxmenuAction",
        "wxsubmit",
        "createMenu",
        "dataObj",
        "final",
        "a",
        "tmpbtn",
        "b",
        "tmpsub"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/mpbase2.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nimport Base from './base.js';\nimport API from 'wechat-api';\nimport http from 'http';\nimport fs from 'fs';\nexport default class extends Base {\n\n    init(http) {\n        this.api = new API('wxe8c1b5ac7db990b6', 'ebcd685e93715b3470444cf6b7e763e6');\n        //this.api = new API('wxec8fffd0880eefbe', 'a084f19ebb6cc5dddd2988106e739a07');\n        super.init(http);\n    }\n\n    /**\n     * 新建素材默认首页\n     */\n    fodderAction() {\n        this.assign({\"navxs\": true, \"bg\": \"bg-dark\"});\n        return this.display();\n    }\n\n    //远程拿图片\n    spiderImage(imgUrl, filePath) {\n        let deferred = think.defer();\n        http.get(imgUrl, function (res) {\n            var imgData = \"\";\n            res.setEncoding(\"binary\");\n            res.on(\"data\", function (chunk) {\n                imgData += chunk;\n            });\n\n            res.on(\"end\", function () {\n                fs.writeFileSync(filePath, imgData, \"binary\");\n                deferred.resolve(filePath);\n            });\n        });\n        return deferred.promise;\n    }\n\n    /**\n     * 给微信上传临时素材 /图片 更新本地库\n     */\n    async wxuploadtmpAction() {\n        //上传图片\n        // this.end(\"暂不开发\");\n        let thumb_id = this.get('thumb_id');\n        let model = this.model('picture');\n        // let data = await model.where({id:thumb_id}).find();\n        //获取图片\n        let pic = await get_pic(thumb_id, 1, 900, 500);\n        //判断是本地还是外地,如果是外地就抓回来\n        let paths;\n        let filePath = think.RESOURCE_PATH + '/upload/long/';\n        if (pic.indexOf(\"http://\") == 0) {\n            think.mkdir(filePath)\n            let name = await get_cover(thumb_id, \"path\");\n            let longpic = await this.spiderImage(pic, filePath + name);\n            paths = longpic;\n        } else {\n            paths = think.ROOT_PATH + '/www/' + pic;\n        }\n        //console.log(pic);\n        //return false;\n        let wx = function (api, data) {\n            let deferred = think.defer();\n            api.uploadMaterial(data, 'thumb', (err, result)=> {\n                if (!think.isEmpty(result)) {\n                    deferred.resolve(result);\n                } else {\n                    console.error(err);\n                }\n            });\n            return deferred.promise;\n        }\n\n        let api = new API(this.setup.wx_AppID, this.setup.wx_AppSecret);\n        let img_result = await wx(api, paths);\n        if (img_result) {\n            //删除远程文件\n            fs.unlinkSync(paths);\n            await model.where({id: thumb_id}).update({url: img_result.url, source_id: img_result.media_id});\n            img_result.hs_image_src = pic;\n            return this.json(img_result);\n        } else {\n            return this.json(\"\");\n        }\n    }\n\n    /**\n     * 上传保存永久素材\n     */\n    async savefodderAction() {\n        let self = this;\n        let params = self.post(\"params\");\n        let edit_id = self.get(\"edit_id\");\n        let model = self.model('wx_material');\n        let api = new API(this.setup.wx_AppID, this.setup.wx_AppSecret);\n        if (edit_id) {\n            let olddata = await model.where({id: edit_id}).find();\n            let wxr = function (api, data) {\n                let deferred = think.defer();\n                api.removeMaterial(data, (err, result)=> {\n                    if (err) {\n                        deferred.reject(err);\n                    } else {\n                        deferred.resolve(result);\n                    }\n                });\n                return deferred.promise;\n            }\n            let wxrres = await wxr(api, olddata.media_id);\n            let delrow = await model.where({id: edit_id}).delete();\n        }\n        try {\n            var anews = JSON.parse(params);\n\n            let wx = function (api, data) {\n                let deferred = think.defer();\n                api.uploadNewsMaterial(data, (err, result)=> {\n                    if (err) {\n                        deferred.reject(err);\n                    } else {\n                        deferred.resolve(result);\n                    }\n                });\n                return deferred.promise;\n            }\n            let wxres = await wx(api, anews);\n            if (wxres) {\n                let wxg = function (api, data) {\n                    let deferred = think.defer();\n                    api.getMaterial(data, (err, result)=> {\n                        if (err) {\n                            deferred.reject(err);\n                        } else {\n                            deferred.resolve(result);\n                        }\n                    });\n                    return deferred.promise;\n                }\n                let wx_news = await wxg(api, wxres.media_id);\n                // let wx_news_str = JSON.stringify(wx_news);\n                let time = new Date().getTime();\n                let data = {\n                    \"media_id\": wxres.media_id,\n                    \"material_content\": params,\n                    \"material_wx_content\": wx_news + '',\n                    \"web_token\": 0,\n                    \"add_time\": time\n                }\n                let effect = await model.add(data);\n                if (effect) {\n                    self.success({\"name\": \"上传成功！\", url: \"\"});\n                }\n            }\n            self.fail(\"上传失败！\");\n        } catch (e) {\n            self.fail(\"上传失败！\");\n        }\n    }\n\n    /**\n     * 素材列表\n     */\n    async fodderlistAction() {\n        let self = this;\n        self.meta_title = \"微信素材列表\";\n        self.assign({\"navxs\": true, \"bg\": \"bg-dark\"});\n        let model = self.model(\"wx_material\");\n        let data = await model.page(this.get('page')).order('add_time DESC').countSelect();\n        let Pages = think.adapter(\"pages\", \"page\");\n        let pages = new Pages();\n        let page = pages.pages(data);\n        self.assign('pagerData', page);\n        self.assign('fodder_list', data.data);\n        return this.display();\n    }\n\n    /**\n     * 删除素材\n     */\n    async deletefodderAction() {\n        let self = this;\n        let id = self.get('id');\n        //let ids = self.get('ids')\n        //return self.end(ids);\n        let model = self.model('wx_material');\n        let olddata = await model.where({id: ['IN', id]}).getField('media_id', false);\n        // return self.end(olddata);\n        let wxremove = function (api, data) {\n            let deferred = think.defer();\n            api.removeMaterial(data, (err, result)=> {\n                if (err) {\n                    deferred.reject(err);\n                } else {\n                    deferred.resolve(result);\n                }\n            });\n            return deferred.promise;\n        }\n        if (!think.isEmpty(olddata)) {\n            let wxres = await wxremove(self.api, olddata[0]);\n            // let wxres = { errcode: 0 };\n            // try{\n            //     for(let midi in olddata){\n            //         await wxremove(self.api, olddata[midi]);\n            //     }\n            // }catch(e){\n            //     return self.fail('删除失败');\n            // }\n            //console.log(wxres);\n            if (wxres.errcode == 0) {\n                let res = await model.where({id: ['IN', id]}).delete();\n                // let res = true;\n                if (res) {\n                    return self.success({name: '删除成功'});\n                }\n            }\n        }\n        return self.fail('删除失败');\n    }\n\n    async asyncfodderlistAction() {\n        let self = this;\n        let model = self.model(\"wx_material\");\n        let data = await model.page(this.get('page'), 20).order(\"add_time DESC\").countSelect();\n        return this.json(data);\n    }\n\n    /**\n     * 编辑\n     */\n    async foddereditAction() {\n        let id = this.get('id');\n        //this.end(id)\n        let model = this.model(\"wx_material\");\n        let data = await model.where({'id': id}).find();\n        this.assign('data', JSON.stringify(data));\n        //this.end(data);\n        return this.display('fodder');\n    }\n\n\n    //-----------------------------------\n    //自动回复\n    async autoreplyAction() {\n        let rule = await this.model('wx_keywords_rule').where({}).select();\n        for (let i = 0; i < rule.length; i++) {\n            let current = rule[i];\n            let ks = await this.model('wx_keywords').where({id: ['IN', current.keywords_id]}).select();\n            let rs = await this.model('wx_replylist').where({id: ['IN', current.reply_id]}).select();\n            rule[i].ks = ks;\n            rule[i].rs = rs;\n        }\n        this.assign('rulelist', rule);\n        this.assign({\"navxs\": true, \"bg\": \"bg-dark\"});\n        return this.display();\n    }\n\n    /**\n     * 新建规则\n     */\n    async createkruleAction() {\n        //let id = 1;\n        let rule_name = this.get('rule_name');\n        let model = this.model('wx_keywords_rule');\n        let id = await model.add({'rule_name': rule_name, 'create_time': new Date().getTime()});\n        if (id) {\n            return this.success({name: \"规则添加成功\", ruleid: id});\n        } else {\n            return this.fail('添加规则失败');\n        }\n    }\n\n\n    /**\n     * 新建回复\n     */\n    async createrAction() {\n        let self = this;\n        let type = self.post('type');\n        let ruleid = self.post('ruleid');\n        if (!ruleid) {\n            return self.fail('规则不存在');\n        }\n        let model = self.model('wx_replylist');\n        let currtime = new Date().getTime();\n        let currwebtoken = 0;\n        let result = 0;\n        await model.startTrans();\n        switch (type) {\n            case 'text':\n                let content = self.post('content')\n                result = await model.add({\n                    'type': 'text',\n                    'content': content,\n                    'create_time': currtime,\n                    'web_token': currwebtoken\n                });\n                break;\n            case 'image':\n                break;\n            case 'audio':\n                break;\n            case 'video':\n                break;\n            case 'news':\n                break;\n        }\n\n        if (result) {\n            let rulemodel = self.model('wx_keywords_rule');\n            let ruledata = await rulemodel.where({id: ruleid}).find();\n            console.log(ruledata);\n            let rs = ruledata.reply_id.split(',');\n            rs.push(result);\n            let r = await rulemodel.where({id: ruleid}).update({'reply_id': rs.join(','), 'create_time': currtime});\n            if (r) {\n                await model.commit();\n                return self.success({name: '添加回复成功', rid: result});\n            } else {\n                await model.rollback();\n                return self.fail('回复添加失败');\n            }\n        } else {\n            await model.rollback();\n            return self.fail('回复添加失败');\n        }\n    }\n\n    /**\n     * 删除回复\n     */\n    async deleterAction() {\n        let self = this;\n        let ruleid = self.post('ruleid');\n        let rid = self.post('rid');\n        let currtime = new Date().getTime();\n        if (ruleid && rid) {\n            let model = self.model('wx_replylist');\n            await model.startTrans();\n            let rr = await model.where({id: rid}).delete();\n            if (rr) {\n                let rulemodel = self.model('wx_keywords_rule');\n                let ruledata = await rulemodel.where({id: ruleid}).find();\n                let tmp = [];\n                let rs = ruledata.reply_id.split(',');\n                for (let i in rs) {\n                    if (rs[i] != rid) {\n                        tmp.push(rs[i]);\n                    }\n                }\n                let r = await rulemodel.where({id: ruleid}).update({\n                    'reply_id': tmp.join(','),\n                    'create_time': currtime\n                });\n                if (r) {\n                    await model.commit();\n                    return self.success({name: '回复删除成功'});\n                } else {\n                    await model.rollback();\n                    return self.fail('回复删除失败');\n                }\n            } else {\n                await model.rollback();\n                return self.fail('删除失败');\n            }\n        } else {\n            return self.fail('提交参数错误');\n        }\n    }\n\n    /**\n     *  编辑回复\n     */\n    async editreplyAction() {\n        let self = this;\n        let type = self.post('type');\n        let rid = self.post('ruleid');\n        let model = self.model('wx_replylist');\n        let currtime = new Date().getTime();\n        let currwebtoken = 0;\n        let result = 0;\n        switch (type) {\n            case 'text':\n                let content = self.post('content')\n                result = await model.where({id: rid}).update({\n                    'content': content,\n                    'create_time': currtime,\n                    'web_token': currwebtoken\n                });\n                break;\n            case 'image':\n                break;\n            case 'audio':\n                break;\n            case 'video':\n                break;\n            case 'news':\n                break;\n        }\n\n        if (result) {\n            return self.success({name: '编辑成功'});\n        } else {\n            return self.fail('编辑失败');\n        }\n\n    }\n\n    /**\n     * 规则编辑 （关键字的添加和删除）\n     */\n    async ruleeditAction() {\n        let self = this;\n        let ruleid = self.post('ruleid');\n        let rulemodel = self.model('wx_keywords_rule');\n        let ruledata = await rulemodel.where({id: ruleid}).find();\n        let currtime = new Date().getTime();\n        let currwebtoken = 0;\n        let edittype = self.post('edittype'); //判断是编辑关键字 1，还是回复内容 2\n        if (edittype == 1 && ruleid) {\n            //关键字操作\n            let kmodel = self.model('wx_keywords');\n            let kid = self.post('kid'); //如果带有kid表示该操作为删除，否则为添加\n            if (kid) {\n                let r = await kmodel.where({id: kid}).delete();\n                if (r) {\n                    let tmp = []\n                    let ks = ruledata.keywords_id.split(',');\n                    for (let v in ks) {\n                        if (ks[v] != kid) {\n                            tmp.push(ks[v]);\n                        }\n                    }\n                    await rulemodel.where({id: ruleid}).update({'keywords_id': tmp.join(','), 'create_time': currtime});\n                }\n                return self.json(r);\n            } else {\n                //新建关键字\n                let kname = self.post('name');\n                let ktype = self.post('type');\n                let r = 0;\n                try {\n                    r = await kmodel.add({\n                        'keyword_name': kname,\n                        'match_type': ktype,\n                        'rule_id': ruleid,\n                        'create_time': currtime,\n                        'web_token': currwebtoken\n                    });\n                } catch (e) {\n                    return self.json(-1);\n                }\n                if (r) {\n                    let ks = ruledata.keywords_id.split(',');\n                    ks.push(r);\n                    await rulemodel.where({id: ruleid}).update({'keywords_id': ks.join(','), 'create_time': currtime});\n                }\n                return self.json(r);\n            }\n        } else if (edittype == 2 && ruleid) {\n            //回复操作\n        } else {\n        }\n    }\n\n    /**\n     * 删除规则\n     */\n    async ruledeleteAction() {\n        let self = this;\n        let ruleid = self.post('ruleid');\n        let rulemodel = self.model('wx_keywords_rule');\n        await rulemodel.startTrans();\n        let currentrule = await rulemodel.where({id: ruleid}).find();\n        let kids = currentrule.keywords_id;\n        let rids = currentrule.reply_id;\n        let kmodel = self.model('wx_keywords');\n        let rmodel = self.model('wx_replylist');\n        let kres = await kmodel.where({id: ['IN', kids]}).delete();\n        let rres = await rmodel.where({id: ['IN', rids]}).delete();\n        let rulres = await rulemodel.where({id: ruleid}).delete();\n        if (rulres) {\n            await rulemodel.commit();\n            return self.success({name: '规则删除成功'});\n        } else {\n            await rulemodel.rollback();\n            return self.fail('规则删除失败');\n        }\n    }\n\n    /**\n     * 编辑规则名称\n     */\n    async ruleeditnameAction() {\n        let self = this;\n        let ruleid = self.post('ruleid');\n        let rulename = self.post('rulename');\n        let rulemodel = self.model('wx_keywords_rule');\n        let res = await rulemodel.where({id: ruleid}).update({rule_name: rulename});\n        if (res) {\n            return self.success({name: '编辑成功'});\n        }\n        return self.fail('编辑失败');\n    }\n\n    /**\n     * 关注自动回复\n     */\n    async followAction() {\n        let model = this.model('wx_replylist');\n        //首次访问检查数据库有没有数据,如果没有就添加\n        // 'news','music','video','voice','image','text'\n        let data = [{type: \"text\", reply_type: 1}, {type: \"news\", reply_type: 1}, {\n            type: \"image\",\n            reply_type: 1\n        }, {type: \"music\", reply_type: 1}, {type: \"video\", reply_type: 1}, {type: \"voice\", reply_type: 1}]\n        for (let v of data) {\n            await model.where(v).thenAdd(v)\n        }\n        let info = await model.where({reply_type: 1}).order(\"create_time DESC\").select();\n        this.assign('list', info);\n        //初始化\n        let initinfo = info[0];\n        this.assign({\"initinfo\": initinfo});\n        this.assign({\"navxs\": true, \"bg\": \"bg-dark\"});\n        this.meta_title = \"关注自动回复\"\n        this.active = \"admin/mpbase2/autoreply\"\n        return this.display();\n    }\n\n    /**\n     * 消息自动回复\n     */\n    async messageAction() {\n        let model = this.model('wx_replylist');\n        //初始化数据\n        let data = [\n            {type: \"text\", reply_type: 2},\n            {type: \"news\", reply_type: 2},\n            {type: \"image\", reply_type: 2},\n            {type: \"music\", reply_type: 2},\n            {type: \"video\", reply_type: 2},\n            {type: \"voice\", reply_type: 2}\n        ]\n        for(let v of data){\n            await model.where(v).thenAdd(v);\n        }\n        let info = await model.where({reply_type: 2}).order(\"create_time DESC\").select();\n        this.assign('list', info);\n        //初始化\n        let initinfo = info[0];\n        this.assign(\"initinfo\",initinfo);\n        this.assign({\"navxs\": true, \"bg\": \"bg-dark\"});\n        this.meta_title = \"消息自动回复\";\n        this.active = \"admin/mpbase2/autoreply\";\n        return this.display();\n    }\n\n    /**\n     * 保存回复数据\n     */\n    async saveinfoAction() {\n        let model = this.model('wx_replylist');\n        let media_model = this.model('wx_material');\n        let reply_type = this.post('reply_type');\n        let send_type = this.post('send_type');\n        let editor_content = this.post('editor_content');\n        let me_id = this.post('me_id') == \"\" ? null : this.post('me_id');\n        //this.end(reply_type+send_type+editor_content);\n        let data = {};\n        //消息回复\n        /*if(reply_type == 2){\n         data.content = editor_content;\n         }else if(reply_type == 1){\n         //关注回复\n\n         }*/\n        //this.end(send_type);\n        if (send_type == 'textArea') {\n            data.type = 'text';\n            data.content = editor_content;\n        } else if (send_type == 'newsArea') {\n            console.log(!think.isEmpty(me_id));\n            if (!think.isEmpty(me_id)) {\n                let wx_content = await media_model.where({'id': me_id}).find();\n                //this.end('aaa'+wx_content['material_content']);\n                let material_content = wx_content['material_content'];\n                material_content = JSON.parse(material_content);\n                let targetArr = [];\n                let articles = material_content.articles;\n                let host = `http://${this.http.host}`\n                for (let key in articles) {\n                    let tmpobj = {};\n                    tmpobj.title = articles[key]['title'];\n                    tmpobj.description = articles[key]['digest'];\n                    if (articles[key]['hs_image_src'].indexOf(\"http://\") == 0) {\n                        tmpobj.picurl = articles[key]['hs_image_src'];\n                    } else {\n                        tmpobj.picurl = host + articles[key]['hs_image_src'];\n                    }\n\n                    tmpobj.url = articles[key]['content_source_url'];\n                    targetArr.push(tmpobj);\n                }\n                data.content = JSON.stringify(targetArr);\n            } else {\n                data.content = null;\n            }\n            data.type = 'news';\n            data.media_id = me_id;\n        }\n        data.reply_type = reply_type;\n        data.create_time = new Date().getTime();\n        data.id = this.post(\"id\");\n        //this.end(data);\n        console.log(data);\n        // return false;\n        //查询该类型下是否有保存的回复信息\n        let isAdd = '';\n        isAdd = await model.update(data);\n        if (isAdd) {\n            if (reply_type == 2) {\n                return this.success({name: \"修改成功!\", url: \"/admin/mpbase2/message\"})\n            } else if (reply_type == 1) {\n                return this.success({name: \"修改成功!\", url: \"/admin/mpbase2/follow\"})\n\n            }\n        }\n\n\n    }\n\n\n    /**\n     * 打开自定义菜单\n     */\n    async custommenuAction() {\n        let data = {\n            version: 20120000,\n            button: [\n                {\n                    name: '1个福彩蛋',\n                    type: 1,\n                    act_list: [],\n                    sub_button: [\n                        {\n                            name: '投资赚钱吧',\n                            type: 1,\n                            act_list: [{type: 2, value: 'http://www.baidu.com'}],\n                            sub_button: []\n                        }\n                    ]\n                }\n            ]\n        }\n\n        let self = this;\n        let model = self.model('wx_custom_menu');\n        let ddata = await model.where({personality: null}).find();\n        self.assign('data', ddata.custom_menu);\n        self.assign('menuid', ddata.id);\n        self.meta_title = \"微信自定义菜单\";\n        self.assign({\"navxs\": true, \"bg\": \"bg-dark\"});\n        return this.display();\n    }\n\n    /**\n     * 保存自定义菜单\n     */\n    async savecustommenuAction() {\n        let self = this;\n        let newv = self.post('newv');\n        let menuid = self.post('menuid');//菜单ID\n        let currwebtoken = 0;\n        console.log(newv);\n        //return false;\n        try {\n            // return self.end(newv);\n            if (!newv) {\n                return self.fail('参数错误');\n            }\n            //newv = JSON.parse(newv);\n            let currtime = new Date().getTime();\n            let model = self.model('wx_custom_menu');\n            let res;\n            if (think.isEmpty(menuid)) {\n                res = await model.add({\n                    create_time: currtime,\n                    custom_menu: newv,\n                    web_token: currwebtoken\n                });\n            } else {\n                res = await model.update({\n                    id: menuid,\n                    create_time: currtime,\n                    custom_menu: newv,\n                    web_token: currwebtoken\n                });\n            }\n\n            if (res) {\n                return self.success({name: '菜单保存成功'});\n            } else {\n                return self.fail('菜单保存失败');\n            }\n        } catch (e) {\n            return self.fail('参数错误');\n        }\n    }\n\n    /**\n     * 生成微信菜单\n     */\n    async asyncwxmenuAction() {\n        let self = this;\n        let model = self.model('wx_custom_menu');\n        let data = await model.where({}).find();\n\n        let wxsubmit = function (api, data) {\n            let deferred = think.defer();\n            api.createMenu(data, (err, result)=> {\n                if (err) {\n                    deferred.reject(false);\n                } else {\n                    deferred.resolve(result);\n                }\n            });\n            return deferred.promise;\n        }\n\n        console.log(data);\n\n        let dataObj = JSON.parse(data.custom_menu);\n        let final = {button: []};\n        // for(let i = 0; i < dataObj.button.length; i++){\n        //     let btn = dataObj.button[i];\n        //     let tmpbtn = { /*name:'', type:'', key:'', sub_button:''*/ };\n        //\n        //     tmpbtn.name = btn.name;\n        //     if(btn.sub_button.length > 0){\n        //         tmpbtn.sub_button = [];\n        //         for(let j = 0; j < btn.sub_button.length; j++){\n        //             let sub = btn.sub_button[i];\n        //             let tmpsub = { /*name:'', type:'', key:'', sub_button:''*/ };\n        //             tmpsub.name = sub.name;\n        //             tmpsub.type = 'view';\n        //             tmpsub.url = sub.act_list[i].value;\n        //\n        //             tmpbtn.sub_button.push(tmpsub);\n        //         }\n        //     }else if(!btn.hasOwnProperty('key')){\n        //         btn.key = (new Date().getTime())+\"KEY\";\n        //     }else{\n        //     }\n        //\n        //     final.button.push( tmpbtn );\n        // }\n        for (let a of dataObj.button) {\n            let tmpbtn = {};\n            tmpbtn.name = a.name;\n            //console.log(a);\n            if (think.isEmpty(a.sub_button)) {\n                //console.log(a.type);\n                switch (a.type) {\n                    case '1':\n                        tmpbtn.type=\"click\";\n                        tmpbtn.key=a.act_list[0].value;\n                        break;\n                    case '2':\n                        tmpbtn.type = \"view\";\n                        tmpbtn.url = a.act_list[0].value;\n                        break;\n                }\n            } else {\n                tmpbtn.sub_button = [];\n                for (let b of a.sub_button) {\n                    let tmpsub = {};\n                    tmpsub.name = b.name;\n                    //console.log(b.type);\n                    switch (b.type) {\n                        case '1':\n                            tmpsub.type=\"click\";\n                            tmpsub.key=b.act_list[0].value;\n                            break;\n                        case '2':\n                            tmpsub.type = \"view\";\n                            tmpsub.url = b.act_list[0].value;\n                            break;\n                    }\n                    tmpbtn.sub_button.push(tmpsub);\n                }\n            }\n            final.button.push(tmpbtn);\n            console.log(tmpbtn);\n        }\n        think.log(final)\n        //return false;\n        let api = new API(this.setup.wx_AppID, this.setup.wx_AppSecret);\n        let res = await wxsubmit(api, final);\n        // let res = true;\n        console.log(res);\n        if (res) {\n            return self.success({name: '微信菜单生成成功'});\n        } else {\n            return self.fail('微信菜单生成失败');\n        }\n    }\n\n}"
    ]
}