{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/base_safe_save_100131.js"
    ],
    "names": [
        "init",
        "http",
        "__before",
        "islogin",
        "is_login",
        "redirect",
        "session",
        "user",
        "assign",
        "model",
        "where",
        "user_id",
        "uid",
        "getField",
        "roleid",
        "getset",
        "setup",
        "isadmin",
        "is_admin",
        "getallmenu",
        "adminmenu",
        "url",
        "module",
        "controller",
        "action",
        "active",
        "notifications",
        "count",
        "data",
        "approval",
        "Number",
        "push",
        "type",
        "info",
        "ico",
        "res",
        "think",
        "isEmpty",
        "in_array",
        "parseInt",
        "config",
        "editRow",
        "msg",
        "id",
        "param",
        "isArray",
        "fields",
        "getSchema",
        "extend",
        "isAjax",
        "update",
        "update_cache",
        "success",
        "name",
        "fail",
        "error",
        "forbid",
        "resume",
        "onlineUp",
        "onlineDown",
        "restore",
        "delete",
        "setstatusAction",
        "self",
        "pk",
        "post",
        "console",
        "log",
        "ids",
        "status",
        "map",
        "sortAction",
        "sort",
        "JSON",
        "parse",
        "v",
        "updateMany",
        "puliccacheAction",
        "returnnodes",
        "tree",
        "tree_nodes",
        "nodes",
        "field",
        "order",
        "select",
        "list",
        "get_children",
        "parseDocumentList",
        "model_id",
        "get_model_attribute",
        "attrList",
        "userList",
        "groupList",
        "forEach",
        "u",
        "k",
        "groupid",
        "groupname",
        "key",
        "extra",
        "options",
        "parse_config_attr",
        "oparr",
        "dateformat",
        "real_name",
        "admin_priv",
        "ac",
        "cid",
        "priv",
        "Error",
        "statusAction",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/base_safe_save_100131.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nexport default class extends think.controller.base {\n    /**\n     * some base method in here\n     */\n    init(http) {\n        super.init(http);\n    }\n\n    async __before() {\n        //登陆验证\n        let is_login = await this.islogin();\n        if (!is_login) {\n            return this.redirect('/admin/public/signin');\n        }\n        // let csrf = await this.session('__CSRF__');\n        // console.log(\"__CSRF__ admin-------------,\" + csrf);\n        // await this.cookie('__CSRF__', csrf);\n        // this.assign('csrf', csrf);\n        //用户信息\n        this.user = await this.session('userInfo');\n        this.assign(\"userinfo\", this.user);\n        this.roleid = await this.model(\"auth_user_role\").where({ user_id: this.user.uid }).getField('role_id', true);\n        //网站配置\n        this.setup = await this.model(\"setup\").getset();\n        // console.log(this.setup);\n        this.is_admin = await this.isadmin();\n        //后台菜单\n        this.adminmenu = await this.model('menu').getallmenu(this.user.uid, this.is_admin);\n        //console.log(this.adminmenu);\n        this.assign(\"setup\", this.setup);\n        //菜单当前状态\n\n        /**\n         * 权限验证超级管理员\n         */\n        //let url = `${this.http.module}/${this.http.controller}/${think.sep+this.http.action}`;\n        //console.log(url);\n\n        //console.log(is_admin);\n        let url = `${this.http.module}/${this.http.controller}/${this.http.action}`;\n        //console.log(url);\n        // if (!this.is_admin) {\n        //     let Auth = think.adapter(\"auth\", \"rbac\");\n        //     let auth = new Auth(this.user.uid);\n        //     let res = await auth.check(url);\n        //     if (!res) {\n        //         //return this.fail('未授权访问!');\n        //         this.http.error = new Error('未授权访问!');\n        //         return think.statusAction(702, this.http);\n        //     }\n        // }\n\n        //console.log(this.user.uid);\n        //this.active = this.http.url.slice(1),\n        // console.log(this.active);\n        this.active = this.http.module + \"/\" + this.http.controller + \"/\" + this.http.action;\n        //think.log(this.active);\n        //后台提示\n        //审核提示\n        let notifications = {};\n        notifications.count = 0;\n        notifications.data = [];\n        let approval = await this.model(\"approval\").count();\n        if (approval > 0) {\n            notifications.count = notifications.count + Number(approval);\n            notifications.data.push({ type: \"approval\", info: `有 ${approval} 条内容待审核`, url: \"/admin/approval/index\", ico: \"fa-umbrella\" });\n        }\n\n        //console.log(notifications);\n        this.assign({\n            \"navxs\": false,\n            \"bg\": \"bg-black\",\n            \"notifications\": notifications\n        })\n    }\n\n    /**\n     * 判断是否登录\n     * @returns {boolean}\n     */\n    async islogin() {\n        //判断是否登录\n        let user = await this.session('userInfo');\n        let res = think.isEmpty(user) ? false : user.uid;\n        return res;\n\n    }\n\n    /**\n     * 检查当前用户是否为管理员\n     * @param uid\n     * @returns {*|boolean}\n     */\n    async isadmin(uid) {\n            uid = uid || null;\n            uid = think.isEmpty(uid) ? await this.islogin() : uid;\n            return uid && (in_array(parseInt(uid), this.config('user_administrator')));\n        }\n        /**\n         * 对数据表中的单行或多行记录执行修改 GET参数id为数字或逗号分隔的数字\n         *\n         * @param {String} model 模型名称,供M函数使用的参数\n         * @param {Object}  data  修改的数据\n         * @param {Object}  where 查询时的where()方法的参数\n         * @param {Object}  msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n         *                      url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n         *\n         * @author arterli <arterli@qq.com>\n         */\n    async editRow(model, data, where, msg) {\n        let id = this.param('id');\n        id = think.isArray(id) ? id : id;\n        //如存在id字段，则加入该条件\n        let fields = this.model(model).getSchema();\n        if (in_array('id', fields) && !think.isEmpty(id)) {\n            where = think.extend({ 'id': ['IN', id] }, where);\n        }\n        msg = think.extend({ 'success': '操作成功！', 'error': '操作失败！', 'url': '', 'ajax': this.isAjax() }, msg);\n        // model=\"document_tuoke\";\n        let res = await this.model(model).where(where).update(data);\n        if (res) {\n            switch (model) {\n                case 'channel': //更新频道缓存信息\n                    update_cache(\"channel\") //更新频道缓存信息\n                    break;\n                case 'category': //更新全站分类缓存\n                    update_cache(\"category\") //更新栏目缓存\n                    break;\n                case 'model':\n                    update_cache(\"model\") //更新栏目缓存\n                    break;\n            }\n            this.success({ name: msg.success, url: msg.url });\n        } else {\n            this.fail(msg.error, msg.url);\n        }\n    }\n\n    /**\n     * 禁用条目\n     * @param {String} model 模型名称,供D函数使用的参数\n     * @param {Object}  where 查询时的 where()方法的参数\n     * @param {Object}  msg   执行正确和错误的消息,可以设置四个元素 {'success':'','error':'', 'url':'','ajax':false}\n     *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n     *\n     * @author arterli <arterli@qq.com>\n     */\n    async forbid(model, where, msg) {\n        where = where || {}, msg = msg || { 'success': '状态禁用成功！', 'error': '状态禁用失败！' };\n        let data = { 'status': 0 };\n        await this.editRow(model, data, where, msg);\n    }\n\n    /**\n     * 恢复条目\n     * @param {String} model 模型名称,供D函数使用的参数\n     * @param {Object}  where 查询时的where()方法的参数\n     * @param {Object}  msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n     *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n     *\n     * @author arterli <arterli@qq.com>\n     */\n    async resume(model, where, msg) {\n        where = where || {}, msg = msg || { 'success': '状态恢复成功！', 'error': '状态恢复失败！' };\n        let data = { 'status': 1 };\n        await this.editRow(model, data, where, msg);\n    }\n    async onlineUp(model, where, msg) {\n        where = where || {}, msg = msg || { 'success': '状态恢复成功！', 'error': '状态恢复失败！' };\n        let data = { 'online': 1 };\n        await this.editRow(model, data, where, msg);\n    }\n    async onlineDown(model, where, msg) {\n            where = where || {}, msg = msg || { 'success': '状态恢复成功！', 'error': '状态恢复失败！' };\n            let data = { 'online': 2 };\n            await this.editRow(model, data, where, msg);\n        }\n        /**\n         * 还原条目\n         * @param {string} model 模型名称,供D函数使用的参数\n         * @param {array}  where 查询时的where()方法的参数\n         * @param {array}  msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n         *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n         * @author arterli <arterli@qq.com>\n         */\n    async restore(model, where, msg) {\n        where = where || {}, msg = msg || { 'success': '状态还原成功！', 'error': '状态还原失败！' };\n        let data = { 'status': 1 };\n        where = think.extend({ 'status': -1 }, where);\n        await this.editRow(model, data, where, msg);\n    }\n\n    /**\n     * 条目假删除\n     * @param {string} model 模型名称,供D函数使用的参数\n     * @param {array}  where 查询时的where()方法的参数\n     * @param {array} msg   执行正确和错误的消息 {'success':'','error':'', 'url':'','ajax':false}\n     *                     url为跳转页面,ajax是否ajax方式(数字则为倒数计时秒数)\n     *\n     * @author arterli <arterli@qq.com>\n     */\n    async delete(model, where, msg) {\n        where = where || {}, msg = msg || { 'success': '删除成功！', 'error': '删除失败！' };\n        let data = { 'status': -1 };\n        await this.editRow(model, data, where, msg);\n    }\n\n    /**\n     * 设置一条或者多条数据的状态\n     */\n    async setstatusAction(self, model, pk = \"id\") {\n        if (!think.isEmpty(this.post('model'))) {\n            // console.log(\"post model---------\" + JSON.stringify(this.post('model'));\n            model = this.post('model');\n        } else {\n            if (think.isEmpty(this.param('model'))) {\n                model = model || this.http.controller;\n            } else {\n                model = this.param('model');\n            }\n        }\n\n        \n        console.log(\"model---------\" + model);\n        let ids = this.param('ids');\n        let status = this.param('status');\n        status = parseInt(status);\n        if (think.isEmpty(ids)) {\n            this.fail(\"请选择要操作的数据\");\n        }\n        let map = {};\n        if (!think.isEmpty(this.param('pk'))) {\n            pk = this.param('pk');\n        }\n        map[pk] = ['IN', ids];\n        //let get = this.get();\n        //this.end(status);\n        switch (status) {\n            case -1:\n                await this.delete(model, map, { 'success': '删除成功', 'error': '删除失败' });\n                break;\n            case 0:\n                await this.forbid(model, map, { 'success': '禁用成功', 'error': '禁用失败' });\n                break;\n            case 1:\n                await this.resume(model, map, { 'success': '启用成功', 'error': '启用失败' });\n                break;\n            case 10: //拓课下架\n                console.log(\"下架------\" + JSON.stringify(map) + \",\" + JSON.stringify(model));\n                await this.onlineDown(model, map, { 'success': '下架成功', 'error': '启用失败' });\n                break;\n            case 11: //拓课上架\n                console.log(\"上架------\");\n                await this.onlineUp(model, map, { 'success': '上架成功', 'error': '启用失败' });\n                break;\n            default:\n                this.fail('参数错误');\n                break;\n        }\n\n    }\n\n    /**\n     * 排序\n     */\n    async sortAction(self, model, id = 'id') {\n        model = model || this.http.controller;\n        let param = this.param();\n        let sort = JSON.parse(param.sort);\n        let data = []\n        for (let v of sort) {\n            let map = {}\n            map[id] = v.id;\n            map.sort = v.sort;\n            data.push(map)\n        }\n        let res = await this.model(model).updateMany(data);\n        if (res > 0) {\n            //更新缓存\n            switch (model) {\n                case 'channel': //更新频道缓存信息\n                    update_cache(\"channel\") //更新频道缓存信息\n                    break;\n                case 'category': //更新全站分类缓存\n                    update_cache(\"category\") //更新栏目缓存\n                    break;\n            }\n            return this.success({ name: \"更新排序成功！\" });\n        } else {\n            return this.fail(\"排序失败！\");\n        }\n    }\n    async puliccacheAction(self, model) {\n            let type = this.param('type');\n            if (think.isEmpty(type)) {\n                type = model || this.http.controller;\n            }\n            let res = false;\n            let msg = \"未知错误！\";\n            switch (type) {\n                case 'channel': //更新频道缓存信息\n                    update_cache(\"channel\") //更新频道缓存信息\n                    res = true;\n                    msg = \"更新导航缓存成功！\";\n                    break;\n                case 'category': //更新全站分类缓存\n                    update_cache(\"category\") //更新栏目缓存\n                    res = true;\n                    msg = \"更新栏目缓存成功！\";\n                    break;\n                case 'model':\n                    update_cache(\"model\") //更新模型缓存\n                    res = true;\n                    msg = \"更新栏目缓存成功！\";\n                    break;\n            }\n            if (res) {\n                return this.success({ name: msg });\n            } else {\n                return this.fail(msg)\n            }\n\n        }\n        /**\n         * 返回后台节点数据\n         * @param {boolean} tree    是否返回多维数组结构(生成菜单时用到),为false返回一维数组(生成权限节点时用到)\n         * @retrun {array}\n         *\n         * 注意,返回的主菜单节点数组中有'controller'元素,以供区分子节点和主节点\n         *\n         * @author\n         */\n    async returnnodes(tree) {\n        tree = tree || true;\n        let http = this.http;\n        //let modelname = http.module;\n        let tree_nodes = [];\n        if (tree && !think.isEmpty(tree_nodes)) {\n            return tree_nodes;\n        }\n        let nodes;\n        if (tree) {\n            var list = await this.model('menu').field('id,pid,title,url,tip,hide').order('sort asc').select();\n            nodes = get_children(list, 0);\n        } else {\n            nodes = await this.model('menu').field('title,url,tip,pid').order('sort asc').select();\n\n        }\n        tree_nodes = nodes;\n        return nodes;\n    }\n\n    /**\n     * 处理文档列表显示\n     * @param {array} list 列表数据\n     * @param {integer} model_id 模型id\n     */\n    async parseDocumentList(list, model_id) {\n            model_id = model_id || 1;\n            let attrList = await this.model('attribute').get_model_attribute(model_id, false, 'id,name,type,extra');\n            \n            let userList =await this.session(\"userList\");\n            if(think.isEmpty(userList))\n            {\n                userList = await this.model('member').field('id,real_name,groupid').select();\n                let groupList = await this.model('member_group').field('groupid,name').select();\n                userList.forEach((u)=>{\n                    groupList.forEach((k) => {\n                        if(k.groupid==u.groupid){\n                            u.groupname=k.name;\n                        }\n                    });\n                });\n                \n                console.log(\"userList------\"+JSON.stringify(userList) );\n                await this.session(\"userList\",userList);\n            }\n            \n            // let user=[];\n            // userList.forEach((k) => {\n            //     let kk={};\n            //     kk.id=k.id;\n            //     kk.name=k.real_name;\n            //     user.push(kk);\n                \n            // });\n            // console.log(\"user-----\"+JSON.stringify(user));\n            //attrList=attrList[model_id];\n            //this.end(attrList);\n            // \n            if (think.isArray(list)) {\n                list.forEach((data, k) => {\n                        //console.log(data);\n                        for (let key in data) {\n                            // console.log(key)\n                            if (!think.isEmpty(attrList[key])) {\n                                let extra = attrList[key]['extra'];\n                                let type = attrList[key]['type'];\n                                // if()\n                                // console.log(extra);\n                                if ('select' == type || 'checkbox' == type || 'radio' == type || 'bool' == type) {\n                                    // 枚举/多选/单选/布尔型\n                                    let options = parse_config_attr(extra);\n                                    let oparr = Object.keys(options);\n                                    if (options && in_array(data[key], oparr)) {\n                                        data[key] = options[data[key]];\n                                    }\n                                } else if ('date' == type) { // 日期型\n                                    data[key] = dateformat('Y-m-d', data[key]);\n                                } else if ('datetime' == type) { // 时间型\n                                    data[key] = dateformat('Y-m-d H:i', data[key]);\n                                } else if ('pics' === type) {\n                                    data[key] = `<span class=\"thumb-sm\"><img alt=\"...\" src=\"${data[key]}\" class=\"img-responsive img-thumbnail\"></span>`;\n                                }\n                                if(key=='uid'){\n                                    userList.forEach((k) => {\n                                        if(k.id==data[key]){\n                                            data[key]=k.real_name;\n                                            // data['groupid']=k.groupid;\n                                        }\n                                    });\n                                }\n                                else if(key=='groupid'){\n                                    userList.forEach((k) => {\n                                        if(k.id==data['uid']){\n                                            data['groupid']=k.groupname;\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                        data.model_id = model_id;\n                        list[k] = data;\n                    })\n                    //console.log(222)\n                return list;\n            }\n        }\n        /**\n         * 后台栏目权限验证方法\n         * await this.admin_priv(\"init\",cid,error) 查看\n         * @param ac //init:查看,add:添加,edit:编辑,delete:删除,listorder:排序,push:推送,move:移动，examine：审核，disable：禁用\n         * @param cid //栏目id\n         * @param error //错误提示\n         * @returns {PreventPromise}\n         */\n    async admin_priv(ac, cid, error = \"您所在的用户组,禁止本操作！\") {\n        if (!this.is_admin) {\n            //访问控制\n            let priv = await this.model(\"category_priv\").priv(cid, this.roleid, ac, 1);\n            if (!priv) {\n                this.http.error = new Error(error);\n                return think.statusAction(702, this.http);\n            }\n        }\n\n    }\n}\n"
    ]
}