{
    "version": 3,
    "sources": [
        "../../../src/common/config/view_safe_save_000107.js"
    ],
    "names": [
        "type",
        "content_type",
        "file_ext",
        "file_depr",
        "root_path",
        "think",
        "ROOT_PATH",
        "adapter",
        "nunjucks",
        "prerender",
        "env",
        "addFilter",
        "size",
        "delimiter",
        "units",
        "i",
        "Math",
        "round",
        "d",
        "sec",
        "time",
        "date",
        "Date",
        "y",
        "getFullYear",
        "M",
        "getMonth",
        "getDate",
        "h",
        "getHours",
        "m",
        "getMinutes",
        "s",
        "getSeconds",
        "config",
        "moment",
        "require",
        "locale",
        "isEmpty",
        "fromNow",
        "format",
        "str",
        "parse_config_attr",
        "status",
        "JSON",
        "parse",
        "json",
        "sn",
        "ss",
        "split",
        "console",
        "log",
        "arr",
        "isArray",
        "isNumber",
        "in_array",
        "any",
        "get_attribute_type",
        "data",
        "grid",
        "controller",
        "module",
        "get_list_field",
        "wx_bq",
        "emoji",
        "key",
        "img",
        "reg",
        "RegExp",
        "replace",
        "id",
        "val",
        "http",
        "sort_url",
        "getid",
        "sanjiao",
        "extra",
        "dateformat",
        "all",
        "get_action_type",
        "int",
        "_int2iP",
        "model_id",
        "field",
        "callback",
        "getmodelfield",
        "get_model",
        "uid",
        "get_nickname",
        "get_realname",
        "get_rolename",
        "model",
        "pk",
        "map",
        "where",
        "getField",
        "name",
        "get_url",
        "doc",
        "userInfo",
        "get_url_vip",
        "cover_id",
        "get_cover",
        "w",
        "obj",
        "v",
        "get_pic",
        "get_cate",
        "price",
        "get_price_format",
        "agent",
        "is_weixin",
        "num",
        "formatCurrency",
        "get_price",
        "getTime",
        "flg",
        "newstr",
        "length",
        "tmp",
        "substring",
        "file_id",
        "get_file",
        "groupid",
        "getgroup",
        "get_vip",
        "html",
        "img_text_view",
        "catid",
        "roleid",
        "action",
        "is_admin",
        "priv",
        "isp",
        "addExtension",
        "mytags",
        "column",
        "channel",
        "topic",
        "groups",
        "keywords",
        "rkeywords",
        "spaceid",
        "showad",
        "res",
        "code"
    ],
    "mappings": "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",
    "file": "../../../src/common/config/view_safe_save_000107.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n/**\n * template config\n */\nexport default {\n    type: 'nunjucks',\n    content_type: 'text/html',\n    file_ext: '.html',\n    file_depr: '_',\n    root_path: think.ROOT_PATH + '/view',\n    adapter: {\n        nunjucks: {\n            prerender: (nunjucks, env) => {\n                /**\n                 * 格式化字节大小\n                 * @param  number size      字节数\n                 * @param  string delimiter 数字和单位分隔符\n                 * @return string            格式化后的带单位的大小\n                 */\n                env.addFilter(\"format_bytes\", function (size, delimiter = '') {\n                    let units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\n                    for (var i = 0; size >= 1024 && i < 5; i++) size /= 1024;\n                    return Math.round(size * 100) / 100 + delimiter + units[i];\n                });\n\n                /**\n                 * 格式化时间\n                 */\n                env.addFilter(\"format_time\", function (d, sec) {\n                    var time;\n                    var date = new Date(d);\n                    var y = date.getFullYear();\n                    var M = date.getMonth() + 1;\n                    M = M < 10 ? \"0\" + M : M;\n                    var d = date.getDate();\n                    d = d < 10 ? \"0\" + d : d;\n                    var h = date.getHours();\n                    h = h < 10 ? \"0\" + h : h;\n                    var m = date.getMinutes();\n                    m = m < 10 ? \"0\" + m : m;\n                    var s = date.getSeconds();\n                    s = s < 10 ? \"0\" + s : s;\n                    if (sec) {\n                        time = y + \"-\" + M + \"-\" + d + \" \" + h + \":\" + m + \":\" + s;\n                    } else {\n                        time = y + \"-\" + M + \"-\" + d + \" \" + h + \":\" + m;\n                    }\n                    return time;\n                })\n                /**\n                 * moment\n                 * YYYY-MM-DD HH:mm:ss\n                 * lll\n                 */\n                env.addFilter(\"moment\",function (time,config) {\n                    let moment = require('moment');\n                    moment.locale('zh-cn');\n                    if(think.isEmpty(config)){\n                        return moment(time).fromNow();\n                    }else {\n                        return moment(time).format(config);\n                    }\n                })\n                /**\n                 *分析枚举类型配置值 格式 a:名称1,b:名称2\n                 */\n                env.addFilter(\"parse_config_attr\", function (str) {\n                    return parse_config_attr(str)\n                })\n                env.addFilter(\"show_status_op\", function (status) {\n                    // 获取数据的状态操作\n                    switch (status) {\n                        case 0:\n                            return '启用';\n                            break;\n                        case 1:\n                            return '禁用';\n                            break;\n                        case 2:\n                            return '审核';\n                            break;\n                        default:\n                            return false;\n                            break;\n\n                    }\n                })\n                /**\n                 * 获取文档的类型文字\n                 */\n                env.addFilter(\"get_document_type\", function (type = null) {\n                    if (think.isEmpty(type)) {\n                        return false;\n                    }\n                    switch (type) {\n                        case 1:\n                            return '目录';\n                            break;\n                        case 2:\n                            return '主题';\n                            break;\n                        case 3:\n                            return '段落';\n                            break;\n                        default:\n                            return false;\n                            break;\n                    }\n                })\n                env.addFilter(\"strToJson\", function (str) {\n                    if (!think.isEmpty(str) && str !=0) {\n                        return JSON.parse(str);\n                    }\n                })\n                env.addFilter(\"jsonToStr\", function (json) {\n                    if (!think.isEmpty(json)) {\n                        return JSON.stringify(json);\n                    }\n                })\n                env.addFilter(\"strToArray\", function (str,sn=\",\") {\n                    if (!think.isEmpty(str)) {\n                        let ss = str.split(sn);// 在每个逗号(,)处进行分解。\n                        console.log(ss);\n                        return ss;\n                    }else{\n                        return str;\n                    }\n                })\n\n                env.addFilter(\"in_Array\", function (str, arr) {\n                    arr= arr||0;\n                    if (!think.isArray(arr)) {\n                        if(think.isNumber(arr)){\n                            arr = \"'\"+arr+\"'\";\n                        }\n                        arr = arr.split(\",\");\n                    }\n                    //console.log(arr);\n                    return in_array(str, arr);\n                })\n\n                env.addFilter(\"isempty\", function (any) {\n                    return think.isEmpty(any);\n                })\n\n                //获取字段类型信息\n                env.addFilter(\"get_attribute_type\", function (str) {\n                    return get_attribute_type(str);\n                })\n                //格式化字段列表\n                env.addFilter(\"get_list_field\", function (data, grid, controller, module) {\n                    return get_list_field(data, grid, controller, module);\n                })\n                //表情图标正则替换\n                env.addFilter(\"get_bq\", function (wx_bq, emoji) {\n                    for (let key in emoji) {\n                        let img = '<img src=\"https:\\/\\/res.wx.qq.com/mpres/htmledition/images/icon/emotion/' + key + '.gif\" />';\n                        let reg = new RegExp('\\\\[' + emoji[key] + '\\\\]', 'g');\n                        wx_bq = wx_bq.replace(reg, img);\n                    }\n                    return wx_bq;\n                })\n                //解析分类信息url\n                env.addFilter(\"sort_url\", function (id,val,arr,http) {\n                    \n                        return sort_url(id,val,arr,http);\n\n                })\n                //解析分类信息当前状态\n                env.addFilter(\"sort_act\",function (id,getid) {\n                    //console.log(in_array(id, sanjiao(getid.split(\".\"))));\n                    if(!think.isEmpty(getid)){\n                        return in_array(id,sanjiao(getid.split(\".\")));\n                    }\n\n\n                })\n                /**\n                 * 时间戳格式化 dateformat('Y-m-d H:i:s')\n                 * @param extra 'Y-m-d H:i:s'\n                 * @param date  时间戳\n                 * @return  '2015-12-17 15:39:44'\n                 */\n                env.addFilter(\"dateformat\", function (extra, date) {\n                    return dateformat(date, extra);\n                })\n                env.addFilter(\"dateformat_\", function (extra, date) {\n                    return dateformat(date, extra);\n                })\n                /**\n                 * 获取行为类型\n                 * @param intger type 类型\n                 * @param bool all 是否返回全部类型\n                 * @author arterli <arterli@qq.com>\n                 */\n                env.addFilter(\"get_action_type\", function (type, all = false) {\n                    return get_action_type(type, all);\n                })\n                /**\n                 * 数字转ip\n                 */\n                env.addFilter(\"int2ip\",function (int) {\n                    return _int2iP(int);\n                })\n                /**\n                 * 获取模型字段信息\n                 * @param model_id 模型id 或 模型名称\n                 * @param id 数据id\n                 * @param field 字段\n                 * @param return 整条数据或字段数据\n                 * @author arterli <arterli@qq.com>\n                 */\n                env.addFilter(\"getmodelfield\", async(id, model_id, field, callback) => {\n                    let data = await getmodelfield(model_id, id, field);\n                    callback(null, data);\n                }, true)\n                /**\n                 * 获取模型信息\n                 * @param model_id 模型id 或 模型名称\n                 * @param field 字段\n                 * @param return 整条数据或字段数据\n                 * @author arterli <arterli@qq.com>\n                 */\n                env.addFilter(\"getmode\", async(model_id, field, callback) => {\n                    let data = await get_model(model_id, field);\n                    callback(null, data);\n                }, true)\n                /**\n                 * 获取用户名称\n                 */\n                env.addFilter(\"get_nickname\", async(uid, callback) => {\n                    let data = await get_nickname(uid);\n                    callback(null, data);\n                }, true)\n                env.addFilter(\"get_realname\", async(uid, callback) => {\n                    let data = await get_realname(uid);\n                    callback(null, data);\n                }, true)\n                env.addFilter(\"get_rolename\", async(uid, callback) => {\n                    let data = await get_rolename(uid);\n                    callback(null, data);\n                }, true)\n                /**\n                 * 获取关联\n                 */\n                env.addFilter(\"get_relation\", async(id,model,pk,val, callback) => {\n                    let map ={};\n                    map[pk] = id;\n                    let data = await think.model(model,think.config(\"db\")).where(map).getField(val,true);\n                    callback(null, data);\n                }, true)\n                /**\n                 * 获取文档url\n                 */\n                env.addFilter('get_url', (name, id) => {\n                    return get_url(name, id)\n                })\n                env.addFilter('get_url_vip', async(doc, userInfo, callback) => {\n                    let data = await get_url_vip(doc, userInfo);\n                    callback(null, data);\n                }, true)\n                /**\n                 * 获取文档封面图\n                 */\n                env.addFilter('get_cover', async(cover_id, field, callback) => {\n\n                    let data = await get_cover(cover_id, field);\n                    callback(null, data);\n\n                }, true)\n                /**\n                 * {{id|get_pic(\"m=1,w=200,h=200\")}}\n                 */\n                env.addFilter('get_pic', async(id, type, callback)=> {\n                    let m, w, h;\n                    //console.log(type);\n                    let obj = {};\n                    for (let v of type.split(\",\")) {\n                        v = v.split(\"=\");\n                        obj[v[0]] = v[1];\n                    }\n                    m = obj.m;\n                    w = obj.w;\n                    h = obj.h;\n                    let data = await get_pic(id, m, w, h);\n                    callback(null, data);\n                }, true)\n                /**\n                 * 根据栏目id获取栏目信息\n                 *\n                 */\n                env.addFilter('get_cate', async(id,callback)=> {\n                    let data = await get_cate(id);\n                    callback(null, data);\n                }, true)\n                //价格格式化\n                env.addFilter(\"get_price_format\", function (price, type) {\n                    return get_price_format(price, type);\n                })\n                /**\n                 * is_weixin\n                 * 判断是否是微信访问\n                 */\n                env.addFilter(\"is_weixin\", (agent)=> {\n                    return is_weixin(agent);\n                })\n                /**\n                 * 将数值四舍五入(保留1位小数)后格式化成金额形式\n                 *\n                 * @param num 数值(Number或者String)\n                 * @return 金额格式的字符串,如'1,234,567.4'\n                 * @type String\n                 */\n                env.addFilter(\"formatCurrency\", function (num) {\n                    if (!think.isEmpty(num)) {\n                        return formatCurrency(num);\n                    }\n                })\n                /**\n                 * 获取商品价格不格式\n                 */\n                env.addFilter('get_price', function (price, type) {\n                    return get_price(price, type);\n                })\n                /**\n                 * 获取当前事件 时间戳\n                 */\n                env.addFilter('getnow', function () {\n                    return new Date().getTime();\n                })\n                /**\n                 * 字符串在指定位置插入内容\n                 * str表示原字符串变量，flg表示要插入的字符串，sn表示要插入的位置\n                 */\n                env.addFilter('insert_flg',(str,flg,sn)=>{\n                    var newstr=\"\";\n                    for(var i=0;i<str.length;i+=sn){\n                        var tmp=str.substring(i, i+sn);\n                        newstr+=tmp+flg;\n                    }\n                    return newstr;\n                })\n                /**\n                 * 字符串在指定位截断\n                 * str表示原字符串变量，flg表示要插入的字符串，sn表示要截断位置\n                 */\n                env.addFilter('block',(str,sn,flg)=>{\n                    var newstr=\"\";\n                    if(think.isEmpty(flg)){\n                        flg=\"...\";\n                    }\n                    if(!think.isEmpty(str)){\n                        if(sn>=str.length){\n                            newstr = str;\n                        }\n                        else{\n                            newstr=str.substring(0,sn);\n                        }\n                    }\n                    return newstr+flg;\n                })\n                /**\n                 * 过滤html标签\n                 *\n                 */\n                env.addFilter('delhtmltags',(str)=>{\n                    if(!think.isEmpty(str)) {\n                        return str.replace(/<[^>]+>/g, \"\");//去掉所有的html标记\n                    }else {\n                        return '';\n                    }\n                })\n                /**\n                 * 获取文件信息\n                 * @param file_id 文件id\n                 * @param field 字段名,如果为空则返回整个记录集\n                 * @returns {*}\n                 */\n                env.addFilter('get_file',async (file_id,field,key,callback)=>{\n                    let data = await get_file(file_id,field,key);\n                    callback(null,data);\n                },true);\n                /**\n                 * 获取用户组\n                 */\n                env.addFilter('get_member_group',async (groupid,callback)=>{\n                    let data = await think.model(\"member_group\",think.config(\"db\")).getgroup({groupid:groupid});\n                    console.log(\"get_member_group-------\"+groupid+\",\"+JSON.stringify(data));\n                    callback(null,data[0]);\n                },true);\n                env.addFilter('get_member_vip',async (uid,callback)=>{\n                    let data = await think.model(\"member\",think.config(\"db\")).get_vip(uid);\n                    // console.log(\"get_member_vip-------\"+data);\n                    callback(null,data);\n                },true);\n                /**\n                 * 提取文本内容中的图片\n                 * @param html 文本内容\n                 * @param w kuan 高\n                 * @returns []\n                 */\n                env.addFilter('img_text_view',(html,w=200,h=200)=>{\n                    return img_text_view(html,w,h)\n                })\n                /**\n                 *缓存权限列表 all_priv\n                 * @param catid 要验证的栏目id\n                 * @param roleid 用户组\n                 * @param action 权限类型\n                 * @param is_admin 谁否前台 0前台，1后台\n                 * @returns {bool} 返回flase 或true flase:没权限，true:有权限。\n                 */\n                env.addFilter('priv',async(catid,roleid,action,is_admin=0,type=true,callback)=>{\n                    let isp= await priv(catid,roleid,action,is_admin,type);\n                    //console.log(isp);\n                    callback(null,isp);\n                },true);\n\n                env.addExtension('tagtest', new mytags(), true);\n                /**\n                 * 获取分类标签\n                 */\n                env.addExtension('column', new column(), true);\n                /**\n                 * 获取导航标签\n                 */\n                env.addExtension('channel', new channel(), true);\n                /**\n                 * 获取数据标签\n                 */\n                env.addExtension('topic', new topic(), true);\n                /**\n                 * 获取分类分组\n                 */\n                env.addExtension('groups', new groups(), true);\n                /**\n                 * 获取话题\n                 */\n                env.addExtension('keywords', new keywords(), true);\n                env.addExtension('rkeywords', new rkeywords(), true);\n                //基于thinkjs model的万能查询\n                env.addExtension('model',new model(),true);\n                /**\n                 * 广告位调用\n                 * //返回代码\n                 * {{广告位id|show_ad('code')|safe}}\n                 * //json调用\n                 * {% set adlist = 广告位id|show_ad('json')%}\n                 * {%for ad in adlist%}\n                 * ....\n                 * {%endfor%}\n                 */\n                env.addFilter('show_ad',async(spaceid,type,callback)=> {\n                    let data = await think.model(\"ext_ad_space\",think.config(\"db\"),\"ext\").showad(spaceid);\n                    let res;\n                    if(type==\"code\"){\n                        res = data[0].code;\n                    }else {\n                        res = JSON.parse(data[0].json);\n                    }\n                    callback(null, res);\n                }, true);\n\n            }\n        }\n    }\n};\n"
    ]
}