{
    "version": 3,
    "sources": [
        "../../../src/common/bootstrap/tags.js"
    ],
    "names": [
        "global",
        "mytags",
        "tags",
        "parse",
        "parser",
        "nodes",
        "lexer",
        "tok",
        "nextToken",
        "args",
        "parseSignature",
        "advanceAfterBlockEnd",
        "value",
        "CallExtensionAsync",
        "run",
        "context",
        "callback",
        "arg",
        "map",
        "split",
        "maps",
        "val",
        "indexOf",
        "replace",
        "console",
        "log",
        "model_id",
        "think",
        "isEmpty",
        "mid",
        "model",
        "config",
        "get_table_name",
        "offset",
        "length",
        "limit",
        "isArray",
        "parseInt",
        "where",
        "cid",
        "isNumberString",
        "category_id",
        "order",
        "select",
        "data",
        "ctx",
        "column",
        "pid",
        "tree",
        "isapp",
        "isindex",
        "get_all_category",
        "isnum",
        "v",
        "cache",
        "id",
        "status",
        "count",
        "doc_num",
        "arr",
        "_",
        "toInteger",
        "filter",
        "trees",
        "arr_to_tree",
        "isNumber",
        "url",
        "channel",
        "get_channel_cache",
        "groups",
        "get_groups",
        "topic",
        "issub",
        "cids",
        "cidarr",
        "get_sub_category",
        "subcate",
        "concat",
        "push",
        "Number",
        "unique",
        "sort",
        "uid",
        "extend",
        "group",
        "type",
        "time_start",
        "Date",
        "time_end",
        "puid",
        "position",
        "ispic",
        "cover_id",
        "tid",
        "tval",
        "JSON",
        "join",
        "table",
        "as",
        "on",
        "isstu",
        "topicarr",
        "stuwhere",
        "find",
        "details",
        "keywords",
        "mod",
        "keywrod",
        "k",
        "keyname",
        "rkeywords",
        "mod_id",
        "docid",
        "mod_type",
        "keyword",
        "getField",
        "topicid",
        "fieldReverse",
        "alias",
        "field",
        "ret"
    ],
    "mappings": "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",
    "file": "../../../src/common/bootstrap/tags.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict'\n/**\n * use global.xxx to define global functions\n *\n * global.fn1 = function(){\n *\n * }\n */\n\nglobal.mytags= function(){\n\n    this.tags= ['tagtest'];\n    this.parse = function (parser, nodes, lexer) {\n        var tok = parser.nextToken();\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args)\n    };\n    this.run = async function (context, args, callback) {\n        //console.log(args);\n\n        for (var arg in args) {\n            //console.log(arg);\n            if (arg !== '__keywords') {\n                let map = args[arg].split(\",\");\n                let maps={}\n                for(let val of map){\n                    val=val.split(\"=\");\n                    //console.log(val[1].indexOf(\"[\"));\n                    if(val[1].indexOf(\"[\")===0){\n                        val[1]=val[1].replace(\"[\", \"\").replace(\"]\", \"\").split(\"-\");\n                        console.log(val[1]);\n                    }\n                    maps[val[0]]=val[1]\n                }\n                //console.log(maps);\n                let model_id;\n                //model\n                if(think.isEmpty(maps.mid)){\n                    model_id = 1;\n                }else {\n                    model_id=maps.mid;\n                    delete maps.mid;\n                }\n                let model = await think.model(\"model\", think.config(\"db\")).get_table_name(model_id);\n                //console.log(model);\n                //limit\n                let offset,length;\n                if(think.isEmpty(maps.limit)){\n                    offset = 10;\n                }else {\n                    if(think.isArray(maps.limit)){\n                        offset=parseInt(maps.limit[0]);\n                        length=parseInt(maps.limit[1]);\n                    }else {\n                        offset = parseInt(maps.limit);\n                    }\n                    delete maps.limit;\n                }\n                //where\n                let where={};\n                if(!think.isEmpty(maps.cid) && think.isNumberString(maps.cid)){\n                    where.category_id = maps.cid;\n                }\n                let order ;\n                if(!think.isEmpty(maps.order)){\n                    order = maps.order;\n                }\n                //console.log(maps);\n                //console.log(offset);\n                let data = await think.model(model, think.config(\"db\")).where(where).limit(offset,length).order(order).select();\n                //console.log(data);\n                context.ctx[arg] = data;\n            }\n        }\n        return callback(null,'');\n    };\n\n}\n/**\n * 获取同一级栏目标签\n *{%column data = \"list\"%}\n * @param data:接受返回数据的变量名称，例: data = \"list\"\n *  {% column data=\"list\",pid=1 %}\n * @param pid: 获取同级栏目\n * {% column data=\"list\",cid=1 %}\n * @param cid: 获取里栏目\n * {% column data=\"list\",tree=1 %}\n * @param tree:获取栏目的树结构 tree=\"0\",从pid为0开始获取\n * @param isapp: 是否在在移动端调用 iaapp=\"all\" 调用全部栏目 isapp=\"1\" pid为0的栏目,isindex=\"1\",除去封面。\n * @parpm isnum = \"1\" ,1-获取栏目条数,默认不获取\n */\nglobal.column= function(){\n\n    this.tags= ['column'];\n    this.parse = function (parser, nodes, lexer) {\n        var tok = parser.nextToken();\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args)\n    };\n    this.run = async function (context, args, callback) {\n        //console.log(args);\n        let data = think.isEmpty(args.data) ?\"data\":args.data;\n        let pid = !think.isEmpty(args.pid) ?args.pid:false;\n        let cid = !think.isEmpty(args.cid) ?args.cid:false;\n        let tree = !think.isEmpty(args.tree) ?args.tree:false;\n        let isapp = !think.isEmpty(args.isapp) ?args.isapp:false;\n        let limit = !think.isEmpty(args.limit) ? \"10\" : args.limit;\n        let isindex = !think.isEmpty(args.isindex) ?args.isindex:false;\n\n        let column = await think.model('category', think.config(\"db\")).get_all_category();\n        if(args.isnum==1){\n            for(let v of column){\n                v.doc_num = await think.model('document',think.config(\"db\")).cache(1000).where({category_id:v.id,status:[\">\",0]}).count(\"id\");\n            }\n        }\n        //console.log(column);\n        let arr;\n        //获取同级栏目\n        let map = {};\n        if(pid){\n            map.pid=think._.toInteger(pid);\n            arr = think._.filter(column, map)\n        }else if(cid){\n            map.pid=think._.toInteger(cid);\n            arr = think._.filter(column, map)\n            // console.log(arr);\n        }else if(tree){\n            let trees = arr_to_tree(column,tree);\n            //console.log(trees)\n            arr = !think.isEmpty(trees)?trees:false;\n        }else if(isapp||isapp==0){\n\n            map.isapp =1;\n            if(think.isNumberString(isapp)||think.isNumber(isapp)){\n                map.pid=think._.toInteger(isapp);\n            }\n            arr = think._.filter(column, map);\n            if(isindex){\n                for(let v of arr){\n                    v.url=(v.url).replace(/channel/,'column');\n                }\n            }\n        }\n        context.ctx[data] = arr;\n        // console.log(arr);\n        return callback(null,'');\n    };\n\n}\n\n/**\n *获取导航标签\n * {chan}\n */\n\nglobal.channel = function(){\n    this.tags = ['channel'];\n    this.parse = function (parser,nodes,lexer) {\n        var tok = parser.nextToken();\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args)\n    };\n    this.run = async function (context, args, callback) {\n        let data = think.isEmpty(args.data) ?\"data\":args.data;\n        let channel = await think.model('channel', think.config(\"db\")).get_channel_cache();\n        channel = arr_to_tree(channel,0);\n        // console.log(channel);\n        context.ctx[data] = channel;\n        return callback(null,'');\n    }\n}\n/**\n *获取分类分组标签\n *  {% groups data=\"groups\",cid=\"1\"%}\n */\n\nglobal.groups = function(){\n    this.tags = ['groups'];\n    this.parse = function (parser,nodes,lexer) {\n        var tok = parser.nextToken();\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args)\n    };\n    this.run = async function (context, args, callback) {\n        let data = think.isEmpty(args.data) ?\"data\":args.data;\n        context.ctx[data] = await think.model('category', think.config(\"db\")).get_groups(args.cid);\n        return callback(null,'');\n    }\n}\n\n/**\n * 获取数据标签\n * {% topic data = \"data\"%}\n * topic:标签名称\n * data:接受返回数据的变量名称，例: data = \"data\"\n * limit: 设置查询结果的条数，例: limit=\"10\",limit=\"3,10\"\n * cid: 栏目id ,单个栏目 cid=\"1\",多个栏目 cid = \"1,2,3,4\" , 不写调取全部栏目\n * {{name|get_url(id)}}文章链接\n * type: 标签类型,hot-安装浏览量从高到底,level-安装优先级从高到低排序,默认安装更新时间排序\n * //{% topic data = \"data\",limit= \"5\",cid=category.id,type=\"hot\"%}\n * position:1:列表推荐,2:频道推荐,4:首页推荐\n * ispic:是否包涵缩略图,1:包含缩略图的内容,2:不包含缩略图,默认所有\n * issub:1:包含自栏目,2:不包含自栏目,默认包含自栏目\n * isstu:1:获取副表内容,2:只从主表拿数据,默认只从主表拿\n * group:分组id，单个分组：group=\"1\",多个分组 :group=\"1,2,3,4\",不写调取全部分组。\n * where:查询条件''\n * tid ;分类信息id\n * tval;分类信息条件\n */\nglobal.topic = function(){\n    this.tags = ['topic'];\n    this.parse = function (parser, nodes, lexer) {\n        let tok = parser.nextToken();\n        let args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args);\n    };\n    this.run = async function (context, args, callback) {\n        // console.log(args);\n        let where = {'status':1,'pid':0};\n        //'uid':['IN',[1,461]]\n        let data = think.isEmpty(args.data) ? \"data\" : args.data;\n        let limit = think.isEmpty(args.limit) ? \"10\" : args.limit;\n        //获取当前分类的所有子栏目\n        if(args.issub!=2){\n            if(!think.isEmpty(args.cid)){\n                let cids = `${args.cid}`;\n                let cidarr = []\n                for (let v of cids.split(\",\")){\n                    let subcate = await think.model('category',think.config(\"db\")).get_sub_category(v);\n                    cidarr = cidarr.concat(subcate)\n                    cidarr.push(Number(v))\n                }\n\n                args.cid=unique(cidarr).sort();\n            }\n        }\n        //admin\n        let uid = think.isEmpty(args.uid) ? false :{'uid':['IN',[1,args.uid]]};\n        if(uid){\n            where = think.extend({},where,uid);\n        }else{\n            where = think.extend({},where,{'uid':1});\n        }\n        //subcate.push(cate.id);\n        let cid = think.isEmpty(args.cid) ? false :{'category_id':['IN',args.cid]};\n        if(cid){\n            where = think.extend({},where,cid);\n        }\n        //分组\n        if( !think.isEmpty(args.group)){\n            where = think.extend(where,{'group_id':['IN',args.group]});\n        }\n        let type='update_time DESC';\n        if(!think.isEmpty(args.type)){\n            if(args.type==\"hot\"){\n                type=\"view DESC\"\n            }else if(args.type == \"level\"){\n                type=\"level DESC\"\n            }else if(args.type == \"today\"){\n                console.log(\"test ----\"+time_start(new Date())+\",\"+time_end(new Date()));\n                where = think.extend(where,{'update_time':['between',`${time_start(new Date())},${time_end(new Date())}`]});\n                // type=\"update_time\"\n            }else if(args.type == \"picture\"){\n                let puid=args.uid;\n                if(puid==0){\n                    puid=1;\n                }\n                where = think.extend({},where,{'uid':puid});\n            }else if(args.type == \"online\"){\n                \n                where = think.extend({},where,{'online':1});\n            }\n        }\n        //推荐\n        if(!think.isEmpty(args.position)){\n            where = think.extend(where,{position:args.position})\n        }\n        //是否缩略图\n        if(!think.isEmpty(args.ispic)){\n            if(args.ispic ==1){\n                where = think.extend(where,{cover_id:['>',0]});\n            }else if(args.ispic == 2){\n                where = think.extend(where,{cover_id:0});\n            }\n        }\n\n        // console.log(where);\n        let topic\n        if(args.tid &&!think.isEmpty(args.tval)){\n            \n            for(let v in JSON.parse(args.tval)){\n                where[\"t.\"+v]=JSON.parse(args.tval)[v]\n            }\n            // console.log(where);\n            topic = await think.model('document', think.config(\"db\")).join({\n                table: \"type_optionvalue\"+args.tid,\n                join: \"left\", // 有 left,right,inner 3 个值\n                as: \"t\",\n                on: [\"id\", \"tid\"]\n\n            }).where(where).limit(limit).order(type).select();\n        }else {\n            topic = await think.model('document', think.config(\"db\")).where(where).limit(limit).order(type).select();\n        }\n        //副表数据\n        if(args.isstu == 1){\n            let topicarr = [];\n            let stuwhere ={};\n\n            for(let v of topic){\n                let table =await think.model(\"model\",think.config(\"db\")).get_table_name(v.model_id);\n                let details = await think.model(table,think.config(\"db\")).find(v.id);\n                topicarr.push(think.extend({},v,details));\n            }\n            if(!think.isEmpty(args.stuwhere)){\n                stuwhere = JSON.parse(args.stuwhere);\n                topicarr =  think._.filter(topicarr, stuwhere)\n            }\n            topic = topicarr;\n        }\n         // console.log(topic)\n        context.ctx[data] = topic;\n        return callback(null, '');\n    }\n}\n\n/**\n *获取话题标签\n * {% keywords data =\"kws\"%}\n *\n * data:接受返回数据的变量名称，例: data = \"data\"\n * limit: 设置查询结果的条数，例: limit=\"10\",limit=\"3,10\"\n * type: hot\n */\n\nglobal.keywords = function(){\n    this.tags = ['keywords'];\n    this.parse = function (parser,nodes,lexer) {\n        var tok = parser.nextToken();\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args)\n    };\n    this.run = async function (context, args, callback) {\n        let data = think.isEmpty(args.data) ?\"data\":args.data;\n        let where = {};\n        let limit = think.isEmpty(args.limit) ? \"10\" : args.limit;\n        let mod = think.isEmpty(args.mod) ? \"\" : \",\"+args.mod;\n        let type='discuss_count_update DESC';\n        if(!think.isEmpty(args.type)){\n            if(args.type==\"hot\"){\n                type=\"videonum DESC\"\n            }\n        }\n        let keywrod = await think.model('keyword', think.config(\"db\")).where(where).limit(limit).order(type).select();\n        //console.log(channel);\n        for(let k of keywrod){\n            k.url=`/t/${k.keyname}`+mod;\n        }\n        context.ctx[data] = keywrod;\n        return callback(null,'');\n    }\n}\n/**\n *获取相关话题\n * {% rkeywords data =\"topic\",type=\"0\",mod_id=\"8\",id=\"1\"%}\n *\n * data:接受返回数据的变量名称，例: data = \"data\"\n * limit: 设置查询结果的条数，例: limit=\"10\",limit=\"3,10\"\n * type: 0系统模型，1,独立模型\n * mod_id:模型id,\n * id:文章的的id,\n */\nglobal.rkeywords = function () {\n    this.tags = ['rkeywords'];\n    this.parse = function (parser,nodes,lexer) {\n        var tok = parser.nextToken();\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args)\n    };\n    this.run = async function (context, args, callback) {\n        console.log(args);\n        let data = think.isEmpty(args.data) ?\"data\":args.data;\n        let where = {};\n        let limit = think.isEmpty(args.limit) ? \"5\" : args.limit;\n        let type= think.isEmpty(args.type) ? \"0\" : args.type;\n        let mod_id= think.isEmpty(args.mod_id) ? \"1\" : args.mod_id;\n        let id = think.isEmpty(args.id) ? \"0\" : args.id;\n        where.docid=id;\n        where.mod_type=type;\n        where.mod_id=mod_id;\n        let keyword;\n        let topicid = await think.model(\"keyword_data\", think.config(\"db\")).where(where).getField(\"tagid\");\n        if(!think.isEmpty(topicid)){\n            keyword = await think.model(\"keyword\", think.config(\"db\")).where({id:[\"IN\",topicid]}).limit(limit).select();\n\n            for(let k of keyword){\n                k.url=`/t/${k.keyname},${mod_id}`;\n            }\n        }\n        //console.log(keyword);\n        context.ctx[data] = keyword;\n        return callback(null,'');\n    }\n}\n\n/**\n * thinkjs model 万能数据调用标签\n * {% model data =\"data\"%}\n *\n * data:接受返回数据的变量名称，例: data = \"data\"\n * table:要查询的主表比如 table = \"user\"\n * join :{Object} 要组合的查询语句，默认为 LEFT JOIN\n * field {String} 设置要查询的字段，必须是字符串\n * fieldReverse:{String} 反选字段，即查询的时候不包含这些字段\n * alias:{String} 表别名\n * limit(offset, length) :offset {Number} 设置查询的起始位置 length {Number} 设置查询的数据长度\n * where(where):where {Object} where 条件\n * order {String} 排序方式\n * cache {Number} 缓存有效时间，单位为秒,建议1000秒\n */\nglobal.model = function () {\n    this.tags = ['model'];\n    this.parse = function (parser,nodes,lexer) {\n        var tok = parser.nextToken();\n        var args = parser.parseSignature(null, true);\n        parser.advanceAfterBlockEnd(tok.value);\n        return new nodes.CallExtensionAsync(this, 'run', args)\n    };\n    this.run = async function (context, args, callback) {\n        console.log(args);\n        let data = think.isEmpty(args.data) ?\"data\":args.data;\n        let table = think.isEmpty(args.table) ? \"5\" : args.table;\n        let join = think.isEmpty(args.join) ? false : JSON.parse(args.join);\n        let fieldReverse = think.isEmpty(args.fieldReverse) ? false : args.fieldReverse;\n        let alias = think.isEmpty(args.alias) ? false : args.alias;\n        let limit = think.isEmpty(args.limit) ? false : args.limit;\n        let where = think.isEmpty(args.where) ? false : JSON.parse(args.where);\n        let order = think.isEmpty(args.order) ? false : args.order;\n        let cache = think.isEmpty(args.cache) ? false : args.cache;\n        let field = think.isEmpty(args.field) ? false : args.field;\n        let model =  think.model(table, think.config(\"db\"));\n        //表别名\n        if(cache){\n            model.cache(cache);\n        }\n        //表别名\n        if(alias){\n            model.alias(alias);\n        }\n        //where\n        if(where){\n            model.where(where);\n        }\n        //order\n        if(order){\n            model.order(order);\n        }\n        //查询的字段\n        if(field){\n            model.field(field);\n        }\n        //排除字段\n        if(fieldReverse){\n            model.fieldReverse(fieldReverse);\n        }\n        //查询条数\n        if(limit){\n            model.limit(limit);\n        }\n        //join查询c\n        if(join){\n            model.join(join);\n        }\n\n        let ret =  await model.select();\n\n        //console.log(ret);\n        context.ctx[data] = ret;\n        return callback(null,'');\n    }\n}"
    ]
}