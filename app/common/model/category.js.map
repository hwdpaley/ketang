{
    "version": 3,
    "sources": [
        "../../../src/common/model/category.js"
    ],
    "names": [
        "info",
        "id",
        "field",
        "think",
        "isEmpty",
        "map",
        "isNumberString",
        "name",
        "where",
        "find",
        "gettree",
        "extend",
        "console",
        "log",
        "order",
        "select",
        "list",
        "v",
        "url",
        "get_children",
        "get_category",
        "cache",
        "getallcate",
        "timeout",
        "status",
        "lists",
        "cate",
        "get_parent_category",
        "breadcrumb",
        "undefined",
        "nav",
        "push",
        "pid",
        "reverse",
        "get_sub_category",
        "cat",
        "data",
        "sub_cate",
        "arr",
        "isString",
        "split",
        "val",
        "Number",
        "check_category",
        "isObject",
        "type",
        "category_id",
        "in_array",
        "publish",
        "get_type_bycate",
        "type_list",
        "config",
        "getField",
        "model_type",
        "key",
        "updates",
        "res",
        "create_time",
        "Date",
        "getTime",
        "model",
        "isArray",
        "join",
        "model_sub",
        "add",
        "priv",
        "priv_roleid",
        "obj",
        "catid",
        "siteid",
        "roleid",
        "action",
        "is_admin",
        "priv_groupid",
        "addMany",
        "update_time",
        "update",
        "delete",
        "get_all_category",
        "get_colunm",
        "_",
        "filter",
        "title",
        "get_groups",
        "cid",
        "group",
        "groups",
        "get_cate",
        "search",
        "forEach",
        "n",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/category.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n   \n   /**\n    * 获取分类详细信息\n    * @param  {milit} id 分类ID或者标识\n    * @param  {string} field 查询字段\n    * @return {array} 分类信息\n    */\n   async info(id,field){\n       field=think.isEmpty(field)||'';\n       let map = {};\n       if(think.isNumberString(id)){\n           map.id = id;\n       }else{\n           map.name = id;\n       }\n       return await this.field(field).where(map).find();\n   }\n    /**\n     * 获取分类树，指定分类则返回指定分类及其子分类，不指定则返回所有分类树\n     *\n     */\n    async gettree(id , field,where={}){\n        id = id||0,field=field||true;\n        /*获取当前分类信息*/\n\n        //if(id){\n        //    console.log(id);\n        //    let ids = id;\n        //    let info = await this.info(ids);\n        //    console.log(info);\n        //    let id   = info.id;\n        //}\n\n        //获取所有分类\n        let map = think.extend({\"status\":{\">\":-1}},where)\n        console.log(map);\n        let list = await this.field(field).where(map).order('sort ASC').select();\n        for(let v of list) {\n            if (!think.isEmpty(v.name)) {\n                v.url = `/${v.name}`\n            } else {\n                v.url = `/${v.id}`\n            }\n        }\n        //console.log(list);\n        list = get_children(list,id);\n        let info = list;\n\n        return info;\n    }\n    /**\n     * 获取分类信息并缓存分类\n     * @param  integer id    分类ID\n     * @param  string  field 要获取的字段名\n     * @return string         分类信息\n     */\n    async get_category(id, field){\n        field=field||null;\n\n        let list = await think.cache(\"sys_category_list\", () => {\n            return this.getallcate();\n        }, {timeout: 365 * 24 * 3600});\n\n        /* 非法分类ID */\n        if(think.isEmpty(id) || !think.isNumberString(id)){\n            return list;\n        }else if (list[id]){\n            if(think.isEmpty(list) || 1 != list[id].status){//不存在分类，或分类被禁用\n                return '';\n            }\n            //// console.log(list);\n            // console.log(list[id]);\n            //console.log(think.isNumber(field));\n            return think.isEmpty(field) ? list[id] : list[id][field];\n        }else {\n            return ''\n        }\n    }\n\n    async getallcate(){\n        let lists = {}\n        let cate=  await this.select()\n        for(let v of cate) {\n            if (!think.isEmpty(v.name)) {\n                v.url = `/${v.name}`\n            } else {\n                v.url = `/${v.id}`\n            }\n            lists[v.id] = v\n        }\n        return lists;\n    }\n    /**\n     * 获取参数的所有父级分类\n     * @param int id 分类id\n     * @param true true 带url\n     * @return array 参数分类和父类的信息集合\n     * @author\n     */\n    async get_parent_category(id,url){\n        let breadcrumb = []\n        while (id!=0&&id!=undefined)\n        {\n            console.log(\"id=========\"+id);\n            let nav = await this.where({'id':id,'status':1}).field(\"id,title,pid,allow_publish,name,mold\").find();\n            console.log(\"nav=========\"+JSON.stringify(nav));\n            if(url){\n                if (!think.isEmpty(nav.name)) {\n                    nav.url = `/${nav.name}`\n                } else {\n                    nav.url = `/${nav.id}`\n                }\n\n            }\n            breadcrumb.push(nav);\n            id = nav.pid;\n\n        }\n        return breadcrumb.reverse()\n    }\n    async get_sub_category(id){\n        let cat = await this.select();\n        let data = sub_cate(cat,id);\n        console.log(\"get_sub_category=========\"+JSON.stringify(data));\n        //console.log(data);\n        let arr=[];\n        for (let v of data){\n            if(think.isString(v)){\n                for(let val of v.split(\",\")){\n                    arr.push(Number(val));\n                };\n            }else {\n                arr.push(v);\n            }\n        }\n\n        return arr;\n    }\n    /**\n     * 验证分类是否允许发布内容\n     * @param id 分类id\n     * @returns {boolean} true-允许发布内容，false-不允许发布内容\n     */\n    async check_category(id){\n        if(think.isObject(id)){\n            id.type = !think.isEmpty(id.type)?id.type:2;\n            let type = await this.get_category(id.category_id,'type');\n            type = type.split(\",\");\n            return in_array(id.type,type);\n        }else {\n            let publish = await this.get_category(id,'allow_publish');\n            return publish ? true : false;\n        }\n    }\n\n    /**\n     * 获取当前分类的文档类型\n     * @param id\n     * @returns {*}文档类型对象\n     */\n    async get_type_bycate(id){\n        id=id||null;\n        if(think.isEmpty(id)){\n            return false\n        }\n        let type_list = think.config(\"document_model_type\");\n        let model_type = await this.where({id:id}).getField(\"type\",1);\n\n        model_type = model_type[0].split(\",\");\n\n        for (let key in type_list){\n            if(!in_array(key,model_type)){\n                delete type_list[key];\n            }\n        }\n        return type_list;\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {*}\n     */\n    async updates(data){\n        if(think.isEmpty(data)){\n            return false;\n        }\n        let res;\n        /* 添加或更新数据 */\n        if(think.isEmpty(data.id)){\n            data.create_time=new Date().getTime();\n            data.model =think.isArray(data.model)? data.model.join(\",\"):data.model;\n            data.model_sub = think.isArray(data.model_sub)?data.model_sub.join(\",\"):data.model_sub;\n            data.type = think.isArray(data.type)?data.type.join(\",\"):data.model;\n            //console.log(data);\n            res =await this.add(data);\n            if(res){\n                //构造权限\n                let priv =[]\n                if(!think.isEmpty(data.priv_roleid)){\n                    if(think.isArray(data.priv_roleid)){\n                        //构造 角色权限\n                        for (let v of data.priv_roleid){\n                            let arr = v.split(\",\")\n                            let obj = {};\n                            obj.catid = res;\n                            obj.siteid=1;\n                            obj.roleid= arr[1];\n                            obj.action = arr[0];\n                            obj.is_admin = 1;\n                            priv.push(obj)\n                        }\n                    }else {\n                        let arr = (data.priv_roleid).split(\",\")\n                        priv.push({ catid:res, siteid: 1, roleid: arr[1], action: arr[0], is_admin: 1 })\n                    }\n\n                }\n                if(!think.isEmpty(data.priv_groupid)){\n                    //构造 用户组权限\n                    if(think.isArray(data.priv_groupid)){\n                        for (let v of data.priv_groupid){\n                            let arr = v.split(\",\")\n                            let obj = {};\n                            obj.catid = res;\n                            obj.siteid=1;\n                            obj.roleid= arr[1];\n                            obj.action = arr[0];\n                            obj.is_admin = 0;\n                            priv.push(obj)\n                        }\n                    }else {\n                        let arr = (data.priv_groupid).split(\",\")\n                        priv.push({ catid:res, siteid: 1, roleid: arr[1], action: arr[0], is_admin: 0 })\n                    }\n\n                }\n\n                if(!think.isEmpty(priv)){\n                    await this.model(\"category_priv\").addMany(priv)\n                }\n            }\n        }else{\n            data.update_time=new Date().getTime();\n            data.model =think.isArray(data.model)? data.model.join(\",\"):data.model;\n            data.model_sub = think.isArray(data.model_sub)?data.model_sub.join(\",\"):data.model_sub;\n            data.type = think.isArray(data.type)?data.type.join(\",\"):\"\";\n            res = await this.update(data);\n            if(res){\n                //构造权限\n                let priv =[]\n                if(!think.isEmpty(data.priv_roleid)){\n                    if(think.isArray(data.priv_roleid)){\n                        //构造 角色权限\n                        for (let v of data.priv_roleid){\n                            let arr = v.split(\",\")\n                            let obj = {};\n                            obj.catid = data.id;\n                            obj.siteid=1;\n                            obj.roleid= arr[1];\n                            obj.action = arr[0];\n                            obj.is_admin = 1;\n                            priv.push(obj)\n                        }\n                    }else {\n                        let arr = (data.priv_roleid).split(\",\")\n                        priv.push({ catid:data.id, siteid: 1, roleid: arr[1], action: arr[0], is_admin: 1 })\n                    }\n\n                }\n                if(!think.isEmpty(data.priv_groupid)){\n                    //构造 用户组权限\n                    if(think.isArray(data.priv_groupid)){\n                        for (let v of data.priv_groupid){\n                            let arr = v.split(\",\")\n                            let obj = {};\n                            obj.catid = data.id;\n                            obj.siteid=1;\n                            obj.roleid= arr[1];\n                            obj.action = arr[0];\n                            obj.is_admin = 0;\n                            priv.push(obj)\n                        }\n                    }else {\n                        let arr = (data.priv_groupid).split(\",\")\n                        priv.push({ catid:data.id, siteid: 1, roleid: arr[1], action: arr[0], is_admin: 0 })\n                    }\n\n                }\n                await this.model(\"category_priv\").delete({where:{catid:data.id}});\n                if(!think.isEmpty(priv)){\n                    await this.model(\"category_priv\").addMany(priv)\n                }\n            }\n        }\n        //清除缓存\n        think.cache(\"sys_category_list\",null); //栏目缓存\n        think.cache(\"all_category\",null); //栏目缓存\n        think.cache(\"all_priv\",null);//栏目权限缓存\n        return res;\n\n    }\n\n\n    // async get_category_byid(cid){\n    //     //let list =\"22\";\n\n    //     let list = await think.cache(\"category_byid\", () => {\n    //         return this.get_colunm_id();\n    //     }, {timeout: 365 * 24 * 3600});\n    //     if(think.isEmpty(map)){\n    //         return list;\n    //     }else {\n    //         return think._.filter(list, map);\n    //     }\n\n    // }\n    // async get_colunm_id(){\n    //     let lists= await this.where({status: 1,pid:145}).field('id,title as name,name as title,pid,allow_publish,isapp,mold,description,icon').order('pid,sort').select();\n    //     for(let v of lists) {\n    //         if (!think.isEmpty(v.title)) {\n    //             v.url = `/${v.title}`\n    //         } else {\n    //             v.url = `/${v.id}`\n    //         }\n    //     }\n    //     // console.log(lists);\n    //     return lists;\n    // }\n    /**\n     *\n     */\n    async get_all_category(map={}){\n        //let list =\"22\";\n        let list = await think.cache(\"all_category\", () => {\n            return this.get_colunm();\n        }, {timeout: 365 * 24 * 3600});\n        if(think.isEmpty(map)){\n            return list;\n        }else {\n            return think._.filter(list, map);\n        }\n\n    }\n\n    async get_colunm(){\n        let lists= await this.where({status: 1}).field('id,title as name,name as title,pid,allow_publish,isapp,mold,description,icon').order('pid,sort').select();\n        for(let v of lists) {\n            if (!think.isEmpty(v.title)) {\n                v.url = `/${v.title}`\n            } else {\n                v.url = `/${v.id}`\n            }\n        }\n        // console.log(lists);\n        return lists;\n    }\n    //获取栏目分组\n    async get_groups(cid){\n        let group;\n        let groups = await this.where({id:cid}).getField(\"groups\",true);\n        if(!think.isEmpty(groups)){\n            let cate = await get_cate(cid);\n            if(groups.search(/\\r\\n/ig)>-1){\n                groups=groups.split(\"\\r\\n\");\n                let arr = []\n                groups.forEach(n =>{\n                    let obj ={}\n                    n=n.split(\":\");\n                    obj.url = cate.url+\"/\"+n[0]\n                    obj.name=n[1];\n                    obj.id = Number(n[0]);\n                    arr.push(obj);\n                })\n\n                group = arr;\n            }\n        }\n    return group;\n    }\n\n}"
    ]
}