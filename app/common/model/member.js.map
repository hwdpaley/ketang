{
    "version": 3,
    "sources": [
        "../../../src/common/model/member.js"
    ],
    "names": [
        "signin",
        "username",
        "password",
        "ip",
        "type",
        "login",
        "map",
        "email",
        "mobile",
        "id",
        "_logic",
        "where",
        "find",
        "user",
        "think",
        "isEmpty",
        "status",
        "is_admin",
        "autoLogin",
        "get_vip",
        "isVip",
        "userInfo",
        "last_login_time",
        "real_name",
        "groupid",
        "data",
        "Date",
        "valueOf",
        "_ip2int",
        "update",
        "use",
        "increment",
        "get_nickname",
        "uid",
        "name",
        "field",
        "info",
        "get_realname",
        "now",
        "getTime",
        "vip",
        "overduedate",
        "model",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/member.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n    /**\n     * 用户登录认证\n     * @param  string  $username 用户名\n     * @param  string  $password 用户密码\n     * @param  integer $type     用户名类型 （1-用户名，2-邮箱，3-手机，4-UID）\n     * @param  {int} login 登陆方式 0-前台登陆 ， 1-后台登陆\n     * @return integer           登录成功-用户ID，登录失败-错误编号\n     */\n    async signin(username, password, ip, type=1,login=0) {\n        let map = {};\n        switch (type) {\n            case 1:\n                map.username = username;\n                break;\n            case 2:\n                map.email = username;\n                break;\n            case 3:\n                map.mobile = username;\n                break;\n            case 4:\n                map.id = username;\n                break;\n            case 5:\n                map={\n                    username:username,\n                    email:username,\n                    mobile:username,\n                    _logic: \"OR\"\n                }\n                break;\n            default:\n                return 0; //参数错误\n        }\n        let user = await this.where(map).find();\n        if (!think.isEmpty(user) && 1 == user.status) {\n            //验证是否是管理用户\n            if(login==1){\n                if (0 == user.is_admin) {\n                    return -3;//不是管理用户，不能登陆后台\n                }\n            }\n            /* 验证用户密码 */\n            if (password === user.password) {\n                await this.autoLogin(user, ip);//更新用户登录信息，自动登陆\n                /* 记录登录SESSION和COOKIES */\n                let isVip=await this.get_vip(user.id);\n                let userInfo = {\n                    'uid': user.id,\n                    'username': user.username,\n                    'last_login_time': user.last_login_time,\n                    'real_name':user.real_name,\n                    'isVip':isVip,\n                    'groupid':user.groupid\n                };\n\n                return userInfo; //登录成功，返回用户信息\n            } else {\n                return -2; //密码错误\n            }\n\n\n        } else {\n            return -1; //用户不存在或被禁用\n        }\n    }\n\n    /**\n     * 自动登录用户\n     * @param  integer $user 用户信息数组\n     */\n    async autoLogin(user, ip) {\n        /* 更新登录信息 */\n        let data = {\n            'last_login_time': new Date().valueOf(),\n            'last_login_ip': _ip2int(ip),\n        };\n        let use = await this.where({id: user.id}).update(data);\n        await this.where({id: user.id}).increment('login');\n\n    }\n\n    /**\n     * 根据用户ID获取用户昵称\n     * @param  integer $uid 用户ID\n     * @return string       用户昵称\n     */\n\n    async get_nickname(uid) {\n        uid = uid || 0;\n        //TODO 缓存处理后续\n        let name;\n        let info = await this.field(\"username\").find(uid);\n        name = info.username;\n        return name;\n\n    }\n    async get_realname(uid) {\n        uid = uid || 0;\n        //TODO 缓存处理后续\n        let name;\n        let info = await this.field(\"real_name\").find(uid);\n        name = info.real_name;\n        return name;\n\n    }\n    async get_vip(uid) {\n        uid = uid || 0;\n        //TODO 缓存处理后续\n        let name=0;\n        let info = await this.field([\"vip\",\"overduedate\"]).find(uid);\n        let now=new Date().getTime();\n        if(info.vip==1 && info.overduedate>now){\n            name=1;\n        } ;\n        return name;\n\n    }\n}"
    ]
}