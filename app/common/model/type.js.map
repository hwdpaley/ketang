{
    "version": 3,
    "sources": [
        "../../../src/common/model/type.js"
    ],
    "names": [
        "checkTableExist",
        "typeid",
        "table_name",
        "think",
        "parseConfig",
        "config",
        "prefix",
        "model",
        "query",
        "res",
        "length",
        "addField",
        "_filed",
        "sql",
        "id",
        "table_exist",
        "datarr",
        "v",
        "execute",
        "getfieldsinfo",
        "optionid",
        "fieldinfo",
        "name",
        "result",
        "isEmpty",
        "console",
        "log",
        "find",
        "filed",
        "data",
        "type",
        "identifier",
        "base"
    ],
    "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOI;;;;;;qBAMMA,e;+FAAgBC,M;;;;;;AAClB,iCAAKC,UAAL,GAAkBC,MAAMC,WAAN,CAAkB,IAAlB,EAAwBD,MAAME,MAAN,CAAa,IAAb,CAAxB,EAA4CC,MAA5C,GAAqD,kBAArD,GAAwEL,MAA1F;AACA;;mCACgBE,MAAMI,KAAN,CAAY,OAAZ,EAAqBJ,MAAME,MAAN,CAAa,IAAb,CAArB,EAAyCG,KAAzC,yBAAoE,KAAKN,UAAzE,Q;;;AAAZO,+B;6DACGA,IAAIC,M;;;;;;;;;;;;;;;;;AAGf;;;;;;;;qBAMMC,Q;iGAASC,M;;;;;;;AACPC,+B;AACJ;;;mCACwB,KAAKb,eAAL,CAAqBY,OAAOE,EAA5B,C;;;AAApBC,uC;wCAESH,OAAOI,M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAZC,6B;;gCACAF,W;;;;;AAEAF,mEAAsC,KAAKX,UAA3C;AASA;;mCACgBC,MAAMI,KAAN,CAAY,OAAZ,EAAqBJ,MAAME,MAAN,CAAa,IAAb,CAArB,EAAyCa,OAAzC,CAAiDL,GAAjD,C;;;AAAZJ,+B;;;;mCAGc,KAAKU,aAAL,CAAmBF,EAAEG,QAArB,C;;;AAAlBC,qC;;mCAEelB,MAAMI,KAAN,CAAY,OAAZ,EAAqBJ,MAAME,MAAN,CAAa,IAAb,CAArB,EAAyCG,KAAzC,yBAAsE,KAAKN,UAA3E,iBAAiGmB,UAAUC,IAA3G,Q;;;AAAfC,kC;;iCACDpB,MAAMqB,OAAN,CAAcD,MAAd,C;;;;;AAAuB;AACtBV,oDAAuB,KAAKX,UAA5B,UAA4CmB,UAAUR,GAAtD;;mCACgBV,MAAMI,KAAN,CAAY,OAAZ,EAAqBJ,MAAME,MAAN,CAAa,IAAb,CAArB,EAAyCa,OAAzC,CAAiDL,GAAjD,C;;;AAAZJ,gC;;AACJgB,oCAAQC,GAAR,CAAYb,GAAZ;;;;;;AAKJY,oCAAQC,GAAR,CAAYH,MAAZ;;;;;;;;;;;;;;;;;;;;;qBAyDHJ,a;iGAAcL,E;;;;;;;mCACG,KAAKP,KAAL,CAAW,YAAX,EAAyBoB,IAAzB,CAA8Bb,EAA9B,C;;;AAAdc,iC;;AACJH,oCAAQC,GAAR,CAAYE,KAAZ;AACGC,gC,GAAK,E;2CACFD,MAAME,I;8DACL,Q,wBACA,O,wBAIA,M,yBACA,U,yBACA,U,yBACA,U,yBACA,O,yBACA,O,yBACA,K,yBAIA,O,yBAIA,Q;;;;AAjBDD,iCAAKhB,GAAL,oBAA2Be,MAAMG,UAAjC;;;;;;AAWAF,iCAAKhB,GAAL,oBAA2Be,MAAMG,UAAjC;;;;AAGAF,iCAAKhB,GAAL,oBAA2Be,MAAMG,UAAjC,+DAAqGH,MAAMG,UAA3G,YAA8HH,MAAMG,UAApI;;;;;AAIAF,iCAAKhB,GAAL,oBAA2Be,MAAMG,UAAjC,sDAA4FH,MAAMG,UAAlG,YAAqHH,MAAMG,UAA3H;;;;;AAKRF,iCAAKP,IAAL,GAAUM,MAAMG,UAAhB;8DACQF,I;;;;;;;;;;;;;;;;;;EA/Ie1B,MAAMI,KAAN,CAAYyB,I",
    "file": "../../../src/common/model/type.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n\n\n\n    /**\n     * 检查当前表是否存在\n     * @param Number typeid 分类信息id\n     * @return Number 是否存在\n     * @author\n     */\n    async checkTableExist(typeid) {\n        this.table_name = think.parseConfig(true, think.config(\"db\")).prefix + 'type_optionvalue'+typeid;\n        //console.log(this.table_name);\n        let res = await think.model('mysql', think.config(\"db\")).query(`SHOW TABLES LIKE '${this.table_name}'`)\n        return res.length;\n    }\n\n    /**\n     * 新建表字段\n     * @param Array field 需要新建的字段属性\n     * @return Boolean  true 成功 ， false 失败\n     * @author\n     */\n    async addField(_filed) {\n        let sql;\n        //检查表是否存在\n        let table_exist = await this.checkTableExist(_filed.id);\n        //console.log(this.table_name);\n        for(let v of _filed.datarr){\n            if(!table_exist){\n\n                sql = `CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\`(\n                 \\`tid\\` int(10) UNSIGNED NOT NULL DEFAULT '0',\n                 \\`fid\\` int(10) UNSIGNED NOT NULL DEFAULT '0',\n                 \\`dateline\\` int(10) UNSIGNED NOT NULL DEFAULT '0',\n                 \\`expiration\\` int(10) UNSIGNED NOT NULL DEFAULT '0',\n                 KEY \\`fid\\` (\\`fid\\`),\n                 KEY \\`dateline\\` (\\`dateline\\`)\n                 )\n                 ENGINE=InnoDB DEFAULT CHARSET=utf8`\n                //console.log(sql);\n                let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n                //console.log(res);\n            }\n            let fieldinfo = await this.getfieldsinfo(v.optionid);\n            //console.log(v.optionid);\n            let result = await think.model('mysql', think.config(\"db\")).query(`show columns from \\`${this.table_name}\\` like '${fieldinfo.name}'`);\n            if(think.isEmpty(result)){//添加字段\n                sql = `ALTER TABLE \\`${this.table_name}\\` ${fieldinfo.sql};`\n                let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n                console.log(sql);\n            }else {//更新字段 TODO\n\n            }\n\n            console.log(result);\n        }\n        //return false;\n        // var def;\n        // var sql;\n        // //获取默认值\n        // var value = _filed.value;\n        // if (value === '') {\n        //     def = '';\n        // } else if (think.isNumberString(value)) {\n        //     def = ' DEFAULT ' + value;\n        // } else if (think.isString(value)) {\n        //     def = ' DEFAULT \\'' + value + '\\'';\n        // } else {\n        //     def = '';\n        // }\n        //\n        // if (table_exist) {\n        //     let fie = _filed;\n        //     sql = `ALTER TABLE \\`${this.table_name}\\` ADD COLUMN \\`${fie.name}\\`  ${fie.field}  ${def} COMMENT \\'${fie.title}\\';`\n        //     sql = this.parseSql(sql);\n        // } else {//新建表时是否默认新增‘id主键’字段\n        //\n        //     let model_info = await this.model('model').where({id: _filed.model_id}).field('engine_type,need_pk').find();\n        //     if (model_info.need_pk) {\n        //         let fie = _filed;\n        //         sql = ` CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n        //         \\`id\\`  int(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT \\'主键\\' ,\n        //         \\`${fie.name}\\`  ${fie.field} ${def} COMMENT \\'${fie.title}\\' ,\n        //         PRIMARY KEY (\\`id\\`)\n        //         )\n        //         ENGINE=${model_info.engine_type}\n        //         DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n        //         CHECKSUM=0\n        //         ROW_FORMAT=DYNAMIC\n        //         DELAY_KEY_WRITE=0\n        //         ;`\n        //         sql = this.parseSql(sql);\n        //     } else {\n        //         let fie = _filed;\n        //         sql = `  CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n        //         \\`${fie.name}\\`  ${fie.field} ${def} COMMENT \\'${fie.title}\\'\n        //         )\n        //         ENGINE=${model_info.engine_type}\n        //         DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n        //         CHECKSUM=0\n        //         ROW_FORMAT=DYNAMIC\n        //         DELAY_KEY_WRITE=0\n        //         ;`\n        //         sql = this.parseSql(sql);\n        //     }\n        // }\n        // let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n        //\n        // return res == 0;\n\n    }\n   async getfieldsinfo(id){\n        let filed = await this.model(\"typeoption\").find(id);\n        console.log(filed);\n       let data={};\n      switch (filed.type){\n          case \"number\":\n          case \"range\":\n              data.sql = `ADD COLUMN \\`${filed.identifier}\\` int(10) UNSIGNED NOT NULL DEFAULT '0'`;\n\n              break;\n          case \"text\":\n          case \"textarea\":\n          case \"checkbox\":\n          case \"calendar\":\n          case \"email\":\n          case \"image\":\n          case \"url\":\n\n              data.sql = `ADD COLUMN \\`${filed.identifier}\\` mediumtext `;\n              break;\n          case \"radio\":\n              data.sql = `ADD COLUMN \\`${filed.identifier}\\` smallint(6) UNSIGNED NOT NULL DEFAULT '0',ADD KEY \\`${filed.identifier}\\` (\\`${filed.identifier}\\`)`;\n\n              break;\n          case \"select\":\n              data.sql = `ADD COLUMN \\`${filed.identifier}\\` varchar(50) NOT NULL DEFAULT '0',ADD KEY \\`${filed.identifier}\\` (\\`${filed.identifier}\\`)`;\n\n              break;\n\n      }\n      data.name=filed.identifier;\n       return data;\n   }\n}"
    ]
}