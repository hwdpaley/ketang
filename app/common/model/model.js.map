{
    "version": 3,
    "sources": [
        "../../../src/common/model/model.js"
    ],
    "names": [
        "del",
        "id",
        "table_name",
        "field",
        "find",
        "model",
        "console",
        "log",
        "extend",
        "think",
        "parseConfig",
        "config",
        "prefix",
        "name",
        "toLowerCase",
        "delete",
        "sql",
        "query",
        "istable",
        "isEmpty",
        "execute",
        "res",
        "checkName",
        "map",
        "where",
        "get_table_name",
        "model_id",
        "info",
        "table",
        "replace",
        "get_document_model",
        "cache",
        "_get_document_model",
        "timeout",
        "list",
        "lists",
        "select",
        "v",
        "get_model",
        "_get_model",
        "_",
        "Number",
        "arr",
        "filter",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/model.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n\n\n    /**\n     * 删除数据\n     */\n    async del(id){\n        let table_name;\n        let model =await this.field('name,extend').find(id);\n        console.log(model);\n        if(model.extend == 0){\n             table_name = think.parseConfig(true, think.config(\"db\")).prefix+model.name.toLowerCase();\n        }else if(model.extend == 1){\n            table_name = think.parseConfig(true, think.config(\"db\")).prefix+'document_'+model.name.toLowerCase();\n        }else {\n            //think.fail(\"只支持删除文档模型和独立模型\");\n            return false;\n        }\n        //console.log(table_name);\n        //删除属性数据\n       // this.model('attribute').where({model_id:id}).delete();\n        //删除模型数据\n        this.delete(id);\n        let sql =`SHOW TABLES LIKE '${table_name}'`;\n        let istable =  await think.model('mysql',think.config('db')).query(sql);\n        if(!think.isEmpty(istable)){\n            sql = `DROP TABLE ${table_name}`;\n            let res = await think.model('mysql', think.config('db')).execute(sql);\n        }\n\n        return true;\n    }\n    /**\n     * 检查是否有相同的表名\n     * @param name 要验证的字段名称\n     * @param model_id 要验证的字段的模型id\n     * @author\n     */\n    async checkName(name,id){\n        let map = {'name':name};\n        if(!think.isEmpty(id)){\n            map.id = [\"!=\", id];\n        }\n        let res = await this.where(map).find();\n        return think.isEmpty(res);\n    }\n    /**\n     * 获取表名（不含表前缀）\n     * @param string $model_id\n     * @return string 表名\n     *\n     */\n    async get_table_name(model_id,extend=false){\n        model_id=model_id||null;\n        if(think.isEmpty(model_id)){\n            return false;\n        }\n       let name;\n        let info = await this.where({id:model_id}).find();\n        if(info.extend != 0){\n            name = await this.where({id:info.extend}).find();\n            name = name.name+'_'\n        }\n        name += info.name;\n        if(extend){\n            return{\n                table:name.replace(/undefined/, \"\"),\n                extend:info.extend\n            }\n        }else {\n            return name.replace(/undefined/, \"\");\n        }\n\n    }\n    /**\n     * 获取文档模型信息并缓存\n     * @param  integer id    模型ID\n     * @param  string  field 模型字段\n     * @return array\n     */\n\n    async get_document_model(id, field){\n        id=id||null,field=field||null;\n        /* 非法分类ID */\n        //if(!(think.isNumberString(id) || think.isNumber(id))){\n        //    return '555';\n        //}\n       //console.log(333333333)\n        /* 读取缓存数据 */\n        let list = await think.cache(\"get_document_model\", () => {\n            return this._get_document_model();\n        }, {timeout: 365 * 24 * 3600});\n\n\n        /* 根据条件返回数据 */\n        if(think.isEmpty(id)){\n            return list;\n        } else if(think.isEmpty(field)){\n            return list[id];\n        } else {\n            try{\n                return list[id][field];\n            }catch(err) {\n             return false;\n            }\n\n        }\n    }\n    /* 获取模型名称 */\n    async _get_document_model(){\n        let lists = {}\n        let map   = {'status' : 1, 'extend': 1};\n        let model = await this.where(map).select();\n        for(let v of model){\n            lists[v.id] = v\n        }\n        return lists;\n    }\n    //获取模型信息并缓存\n   async get_model(id=null,field=null,extend={}){\n        /* 读取缓存数据 */\n        let list = await think.cache(\"get_model\", () => {\n            return this._get_model();\n        }, {timeout: 365 * 24 * 3600});\n       if(!think.isEmpty(id)&&think.isEmpty(field)){\n          return think._.find(list, {id: Number(id)})\n       }\n       if(!think.isEmpty(id)&&!think.isEmpty(field)){\n           let arr = think._.find(list, {id: Number(id)});\n           //console.log(arr);\n           if(!think.isEmpty(arr)){\n               return arr[field]\n           }else {\n               return \"\";\n           }\n\n       }\n       if(think.isEmpty(id)&&think.isEmpty(field)&&(!think.isEmpty(extend))){\n\n           return think._.filter(list, extend)\n       }\n\n   }\n    //获取模型信息\n    /* 获取模型名称 */\n    async _get_model(){\n        let map   = {'status' : 1,'id':[\"!=\",1]};\n        return await this.where(map).select();\n    }\n}"
    ]
}