{
    "version": 3,
    "sources": [
        "../../../src/common/model/fare.js"
    ],
    "names": [
        "getfare",
        "cart_godds",
        "addr_id",
        "uid",
        "real_freight",
        "fare",
        "address",
        "think",
        "isEmpty",
        "model",
        "find",
        "where",
        "is_default",
        "user_id",
        "warr",
        "val",
        "push",
        "weight",
        "qty",
        "goods_weight",
        "eval",
        "join",
        "area",
        "province",
        "city",
        "county",
        "zoning",
        "JSON",
        "parse",
        "first_price",
        "Math",
        "max",
        "ceil",
        "first_weight",
        "second_weight",
        "second_price",
        "in_array",
        "Number",
        "f_price",
        "f_weight",
        "s_weight",
        "s_price",
        "base"
    ],
    "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAII;;;;;;;;;;;;;qBAaMA,O;+FAAQC,U,EAAWC,O,EAAQC,G;;;;;;;AACzBC,wC;AACAC,gC;AACAC,mC;;gCACAC,MAAMC,OAAN,CAAcN,OAAd,C;;;;;;mCACe,KAAKO,KAAL,CAAW,SAAX,EAAsBC,IAAtB,CAA2BR,OAA3B,C;;;AAAfI,mC;;;;;;mCAEe,KAAKG,KAAL,CAAW,SAAX,EAAsBE,KAAtB,CAA4B,EAACC,YAAW,CAAZ,EAAcC,SAAQV,GAAtB,EAA5B,EAAwDO,IAAxD,E;;;AAAfJ,mC;;;AAEJ;AACIQ,gC,GAAO,E;wCACIb,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAPc,gC;;AACJD,iCAAKE,IAAL,CAAUD,KAAIE,MAAJ,GAAWF,KAAIG,GAAzB;;;;;;;AAEAC,wC,GAAeC,KAAKN,KAAKO,IAAL,CAAU,GAAV,CAAL,C;AACnB;;AACIC,gC,GAAOhB,QAAQiB,QAAR,GAAiB,GAAjB,GAAqBjB,QAAQkB,IAA7B,GAAkC,GAAlC,GAAsClB,QAAQmB,M;;mCACxC,KAAKd,KAAL,CAAW,EAACC,YAAW,CAAZ,EAAX,EAA2BF,IAA3B,E;;;AAAbL,gC;AAGAqB,kC,GAASC,KAAKC,KAAL,CAAWvB,KAAKqB,MAAhB,C;;kCACVnB,MAAMC,OAAN,CAAckB,MAAd,KAAuBnB,MAAMC,OAAN,CAAcF,OAAd,C;;;;;AACtBF,2CAAcC,KAAKwB,WAAL,GAAmBC,KAAKC,GAAL,CAASD,KAAKE,IAAL,CAAU,CAACb,eAAed,KAAK4B,YAArB,IAAqC5B,KAAK6B,aAApD,CAAT,EAA6E,CAA7E,IAAkF7B,KAAK8B,YAAxH;;;;;;yCAIeT,M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAPX,+B;;AACJ;AACA;AACA,gCAAGqB,SAASd,IAAT,EAAcK,KAAKC,KAAL,CAAWb,IAAIO,IAAf,CAAd,CAAH,EAAuC;AACnC;AACAlB,+CAAciC,OAAOtB,IAAIuB,OAAX,IAAoBR,KAAKC,GAAL,CAASD,KAAKE,IAAL,CAAU,CAACb,eAAekB,OAAOtB,IAAIwB,QAAX,CAAhB,IAAwCF,OAAOtB,IAAIyB,QAAX,CAAlD,CAAT,EAAkF,CAAlF,IAAuFH,OAAOtB,IAAI0B,OAAX,CAAzH;AACH,6BAHD,MAGM;AACFrC,+CAAcC,KAAKwB,WAAL,GAAmBC,KAAKC,GAAL,CAASD,KAAKE,IAAL,CAAU,CAACb,eAAed,KAAK4B,YAArB,IAAqC5B,KAAK6B,aAApD,CAAT,EAA6E,CAA7E,IAAkF7B,KAAK8B,YAAxH;AACH;;;;;;;6DAIN/B,Y;;;;;;;;;;;;;;;;;;EApDkBG,MAAME,KAAN,CAAYiC,I",
    "file": "../../../src/common/model/fare.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n    /**\n     * 获取运费\n     * @param {obj} cart_godds 购物车内的宝贝列表\n     * @param {number} addr_id null-默认地址，number-配送地址id\n     * @param {int} uid 用户id\n     * 运费计算\n     * 1、如果店铺只使用统一运费，那么顾客下单计算时按最低运费收取。\n     * 2、如果店铺只使用一种运费模板规则，那么顾客下单计算时均按此规则收取运费。\n     * 3、如果店铺使用了不同的运费模板规则，那么顾客下单时各运费模板规则先单独计算运费再叠加。\n     * 4、如果店铺同时使用统一运费和不同的运费模板规则，那么顾客下单时统一运费单独计算运费，不同的运费模板\n     *TODO\n     * @returns {*}\n     */\n    async getfare(cart_godds,addr_id,uid){\n        let real_freight;\n        let fare;\n        let address;\n        if(!think.isEmpty(addr_id)){\n            address =await this.model(\"address\").find(addr_id);\n        }else {\n            address =await this.model(\"address\").where({is_default:1,user_id:uid}).find();\n        }\n        //console.log(address);\n        let warr = [];\n        for(let val of cart_godds){\n            warr.push(val.weight*val.qty);\n        }\n        let goods_weight = eval(warr.join('+'));\n        //console.log(goods_weight);\n        let area = address.province+\"_\"+address.city+\"_\"+address.county;\n            fare = await this.where({is_default:1}).find();\n\n\n        let zoning = JSON.parse(fare.zoning)\n        if(think.isEmpty(zoning)||think.isEmpty(address)){\n            real_freight =fare.first_price + Math.max(Math.ceil((goods_weight - fare.first_weight) / fare.second_weight), 0) * fare.second_price;\n\n        }else{\n\n            for(let val of zoning){\n                //console.log(area)\n                // console.log(val.area);\n                if(in_array(area,JSON.parse(val.area))){\n                    //console.log(Number(val.f_weight)+Number(val.s_weight));\n                    real_freight =Number(val.f_price)+Math.max(Math.ceil((goods_weight - Number(val.f_weight)) / Number(val.s_weight)), 0) * Number(val.s_price);\n                }else {\n                    real_freight =fare.first_price + Math.max(Math.ceil((goods_weight - fare.first_weight) / fare.second_weight), 0) * fare.second_price;\n                }\n            }\n            //real_freight = 8;\n        }\n    return real_freight;\n}\n}"
    ]
}