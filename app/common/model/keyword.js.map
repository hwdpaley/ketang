{
    "version": 3,
    "sources": [
        "../../../src/common/model/keyword.js"
    ],
    "names": [
        "addkey",
        "keyname",
        "id",
        "uid",
        "mod_id",
        "mod_type",
        "think",
        "isEmpty",
        "keywrods",
        "isArray",
        "split",
        "v",
        "thenAdd",
        "discuss_count_update",
        "Date",
        "getTime",
        "videonum",
        "add",
        "type",
        "where",
        "update",
        "increment",
        "model",
        "tagid",
        "docid",
        "add_time",
        "delkey",
        "getField",
        "delete",
        "decrement",
        "updatekey",
        "keyword",
        "topicid",
        "newkn",
        "okn",
        "nkn",
        "k",
        "_",
        "includes",
        "push",
        "dkn",
        "xor",
        "did",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/keyword.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n\n    //添加话题\n    /**\n     * 添加话题\n     * @param keyname \"话题1,话题2.话题3\"\n     * @param id  \"主题id\"\n     * @param uid \"用户id\"\n     * @param mod_id \"模型id\"\n     * @param mod_type \"模型类型 0独立模型，1系统模型\"\n     */\n   async addkey(keyname,id,uid,mod_id,mod_type=1){\n        //添加关键词\n        if(!think.isEmpty(keyname)){\n            let keywrods;\n            if(!think.isArray(keyname)){\n                 keywrods = keyname.split(\",\");\n            }else {\n                keywrods = keyname;\n            }\n            for (let v of keywrods){\n                let add = await this.thenAdd({keyname:v,discuss_count_update:new Date().getTime(),videonum:1}, {keyname:v});\n                if(add.type=='exist'){\n                    await this.where({id:add.id}).update({discuss_count_update:new Date().getTime()});\n                    await this.where({id:add.id}).increment(\"videonum\", 1);\n                }\n                await this.model(\"keyword_data\").add({tagid:add.id,docid:id,add_time:new Date().getTime(),uid:uid,mod_type:mod_type,mod_id:mod_id});\n            }\n\n        }\n    }\n\n    /**\n     * 删除话题\n     */\n    async delkey(docid,mod_id){\n      let tagid = await this.model(\"keyword_data\").where({docid:docid,mod_id:mod_id}).getField(\"tagid\",true);\n      if(tagid){\n          await this.model(\"keyword_data\").where({docid:docid,mod_id:mod_id}).delete();\n          await this.where({id:tagid}).decrement(\"videonum\");\n      }\n    }\n    /**\n     * 添加话题\n     * @param keyname \"话题1,话题2.话题3\"\n     * @param id  \"主题id\"\n     * @param uid \"用户id\"\n     * @param mod_id \"模型id\"\n     * @param mod_type \"模型类型 0独立模型，1系统模型\"\n     */\n    async updatekey(keyname,id,uid,mod_id,mod_type=0){\n        let where = {};\n        where.docid=id;\n        where.mod_type=mod_type;\n        where.mod_id=mod_id;\n        let keyword;\n        let topicid = await this.model(\"keyword_data\").where(where).getField(\"tagid\");\n        if(!think.isEmpty(topicid)){\n            keyword = await this.where({id:[\"IN\",topicid]}).getField(\"keyname\");\n\n        }\n        let newkn =keyname;//新关键词\n        if(!think.isEmpty(newkn)){\n            newkn = newkn.split(\",\");\n        }else {\n            newkn = [];\n        }\n\n        //还存在的话题\n        let okn=[];\n        //新的话题\n        let nkn=[];\n        for(let k of newkn){\n            if(think._.includes(keyword, k)){\n                okn.push(k)\n            }else {\n                nkn.push(k)\n            }\n        }\n        //要删除的话题\n        let dkn = think._.xor(okn,keyword);\n        // console.log(\"更新--\"+okn);\n        // console.log(\"添加--\"+nkn);\n        // console.log(\"删除--\"+dkn);\n\n        if(!think.isEmpty(dkn)){\n            let did = await this.where({keyname:[\"IN\",dkn]}).getField(\"id\");\n            where.tagid=[\"in\",did]\n            await this.model(\"keyword_data\").where(where).delete();\n            await this.where({keyname:[\"IN\",dkn]}).decrement(\"videonum\",1)\n        }\n        await this.addkey(nkn,id,uid,mod_id,mod_type);\n    }\n}"
    ]
}