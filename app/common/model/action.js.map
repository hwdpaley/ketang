{
    "version": 3,
    "sources": [
        "../../../src/common/model/action.js"
    ],
    "names": [
        "get_action",
        "id",
        "field",
        "think",
        "isEmpty",
        "isNumberString",
        "list",
        "map",
        "where",
        "find",
        "log",
        "action",
        "model",
        "record_id",
        "user_id",
        "ip",
        "url",
        "session",
        "user",
        "name",
        "action_info",
        "status",
        "data",
        "action_id",
        "action_ip",
        "_ip2int",
        "create_time",
        "Date",
        "valueOf",
        "remark",
        "match",
        "record",
        "time",
        "replace",
        "val",
        "param",
        "split",
        "call_user_func",
        "push",
        "str_replace",
        "add",
        "rule",
        "parse_action",
        "rules",
        "execute_action",
        "res",
        "self",
        "info",
        "ret",
        "obj",
        "v",
        "console",
        "cycle",
        "max",
        "count",
        "exec_count",
        "table",
        "step",
        "parseInt",
        "condition",
        "increment",
        "Math",
        "abs",
        "decrement",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/action.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n    /**\n     * 获取行为数据\n     * @param string id 行为id\n     * @param string field 需要获取的字段\n     * @author arterli <arterli@qq.com>\n     */\n    async get_action(id, field){\n        id=id||null,field=field||null;\n        if(think.isEmpty(id) && !think.isNumberString(id)){\n            return false;\n        }\n       let list = {}\n            let map = {'status':['>', -1], 'id':id};\n            list[id] = await this.where(map).field(true).find();\n\n        return think.isEmpty(field) ? list[id] : list[id][field];\n    }\n\n    /**\n     * 记录行为日志，并执行该行为的规则\n     * await this.model(\"action\").log(\"action\",\"model\",\"record_id\",\"user_id\",this.ip(),this.http.url)\n     * @param string action 行为标识\n     * @param string model 触发行为的模型名\n     * @param int record_id 触发行为的记录id\n     * @param int user_id 执行行为的用户id\n     * @return boolean\n     * @author arterli <arterli@qq.com>\n     */\n   async log(action, model, record_id, user_id, ip , url){\n    //action=action||null,model=model||null,record_id=record_id||null,user_id=user_id||null;\n        //参数检查\n        if(think.isEmpty(action) || think.isEmpty(model) || think.isEmpty(record_id)){\n            return '参数不能为空';\n        }\n\n        if(think.isEmpty(user_id)){\n            let user = await this.session('userInfo');\n            let id = user.id;\n            user_id = id;\n        }\n\n        //查询行为，判断是否执行\n\n        let action_info = await this.where({name:action}).find();\n        if(action_info.status != 1){\n            return '该行为被禁用';\n        }\n\n        //插入行为日志\n\n        let data = {\n            action_id:action_info.id,\n            user_id:user_id,\n            action_ip:_ip2int(ip),\n            model:model,\n            record_id:record_id,\n            create_time:new Date().valueOf()\n        }\n        data.remark = '';\n        //解析日志规则，生成日志备注；\n       if(!think.isEmpty(action_info.log)){\n           let match = action_info.log.match(/\\[(\\S+?)\\]/g);\n           if(!think.isEmpty(match)){\n               let log={\n                   user :user_id,\n                   record:record_id,\n                   model:model,\n                   time: new Date().valueOf(),\n                   data:{\n                       user :user_id,\n                       record:record_id,\n                       model:model,\n                       time: new Date().valueOf(),\n                   }\n               }\n\n               let replace = []\n               for(let val of match){\n                   val= val.replace(/(^\\[)|(\\]$)/g, \"\");\n                   let param = val.split('|');\n                   //console.log(param);\n                   if(!think.isEmpty(param[1])){\n\n                      if(param[0]=='user'){\n                          replace.push(await call_user_func(param[1],log[param[0]]));\n                      }else {\n                          replace.push(call_user_func(param[1],log[param[0]]));\n                      }\n\n                   }else {\n                       replace.push(log[param[0]])\n                   }\n               }\n\n               data.remark= str_replace(match,replace,action_info.log);\n               //console.log(data.remark)\n\n           }else {\n               data.remark = action_info.log;\n           }\n       }else {\n           //未定义日志规则,记录操作URL\n           data.remark = '操作url:'+url\n\n       }\n        //console.log(data);\n       await this.model(\"action_log\").add(data);\n\n        if(!think.isEmpty(action_info.rule)){\n            let rules = await this.parse_action(action,user_id);\n           // console.log(rules);\n            let res = await this.execute_action(rules,action_info.id,user_id);\n        }\n    }\n\n    /**\n     * 解析行为规则\n     * 规则定义  table:table|field:field|condition:condition|rule:rule[|cycle:cycle|max:max][;......]\n     * 规则字段解释：table->要操作的数据表，不需要加表前缀；\n     *              field->要操作的字段；\n     *              condition->操作的条件，目前支持字符串，默认变量 ${self} 为执行行为的用户\n     *              rule->对字段进行的具体操作，目前支持加或者减，如：10，-10\n     *              cycle->执行周期，单位（小时），表示cycle小时内最多执行max次\n     *              max->单个周期内的最大执行次数（cycle和max必须同时定义，否则无效）\n     * 单个行为后可加 ； 连接其他规则\n     * @param string action 行为id或者name\n     * @param int self 替换规则里的变量为执行用户的id\n     * @return boolean|array: false解析出错 ， 成功返回规则数组\n     * @author arterli <arterli@qq.com>\n     */\n\n    async parse_action(action,self){\n        if(think.isEmpty(action)){\n            return false;\n        }\n        //参数支持id或者name\n        let map;\n        if(think.isNumberString(action)){\n            map = {\"id\":action};\n        }else {\n            map = {\"name\":action};\n        }\n        //查询行为信息\n        let info = await this.where(map).find();\n        if(!info || info.status != 1){\n            return false;\n        }\n\n        //解析规则:table:table|field:field|condition:condition|rule:rule[|cycle:cycle|max:max][;......]\n\n        let rules = info.rule;\n        rules = str_replace('${self}',self,rules);\n        rules = rules.split(\";\");\n         //console.log(rules);\n        let ret = [];\n        for (let val of rules){\n            if(val){\n                let obj = {};\n               let rule = val.split(\"|\");\n                for(let v of rule){\n                    let field = think.isEmpty(v)?[]:v.split(\":\");\n                   console.log(field);\n                    if(!think.isEmpty(field)){\n                        obj[field[0]]=field[1];\n                    }\n                }\n                ret.push(obj);\n            }\n\n        }\n        return ret;\n    }\n\n    /**\n     * 执行行为\n     * @param array $rules 解析后的规则数组\n     * @param int $action_id 行为id\n     * @param array $user_id 执行的用户id\n     * @return boolean false 失败 ， true 成功\n     * @author arterli <arterli@qq.com>\n     */\n    async execute_action(rules, action_id, user_id){\n       // console.log(rules + action_id + user_id);\n\n        if(!rules || think.isEmpty(action_id) || think.isEmpty(user_id)){\n            return false;\n        }\n\n        let ret = true;\n        for(let rule of rules){\n            //检查执行周期\n            let map = {\n                action_id:action_id,\n                user_id:user_id\n            }\n            if(!think.isEmpty(rule.cycle)&&!think.isEmpty(rule.max)){\n            map.create_time = [\">\",new Date().valueOf() - rule.cycle * 3600 * 1000]\n           // console.log(map);\n           let exec_count = await this.model(\"action_log\").where(map).count();\n            //console.log(exec_count);\n            if(exec_count>rule.max){\n                continue;\n            }\n            }\n            //执行数据库操作\n            let model = this.model(rule.table);\n            let field = rule.field;\n            let step =parseInt(rule.rule);\n            let res;\n            if(step >= 0){\n                res = await model.where(rule.condition).increment(field, step);\n            }else {\n                step = Math.abs(step);\n                res = await model.where(rule.condition).decrement(field, step);\n            }\n            //console.log(Math.abs(step));\n            if(!res){\n                ret = false;\n            }\n        }\n        return ret;\n    }\n}\n"
    ]
}