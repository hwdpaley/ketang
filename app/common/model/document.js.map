{
    "version": 3,
    "sources": [
        "../../../src/common/model/document.js"
    ],
    "names": [
        "detail",
        "id",
        "map",
        "think",
        "isNumberString",
        "name",
        "where",
        "find",
        "info",
        "isEmpty",
        "errno",
        "errmsg",
        "isObject",
        "status",
        "model",
        "get_table_name",
        "model_id",
        "table",
        "details",
        "extend",
        "field",
        "fail",
        "updates",
        "data",
        "time",
        "Date",
        "getTime",
        "position",
        "v",
        "vs",
        "split",
        "length",
        "console",
        "log",
        "type",
        "pid",
        "checkdoctype",
        "res",
        "error",
        "create_time",
        "valueOf",
        "update_time",
        "getStatus",
        "category_id",
        "add",
        "sort_id",
        "sortarr",
        "sortdata",
        "k",
        "arr",
        "obj",
        "value",
        "isArray",
        "identifier",
        "getField",
        "optionid",
        "sortid",
        "fid",
        "tid",
        "push",
        "addMany",
        "addkey",
        "keyname",
        "uid",
        "addsearch",
        "updatekey",
        "userid",
        "update",
        "updatesearch",
        "count",
        "cou",
        "delete",
        "get_document_model",
        "modelinfo",
        "ids",
        "ptype",
        "cid",
        "check",
        "getError",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/document.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n\n   async detail(id){\n        //获取基础数据\n        let map;\n        if(think.isNumberString(id)){\n            map = {id:id}\n        }else {\n            map = {name:id}\n        }\n       //console.log(map);\n        let info = await this.where(map).find();\n       //console.log(info);\n        if(think.isEmpty(info)){\n           return {errno: 702, errmsg: \"数据不存在\"};\n        }else if(!(think.isObject(info) || 1 != info.status)){\n            return {errno: 702, errmsg: \"文档被禁用或已删除\"};\n        }\n        //获取模型数据\n        let table =await this.model(\"model\").get_table_name(info.model_id);\n        let details = await this.model(table).find(info.id);\n        info = think.extend({},info,details);\n        return info;\n    }\n\n    /**\n     * 获取详情页数据\n     * @param id\n     * @returns {*}\n     */\n    async details(id){\n        //获取基础数据\n        let info=await this.field(true).find(id);\n        if(! (think.isObject(info) || 1 !== info.status)){\n            this.fail('文档被禁用或已删除！');\n            return false;\n        }\n        //获取模型数据\n        let table =await this.model(\"model\").get_table_name(info.model_id);\n        let detail = await this.model(table).find(id)\n        info = think.extend({},info,detail);\n        return info;\n    }\n\n    /**\n     * 更新或者新增一个文档\n     * @param data 手动传入的数据\n     * @returns boolean fasle 失败 ， int  成功 返回完整的数据\n     */\n    async updates(data,time=new Date().getTime()){\n     data.position = data.position||0;\n\n        for(let v in data){\n            let vs = v.split(\"|||\");\n\n            if(vs.length>1){\n                console.log(data[v]);\n             data[vs[1]]=(think.isEmpty(data[v])||data[v]==0)?0:new Date(data[v]).getTime();\n            };\n        }\n        //console.log(data);\n        data=data||null;\n        //检查文档类型是否符合要求\n        let type = data.type||2;\n        let pid = data.pid;\n        let res = await this.checkdoctype(type,pid);\n        if(res.errno>0){\n            this.error = res.errmsg;\n            return false;\n        }\n        //添加或者新增基础内容\n        if(think.isEmpty(data.id)){//新增数据\n\n            if(think.isEmpty(data.create_time)){\n                data.create_time = time;\n            }else{\n                data.create_time = data.create_time!=0? new Date(data.create_time).valueOf():time;\n            }\n            data.update_time=new Date().getTime();\n            data.status= await this.getStatus(data.id,data.category_id);\n            var id = await this.add(data);//添加基础数据\n            console.log(\"new document-----------------  \"+id);\n            //let id = 100;\n            if(!id){\n                this.error = '新增基础内容出错！';\n                return false\n            }else {\n                //添加分类信息\n                if(data.sort_id !=0 && !think.isEmpty(data.sort_id)){\n                    let sortarr = [];\n                    let sortdata = {};\n                    for(let k in data){\n                        let arr = k.split(\"_\");\n                        if(arr[0]==\"sortid\" && !think.isEmpty(arr[1])){\n                            let obj ={}\n                            obj.value = think.isArray(data[k])?JSON.stringify(data[k]):data[k];\n                            obj.optionid = await this.model(\"typeoption\").where({identifier:arr[1]}).getField(\"optionid\",true);\n                            obj.sortid = data.sort_id;\n                            obj.fid = data.category_id;\n                            obj.tid = id;\n                            sortarr.push(obj);\n                            sortdata[arr[1]] = think.isArray(data[k])?JSON.stringify(data[k]):data[k];\n                            sortdata.tid = id;\n                            sortdata.fid = data.category_id;\n                        }\n                    }\n                    //console.log(sortarr);\n                    //console.log(sortdata);\n                    //return false;\n                    //添加分类\n                    this.model(\"typeoptionvar\").addMany(sortarr);\n                    this.model(\"type_optionvalue\"+data.sort_id).add(sortdata);\n                }\n                //添加关键词\n                //添加关键词\n                /**\n                 * 添加话题\n                 * @param keyname \"话题1,话题2.话题3\"\n                 * @param id  \"主题id\"\n                 * @param uid \"用户id\"\n                 * @param mod_id \"模型id\"\n                 * @param mod_type \"模型类型 0系统模型，1独立模型\"\n                 */\n                await this.model(\"keyword\").addkey(data.keyname,id,data.uid,data.model_id,0);\n                //添加到搜索\n                await this.model(\"search\").addsearch(data.model_id,id,data);\n            }\n        }else {//更新内容\n            data.update_time=new Date().getTime();\n            data.status= await this.getStatus(data.id,data.category_id);\n            if(!think.isEmpty(data.create_time)){\n                data.create_time = data.create_time!=0? new Date(data.create_time).valueOf():new Date().getTime();\n            }\n            //更新关键词\n            await this.model(\"keyword\").updatekey(data.keyname,data.id,data.userid,data.model_id,0);\n            let status = this.update(data);\n            if(!status){\n                this.error = '更新基础内容出错！';\n                return false;\n            }else {\n                //更新搜索\n                await this.model(\"search\").updatesearch(data.model_id,data);\n                if(data.sort_id !=0 && !think.isEmpty(data.sort_id)){\n                    let sortdata = {};\n                    let sortarr = [];\n                    for(let k in data){\n                        let arr = k.split(\"_\");\n                        if(arr[0]==\"sortid\" && !think.isEmpty(arr[1])){\n                            let obj ={}\n                            obj.value = think.isArray(data[k])?JSON.stringify(data[k]):data[k];\n                            obj.optionid = await this.model(\"typeoption\").where({identifier:arr[1]}).getField(\"optionid\",true);\n                            obj.sortid = data.sort_id;\n                            obj.fid = data.category_id;\n                            obj.tid = data.id;\n                            sortarr.push(obj);\n                            sortdata[arr[1]] = think.isArray(data[k])?JSON.stringify(data[k]):data[k];\n                            sortdata.tid = data.id;\n                            sortdata.fid = data.category_id;\n                        }\n                    }\n                    //console.log(sortarr);\n                    //console.log(sortdata);\n                    let cou = await this.model(\"type_optionvalue\"+data.sort_id).where({tid:data.id}).count(\"tid\");\n                    if(cou > 0){\n                        await this.model(\"type_optionvalue\"+data.sort_id).where({tid:data.id}).update(sortdata);\n                    }else {\n                        await this.model(\"type_optionvalue\"+data.sort_id).add(sortdata);\n                    }\n                    this.model(\"typeoptionvar\").where({tid:data.id}).delete();\n                    //添加分类\n                    this.model(\"typeoptionvar\").addMany(sortarr);\n                }\n            }\n\n        }\n\n\n        /**\n         * 添加或者新增扩展内容\n         * 获取当前扩模型表名字\n         * @type {array}\n         */\n        let modelinfo = await this.model('model').get_document_model(data.model_id);\n        let model;\n        if (modelinfo.extend==1){\n            model = `document_${modelinfo.name}`;\n        }else {\n            model = modelinfo.name;\n        }\n\n        if (think.isEmpty(data.id)) {//新增数据\n            data.id=id;\n            let ids =  this.model(model).add(data);\n            data.id=null;\n            if (!ids) {\n                this.delete(id);\n                this.error = '新增数据失败！';\n                return false;\n            }\n        } else { //更新数据\n            let status =  this.model(model).update(data);\n            if(!status){\n                this.error = '更新数据失败！';\n                return false;\n            }\n        }\n        return {data:data,id:id};\n    }\n\n    /**\n     * 检擦指定文档下面自文档的类型\n     * @param type 子文档的类型\n     * @param pid  父文档类型\n     * @returns {errno: 0,errmsg: \"\",data: {name: \"\"}}\n     */\n\n    async checkdoctype(type,pid){\n        type=type||null,pid=pid||null;\n        let res = {\n            errno: 0,\n            errmsg: \"\",\n            data: {\n                name: \"\"\n            }\n        };\n        if(think.isEmpty(type)){\n            return {\n                errno: 100,\n                errmsg: \"文档类型不能为空\",\n                data: \"\"\n            };\n        }\n        if(think.isEmpty(pid)||pid==0){\n            return res;\n        }\n        //查询父文档的类型\n        let ptype = think.isNumberString(pid) ? await this.where({id:pid}).getField('type',true):await this.where({name:pid}).getField('type',true);\n        // console.log(ptype);\n        //父文档为目录时\n        switch(ptype){\n            case 1: // 目录\n            case 2: // 主题\n                break;\n            case 3: // 段落\n                return {\n                    errno: 100,\n                    errmsg: \"段落下面不允许再添加子内容\",\n                    data: \"\"\n                };\n            default:\n                return {\n                    errno: 100,\n                    errmsg: \"父文档类型不正确\",\n                    data: \"\"\n                };\n        }\n        return res;\n    }\n\n    /**\n     * 获取数据状态\n     * @param id  文章id\n     * @param cid 分类id\n     * @returns {*}\n     */\n    async getStatus(id, cid){\n        id=id||null;\n        let status;\n        if(think.isEmpty(id)){\t//新增\n            let check \t=\tawait this.model('category').where({id:cid}).getField('check',true);\n            status = \tcheck ? 2 : 1;\n        }else{\t\t\t\t//更新\n            status = await this.where({id:id}).getField('status',true);\n            //编辑草稿改变状态\n            if(status == 3){\n                status = 1;\n            }\n        }\n        return status;\n    }\n\n    /**\n     * 返回模型的错误信息\n     * @access public\n     * @return string\n     */\n    getError(){\n        return this.error;\n    }\n\n}"
    ]
}