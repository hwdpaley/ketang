{
    "version": 3,
    "sources": [
        "../../../src/common/model/order.js"
    ],
    "names": [
        "stock",
        "oder_id",
        "regulation",
        "sku",
        "model",
        "where",
        "order_id",
        "select",
        "goodlist",
        "val",
        "id",
        "goods_id",
        "getField",
        "model_id",
        "get_table_name",
        "table",
        "prom_goods",
        "JSON",
        "parse",
        "think",
        "isEmpty",
        "type",
        "data",
        "split",
        "console",
        "log",
        "v",
        "ch",
        "name",
        "_v",
        "__v",
        "sku_stock",
        "Number",
        "goods_nums",
        "date",
        "update",
        "decrement",
        "increment",
        "getstock",
        "ressku",
        "skuarr",
        "push",
        "orderid",
        "prefix",
        "parseConfig",
        "config",
        "query",
        "oo",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/order.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n    /**\n     * 增减库存\n     * @param oder_id 订单id\n     * @param regulation true-减库存，false-加库存\n     * @param sku sku字段 默认 \"suk\",自建模型减少库存是需要填写自己新建的字段名\n     * @param stock 库存 默认 \"total_stock\",\n     */\n   async stock(oder_id,regulation=true,sku=\"suk\",stock =\"total_stock\"){\n\n        let goodlist = await this.model(\"order_goods\").where({order_id:oder_id}).select();\n        for (let val of goodlist){\n            let model_id = await this.model(\"document\").where({id:val.goods_id}).getField(\"model_id\",true);\n            //获取模型数据\n            let table =await this.model(\"model\").get_table_name(model_id);\n            let model =this.model(table);\n            let prom_goods=JSON.parse(val.prom_goods);\n            if(!think.isEmpty(prom_goods.type)){\n\n                let data = await model.where({id:val.goods_id}).getField(sku,true);\n                data = JSON.parse(data);\n                let type = prom_goods.type.split(\",\");\n                console.log(type);\n                for(let v of data.data){\n                    if(v.ch && v.name==type[0]){\n                        for (let _v of v.ch){\n                            if(_v.ch && _v.name == type[1]){\n\n                                for(let __v of _v.ch){\n                                    if(__v.name == type[2]){\n                                        if (regulation) {\n                                            __v.sku_stock=Number(__v.sku_stock)-val.goods_nums;\n                                        }else {\n                                            __v.sku_stock=Number(__v.sku_stock)+val.goods_nums;\n                                        }\n\n                                    }\n                                }\n                            }else {\n                                if(_v.name == type[1]){\n                                    if(regulation){\n                                        _v.sku_stock=Number(_v.sku_stock)-val.goods_nums;\n                                    }else {\n                                        _v.sku_stock=Number(_v.sku_stock)+val.goods_nums;\n                                    }\n\n                                }\n                            }\n                        }\n                    }else {\n                        if(v.name == type[0]){\n                            if(regulation){\n                                v.sku_stock=Number(v.sku_stock)-val.goods_nums;\n                            }else {\n                                v.sku_stock=Number(v.sku_stock)+val.goods_nums;\n                            }\n\n                        }\n                    }\n\n                }\n                think.log(data)\n                let date = {}\n                date[sku]=JSON.stringify(data);\n                await model.where({id:val.goods_id}).update(date);\n            }\n            if(regulation){\n                //减库存\n                await model.where({id:val.goods_id}).decrement(stock, val.goods_nums);\n            }else {\n                //加库存\n                await model.where({id:val.goods_id}).increment(stock, val.goods_nums);\n            }\n\n\n        }\n\n\n    }\n\n    /**\n     *\n     * @param goods_id 商品id\n     * @param type 商品sku类型\n     * @param sku  新建模型的 sku 字段名\n     * @param stock 新建模型的 总库存字段名\n     * @returns {*} 库存数量\n     */\n    async getstock(goods_id,type,sku=\"suk\",stock =\"total_stock\"){\n        let ressku;\n        let model_id = await this.model(\"document\").where({id:goods_id}).getField(\"model_id\",true);\n        // 如果宝贝不存在则库存为0\n        if(!model_id){\n            return 0;\n        }\n        //获取模型数据\n        let table =await this.model(\"model\").get_table_name(model_id);\n        let model =this.model(table);\n        if(think.isEmpty(type)){\n            ressku = await model.where({id:goods_id}).getField(stock,true);\n        }else {\n            let data = await model.where({id:goods_id}).getField(sku,true);\n            data = JSON.parse(data);\n            type = type.split(\",\");\n            let skuarr = [];\n            for(let v of data.data){\n                if(v.ch && v.name==type[0]){\n                    for (let _v of v.ch){\n                        if(_v.ch && _v.name == type[1]){\n\n                            for(let __v of _v.ch){\n                                if(__v.name == type[2]){\n\n                                        skuarr.push(Number(__v.sku_stock));\n\n                                }\n                            }\n                        }else {\n                            if(_v.name == type[1]){\n                                skuarr.push(Number(_v.sku_stock));\n\n                            }\n                        }\n                    }\n                }else {\n                    if(v.name == type[0]){\n                        skuarr.push(Number(v.sku_stock));\n                    }\n                }\n\n            }\n            ressku = skuarr[0]\n        }\n        return ressku;\n    }\n    async orderid(){\n        // let date = new Date();\n        // let y = date.getFullYear();\n        // let m = date.getMonth()+1 <10 ?\"0\"+(date.getMonth()+1):date.getMonth()+1;\n        // let d = date.getDate()<10?\"0\"+date.getDate():date.getDate();\n        // let v_timestr = y+m+d;\n        let prefix=think.parseConfig(true,think.config(\"db\")).prefix;\n        let oo = await think.model(\"mysql\",think.config(\"db\")).query(`call seq_no(1)`);//TODO\n        // let order_no= await this.query(`SELECT CONCAT(${v_timestr},LPAD(order_sn,7,0)) AS order_sn FROM cmswing_order_seq WHERE timestr=${v_timestr}`);\n        return oo[0][0][\"order_sn\"];\n    }\n}"
    ]
}