{
    "version": 3,
    "sources": [
        "../../../src/common/model/attribute.js"
    ],
    "names": [
        "upattr",
        "data",
        "create",
        "think",
        "isEmpty",
        "id",
        "create_time",
        "Date",
        "valueOf",
        "status",
        "add",
        "addField",
        "res",
        "console",
        "log",
        "delete",
        "updateField",
        "update_time",
        "update",
        "checkTableExist",
        "model_id",
        "table_name",
        "extend_model",
        "Model",
        "model",
        "where",
        "field",
        "find",
        "extend",
        "parseConfig",
        "config",
        "prefix",
        "name",
        "toLowerCase",
        "query",
        "length",
        "addtable",
        "mod_id",
        "table_exist",
        "sql",
        "model_info",
        "need_pk",
        "engine_type",
        "parseSql",
        "execute",
        "_filed",
        "value",
        "def",
        "isNumberString",
        "isString",
        "fie",
        "title",
        "_field",
        "getField",
        "last_field",
        "deleteField",
        "checkName",
        "map",
        "get_model_attribute",
        "group",
        "fields",
        "select",
        "info",
        "attr",
        "val",
        "attribute",
        "attribute_list",
        "split",
        "field_sort",
        "obj_values",
        "JSON",
        "parse",
        "keys",
        "_group",
        "k",
        "__group",
        "push",
        "narr",
        "in_array",
        "concat",
        "attribute_alias",
        "alias",
        "forEach",
        "v",
        "base"
    ],
    "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKI;;;;;qBAKMA,M;+FAAOC,I,EAAMC,M;;;;;;;iCAEXC,MAAMC,OAAN,CAAcH,IAAd,C;;;;;6DACO,K;;;iCAGPE,MAAMC,OAAN,CAAcH,KAAKI,EAAnB,C;;;;;AAAyB;AACzBJ,iCAAKK,WAAL,GAAmB,IAAIC,IAAJ,GAAWC,OAAX,EAAnB;AACAP,iCAAKQ,MAAL,GAAc,CAAd;;mCACe,KAAKC,GAAL,CAAST,IAAT,C;;;AAAXI,8B;;gCACCA,E;;;;;6DACM,K;;;iCAEPH,M;;;;;;mCAEgB,KAAKS,QAAL,CAAcV,IAAd,C;;;AAAZW,+B;;AACJC,oCAAQC,GAAR,CAAYF,GAAZ;AACA;;gCACKA,G;;;;;AACD,iCAAKG,MAAL,CAAYV,EAAZ;6DACO,K;;;;;;;iCAKXH,M;;;;;;mCAEgB,KAAKc,WAAL,CAAiBf,IAAjB,C;;;AAAZW,gC;;gCACCA,I;;;;;6DACM,K;;;AAGfX,iCAAKgB,WAAL,GAAmB,IAAIV,IAAJ,GAAWC,OAAX,EAAnB;;mCACmB,KAAKU,MAAL,CAAYjB,IAAZ,C;;;AAAfQ,kC;;gCACCA,M;;;;;6DACM,K;;;6DAGRR,I;;;;;;;;;;;;;;;;;AAGX;;;;;;;;qBAMMkB,e;iGAAgBC,Q;;;;;;AACdC,sC;AACAC,wC;AACAC,iC,GAAQ,KAAKC,KAAL,CAAW,OAAX,C;;mCACMD,MAAME,KAAN,CAAY,EAACpB,IAAIe,QAAL,EAAZ,EAA4BM,KAA5B,CAAkC,aAAlC,EAAiDC,IAAjD,E;;;AAAdH,iC;;kCACAA,MAAMI,MAAN,IAAgB,C;;;;;AAAI;AACpBP,yCAAa,KAAKA,UAAL,GAAkBlB,MAAM0B,WAAN,CAAkB,IAAlB,EAAwB1B,MAAM2B,MAAN,CAAa,IAAb,CAAxB,EAA4CC,MAA5C,GAAqDP,MAAMQ,IAAN,CAAWC,WAAX,EAApF;;;;;;mCAEqBV,MAAME,KAAN,CAAY,EAACpB,IAAImB,MAAMI,MAAX,EAAZ,EAAgCF,KAAhC,CAAsC,aAAtC,EAAqDC,IAArD,E;;;AAArBL,wC;;AACAD,yCAAa,KAAKA,UAAL,GAAkBlB,MAAM0B,WAAN,CAAkB,IAAlB,EAAwB1B,MAAM2B,MAAN,CAAa,IAAb,CAAxB,EAA4CC,MAA5C,GAAqDT,aAAaU,IAAb,CAAkBC,WAAlB,EAArD,GAAuF,GAAvF,GAA6FT,MAAMQ,IAAN,CAAWC,WAAX,EAA5H;;;;mCAEY9B,MAAMqB,KAAN,CAAY,OAAZ,EAAqBrB,MAAM2B,MAAN,CAAa,IAAb,CAArB,EAAyCI,KAAzC,wBAAoEb,UAApE,O;;;AAAZT,+B;8DACGA,IAAIuB,M;;;;;;;;;;;;;;;;;AAGf;;;;;;qBAIMC,Q;iGAASC,M;;;;;;;mCACa,KAAKlB,eAAL,CAAqBkB,MAArB,C;;;AAApBC,uC;AACAC,+B;;gCACAD,W;;;;;;mCACuB,KAAKd,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B,EAACpB,IAAGgC,MAAJ,EAA1B,EAAuCX,KAAvC,CAA6C,qBAA7C,EAAoEC,IAApE,E;;;AAAnBa,sC;;AACJ3B,oCAAQC,GAAR,CAAY0B,UAAZ;AACA,gCAAIA,WAAWC,OAAf,EAAwB;AACpBF,wEAAuC,KAAKlB,UAA5C,8sCAgBSmB,WAAWE,WAhBpB;AAsBAH,sCAAM,KAAKI,QAAL,CAAcJ,GAAd,CAAN;AACH,6BAxBD,MAwBO;AACHA,wEAAuC,KAAKlB,UAA5C,glCAcSmB,WAAWE,WAdpB;AAoBAH,sCAAM,KAAKI,QAAL,CAAcJ,GAAd,CAAN;AACH;;;;mCAEWpC,MAAMqB,KAAN,CAAY,OAAZ,EAAqBrB,MAAM2B,MAAN,CAAa,IAAb,CAArB,EAAyCc,OAAzC,CAAiDL,GAAjD,C;;;AAAZ3B,+B;8DACGA,OAAO,C;;;;;;;;;;;;;;;;AAElB;;;;;;;;qBAMMD,Q;iGAASkC,M;;;;;;;;mCAEa,KAAK1B,eAAL,CAAqB0B,OAAOzB,QAA5B,C;;;AAApBkB,uC;;AAGJ;AACIQ,iC,GAAQD,OAAOC,K;;AACnB,gCAAIA,UAAU,EAAd,EAAkB;AACdC,sCAAM,EAAN;AACH,6BAFD,MAEO,IAAI5C,MAAM6C,cAAN,CAAqBF,KAArB,CAAJ,EAAiC;AACpCC,sCAAM,cAAcD,KAApB;AACH,6BAFM,MAEA,IAAI3C,MAAM8C,QAAN,CAAeH,KAAf,CAAJ,EAA2B;AAC9BC,sCAAM,gBAAgBD,KAAhB,GAAwB,IAA9B;AACH,6BAFM,MAEA;AACHC,sCAAM,EAAN;AACH;;iCAEGT,W;;;;;AACIY,+B,GAAML,M;;AACVN,oDAAuB,KAAKlB,UAA5B,sBAAyD6B,IAAIlB,IAA7D,WAAwEkB,IAAIxB,KAA5E,UAAsFqB,GAAtF,kBAAuGG,IAAIC,KAA3G;AACAZ,kCAAM,KAAKI,QAAL,CAAcJ,GAAd,CAAN;;;;;;mCAGuB,KAAKf,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B,EAACpB,IAAIwC,OAAOzB,QAAZ,EAA1B,EAAiDM,KAAjD,CAAuD,qBAAvD,EAA8EC,IAA9E,E;;;AAAnBa,sC;;AACJ,gCAAIA,WAAWC,OAAf,EAAwB;AAChBS,oCADgB,GACVL,MADU;;AAEpBN,wEAAuC,KAAKlB,UAA5C,uHAEI6B,KAAIlB,IAFR,WAEmBkB,KAAIxB,KAFvB,SAEgCqB,GAFhC,kBAEiDG,KAAIC,KAFrD,2FAKSX,WAAWE,WALpB;AAWAH,sCAAM,KAAKI,QAAL,CAAcJ,GAAd,CAAN;AACH,6BAdD,MAcO;AACCW,qCADD,GACOL,MADP;;AAEHN,yEAAwC,KAAKlB,UAA7C,8BACI6B,MAAIlB,IADR,WACmBkB,MAAIxB,KADvB,SACgCqB,GADhC,kBACiDG,MAAIC,KADrD,qDAGSX,WAAWE,WAHpB;AASAH,sCAAM,KAAKI,QAAL,CAAcJ,GAAd,CAAN;AACH;;;;mCAEWpC,MAAMqB,KAAN,CAAY,OAAZ,EAAqBrB,MAAM2B,MAAN,CAAa,IAAb,CAArB,EAAyCc,OAAzC,CAAiDL,GAAjD,C;;;AAAZ3B,+B;8DAEGA,OAAO,C;;;;;;;;;;;;;;;;;AAIlB;;;;;;;;qBAMMI,W;iGAAYoC,M;;;;;;;mCAEP,KAAKjC,eAAL,CAAqBiC,OAAOhC,QAA5B,C;;;;mCAGgB,KAAKK,KAAL,CAAW,EAACpB,IAAI+C,OAAO/C,EAAZ,EAAX,EAA4BgD,QAA5B,CAAqC,MAArC,C;;;AAAnBC,sC;;;AAEJ;AACIP,+B,GAAMK,OAAON,KAAP,IAAgB,EAAhB,GAAqB,cAAcM,OAAON,KAA1C,GAAkD,E;AAExDP,+B,qBAAuB,KAAKlB,U,yBAAgCiC,U,WAAkBF,OAAOpB,I,WAAWoB,OAAO1B,K,SAASqB,G,kBAAiBK,OAAOD,K;;AAC5IZ,kCAAM,KAAKI,QAAL,CAAcJ,GAAd,CAAN;AACA1B,oCAAQC,GAAR,CAAYyB,GAAZ;;mCACgBpC,MAAMqB,KAAN,CAAY,OAAZ,EAAqBrB,MAAM2B,MAAN,CAAa,IAAb,CAArB,EAAyCc,OAAzC,CAAiDL,GAAjD,C;;;AAAZ3B,+B;;AACJC,oCAAQC,GAAR,CAAYF,GAAZ;8DACOA,OAAO,C;;;;;;;;;;;;;;;;;AAGlB;;;;;;;;qBAMO2C,W;iGAAYH,M;;;;;;;mCAER,KAAKjC,eAAL,CAAqBiC,OAAOhC,QAA5B,C;;;AAEHmB,+B,qBAAuB,KAAKlB,U,uBAA8B+B,OAAOpB,I;;;AAErEO,kCAAM,KAAKI,QAAL,CAAcJ,GAAd,CAAN;AACD;;mCACiBpC,MAAMqB,KAAN,CAAY,OAAZ,EAAqBrB,MAAM2B,MAAN,CAAa,IAAb,CAArB,EAAyCc,OAAzC,CAAiDL,GAAjD,C;;;AAAZ3B,+B;8DACGA,OAAO,C;;;;;;;;;;;;;;;;;AAIlB;;;;;;;;qBAMM4C,S;iGAAUxB,I,EAAMZ,Q,EAAUf,E;;;;;;AACxBoD,+B,GAAM,EAAC,QAAQzB,IAAT,EAAe,YAAYZ,QAA3B,E;;AACV,gCAAI,CAACjB,MAAMC,OAAN,CAAcC,EAAd,CAAL,EAAwB;AACpBoD,oCAAIpD,EAAJ,GAAS,CAAC,IAAD,EAAOA,EAAP,CAAT;AACH;;mCACe,KAAKoB,KAAL,CAAWgC,GAAX,EAAgB9B,IAAhB,E;;;AAAZf,+B;8DACGT,MAAMC,OAAN,CAAcQ,GAAd,C;;;;;;;;;;;;;;;;;AAGX;;;;;;;;qBAMM8C,mB;iGAAoBtC,Q,EAAUuC,K,EAAOC,M;;;;;;;;;AACvC;AACA;AACIH,+B;AACJ;;kCACItD,MAAMC,OAAN,CAAcgB,QAAd,KAA2B,CAACjB,MAAM6C,cAAN,CAAqB5B,QAArB,C;;;;;8DACrB,E;;;AAEX;AACAqC,kCAAM,EAACrC,UAAUA,QAAX,EAAN;;mCACmB,KAAKI,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B,EAACpB,IAAIe,QAAL,EAA1B,EAA0CiC,QAA1C,CAAmD,QAAnD,EAA6D,IAA7D,C;;;AAAfzB,kC;;AACJ;AACA,gCAAIA,MAAJ,EAAY;AACR6B,sCAAM,EAACrC,UAAU,CAAC,IAAD,EAAO,CAACA,QAAD,EAAWQ,MAAX,CAAP,CAAX,EAAN;AACH;;mCACgB,KAAKH,KAAL,CAAWgC,GAAX,EAAgB/B,KAAhB,CAAsBkC,MAAtB,EAA8BC,MAA9B,E;;;AAAbC,gC;AACAC,gC,GAAO,E;;iCACPJ,K;;;;;;;;;;;;4DACgBG,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAPE,qD;;AACLD,qDAAKC,MAAI3D,EAAT,IAAe2D,KAAf;;;;;;;;uDAEc,OAAKxC,KAAL,CAAW,OAAX,EAAoBE,KAApB,CAA0B,2CAA1B,EAAuEC,IAAvE,CAA4EP,QAA5E,C;;;AAAdI,qD;AACAyC,yD;;AACJ,oDAAIzC,MAAM0C,cAAV,EAA0B;AACtBD,gEAAYzC,MAAM0C,cAAN,CAAqBC,KAArB,CAA2B,GAA3B,CAAZ;AACH,iDAFD,MAEO;AACHF,gEAAY,EAAZ;AACH;AACGN,qD;;qDACAxD,MAAMC,OAAN,CAAcoB,MAAM4C,UAApB,C;;;;;AACAT,wDAAQ,EAAC,GAAGU,WAAWN,IAAX,CAAJ,EAAR;;;;;AAEAJ,wDAAQW,KAAKC,KAAL,CAAW/C,MAAM4C,UAAjB,CAAR;AACII,oD,GAAO,oBAAYb,KAAZ,C;AACX;;AACIc,sD,GAAS,E;0FACCd,K;;;;;;;;AAALe,iD;AACDC,uD,GAAU,E;6DACEhB,MAAMe,CAAN,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAPV,mD;;AACLW,wDAAQC,IAAR,CAAab,KAAKC,GAAL,CAAb;AACA,uDAAOD,KAAKC,GAAL,CAAP;;;;;;;AAEJS,uDAAOC,CAAP,IAAYC,OAAZ;;;;;AAEJhB,wDAAQc,MAAR;;AAEA,oDAAI,CAACtE,MAAMC,OAAN,CAAc2D,IAAd,CAAL,EAA0B;AAClBc,wDADkB,GACX,EADW;;AAEtB,yDAASH,EAAT,IAAcX,IAAd,EAAoB;AAChB,4DAAI,CAACe,SAASf,KAAKW,EAAL,EAAQrE,EAAjB,EAAqB4D,SAArB,CAAL,EAAsC;AAClC,mEAAOF,KAAKW,EAAL,CAAP;AACH,yDAFD,MAEO;AACHG,iEAAKD,IAAL,CAAUb,KAAKW,EAAL,CAAV;AACH;AACJ;AACDf,0DAAMa,KAAK,CAAL,CAAN,IAAiBb,MAAMa,KAAK,CAAL,CAAN,EAAeO,MAAf,CAAsBF,IAAtB,CAAjB;AAEH;AACD,oDAAI,CAAC1E,MAAMC,OAAN,CAAcoB,MAAMwD,eAApB,CAAL,EAA2C;AAAA;AACvC;AACA,4DAAIC,QAAQzD,MAAMwD,eAAN,CAAsBb,KAAtB,CAA4B,MAA5B,CAAZ;AACA;AACA,4DAAIP,SAAS,EAAb;AACA,8EAAkBqB,KAAlB,kIAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gEAAhBnC,KAAgB;;AACrB,gEAAIkB,OAAMlB,MAAMqB,KAAN,CAAY,GAAZ,CAAV;AACA;AACAP,mEAAOI,KAAI,CAAJ,CAAP,IAAiBA,KAAI,CAAJ,CAAjB;AACH;AACD;;AAVuC,mFAW9BlB,KAX8B;AAYnCa,kEAAMb,KAAN,EAAaoC,OAAb,CAAqB,UAACC,CAAD,EAAIT,CAAJ,EAAS;AAC1B,oEAAI,CAACvE,MAAMC,OAAN,CAAcwD,OAAOuB,EAAEnD,IAAT,CAAd,CAAL,EAAoC;AAChC;AACA2B,0EAAMb,KAAN,EAAa4B,CAAb,EAAgB,OAAhB,IAA2Bd,OAAOuB,EAAEnD,IAAT,CAA3B;AAEH;AACJ,6DAND;AAOC;AAnBkC;;AAWvC,6DAAK,IAAIc,KAAT,IAAkBa,KAAlB,EAAyB;AAAA,kEAAhBb,KAAgB;AASxB;AApBsC;AAsB1C;AACDiB,uDAAOJ,KAAP;AACA;;;;;;;;;;;;;;;yCAGUG,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAALqB,6B;;AACLpB,iCAAKoB,EAAEnD,IAAP,IAAemD,CAAf;;;;;;;8DAGDpB,I;;;;;;;;;;;;;;;;;;EA3Vc5D,MAAMqB,KAAN,CAAY4D,I",
    "file": "../../../src/common/model/attribute.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n\n    /**\n     * 新增或更新一个属性\n     * @return Boolean  fasle 失败 ， int  成功 返回完整的数据\n     * @author\n     */\n    async upattr(data, create) {\n        //获取数据对象\n        if (think.isEmpty(data)) {\n            return false;\n        }\n\n        if (think.isEmpty(data.id)) {//新增字段\n            data.create_time = new Date().valueOf();\n            data.status = 1;\n            let id = await this.add(data);\n            if (!id) {\n                return false;\n            }\n            if (create) {\n                //新增表字段\n                let res = await this.addField(data);\n                console.log(res);\n                //return false;\n                if (!res) {\n                    this.delete(id)\n                    return false;\n                }\n            }\n\n        } else {//更新数据\n            if (create) {\n                //更新表字段\n                let res = await this.updateField(data);\n                if (!res) {\n                    return false;\n                }\n            }\n            data.update_time = new Date().valueOf();\n            let status = await this.update(data);\n            if (!status) {\n                return false;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * 检查当前表是否存在\n     * @param Number model_id 模型id\n     * @return Number 是否存在\n     * @author\n     */\n    async checkTableExist(model_id) {\n        let table_name;\n        let extend_model;\n        let Model = this.model(\"model\");\n        let model = await Model.where({id: model_id}).field(\"name,extend\").find();\n        if (model.extend == 0) {//独立模型表名\n            table_name = this.table_name = think.parseConfig(true, think.config(\"db\")).prefix + model.name.toLowerCase();\n        } else {\n            extend_model = await Model.where({id: model.extend}).field(\"name,extend\").find();\n            table_name = this.table_name = think.parseConfig(true, think.config(\"db\")).prefix + extend_model.name.toLowerCase() + '_' + model.name.toLowerCase();\n        }\n        let res = await think.model('mysql', think.config(\"db\")).query(`SHOW TABLES LIKE '${table_name}'`)\n        return res.length;\n    }\n\n    /**\n     * 独立模型初始化表结构\n     * @param mod_id 模型id;\n     */\n    async addtable(mod_id){\n        let table_exist = await this.checkTableExist(mod_id);\n        let sql;\n        if(!table_exist){\n            let model_info = await this.model('model').where({id:mod_id}).field('engine_type,need_pk').find();\n            console.log(model_info);\n            if (model_info.need_pk) {\n                sql = ` CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n                \\`id\\`  int(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT \\'主键\\' ,\n                \\`title\\` char(80) NOT NULL COMMENT \\'标题\\',\n                \\`category_id\\` int(10) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'栏目目录\\',\n                \\`group_id\\` smallint(3) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'所属分组\\',\n                \\`model_id\\` tinyint(3) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'内容模型ID\\',\n                \\`create_time\\` bigint(13) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'创建时间\\',\n                \\`update_time\\` bigint(13) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'更新时间\\',\n                \\`status\\` tinyint(4) NOT NULL DEFAULT \\'0\\' COMMENT \\'数据状态0禁用，1启用，-1删除\\',\n                \\`sort_id\\` smallint(6) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'分类信息关联id\\',\n                PRIMARY KEY (\\`id\\`),\n                KEY \\`category_id\\` (\\`category_id\\`),\n                KEY \\`group_id\\` (\\`group_id\\`),\n                KEY \\`status\\` (\\`status\\`),\n                KEY \\`sort_id\\` (\\`sort_id\\`)\n                )\n                ENGINE=${model_info.engine_type}\n                DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n                CHECKSUM=0\n                ROW_FORMAT=DYNAMIC\n                DELAY_KEY_WRITE=0\n                ;`\n                sql = this.parseSql(sql);\n            } else {\n                sql = ` CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n                \\`title\\` char(80) NOT NULL COMMENT \\'标题\\',\n                \\`category_id\\` int(10) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'栏目目录\\',\n                \\`group_id\\` smallint(3) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'所属分组\\',\n                \\`model_id\\` tinyint(3) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'内容模型ID\\',\n                \\`create_time\\` bigint(13) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'创建时间\\',\n                \\`update_time\\` bigint(13) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'更新时间\\',\n                \\`status\\` tinyint(4) NOT NULL DEFAULT \\'0\\' COMMENT \\'数据状态0禁用，1启用，-1删除\\',\n                \\`sort_id\\` smallint(6) unsigned NOT NULL DEFAULT \\'0\\' COMMENT \\'分类信息关联id\\',\n                KEY \\`category_id\\` (\\`category_id\\`),\n                KEY \\`group_id\\` (\\`group_id\\`),\n                KEY \\`status\\` (\\`status\\`),\n                KEY \\`sort_id\\` (\\`sort_id\\`)\n                )\n                ENGINE=${model_info.engine_type}\n                DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n                CHECKSUM=0\n                ROW_FORMAT=DYNAMIC\n                DELAY_KEY_WRITE=0\n                ;`\n                sql = this.parseSql(sql);\n            }\n        }\n        let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n        return res >= 0;\n    }\n    /**\n     * 新建表字段\n     * @param Array field 需要新建的字段属性\n     * @return Boolean  true 成功 ， false 失败\n     * @author\n     */\n    async addField(_filed) {\n        //检查表是否存在\n        let table_exist = await this.checkTableExist(_filed.model_id);\n        var def;\n        var sql;\n        //获取默认值\n        var value = _filed.value;\n        if (value === '') {\n            def = '';\n        } else if (think.isNumberString(value)) {\n            def = ' DEFAULT ' + value;\n        } else if (think.isString(value)) {\n            def = ' DEFAULT \\'' + value + '\\'';\n        } else {\n            def = '';\n        }\n\n        if (table_exist) {\n            let fie = _filed;\n            sql = `ALTER TABLE \\`${this.table_name}\\` ADD COLUMN \\`${fie.name}\\`  ${fie.field}  ${def} COMMENT \\'${fie.title}\\';`\n            sql = this.parseSql(sql);\n        } else {//新建表时是否默认新增‘id主键’字段\n\n            let model_info = await this.model('model').where({id: _filed.model_id}).field('engine_type,need_pk').find();\n            if (model_info.need_pk) {\n                let fie = _filed;\n                sql = ` CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n                \\`id\\`  int(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT \\'主键\\' ,\n                \\`${fie.name}\\`  ${fie.field} ${def} COMMENT \\'${fie.title}\\' ,\n                PRIMARY KEY (\\`id\\`)\n                )\n                ENGINE=${model_info.engine_type}\n                DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n                CHECKSUM=0\n                ROW_FORMAT=DYNAMIC\n                DELAY_KEY_WRITE=0\n                ;`\n                sql = this.parseSql(sql);\n            } else {\n                let fie = _filed;\n                sql = `  CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n                \\`${fie.name}\\`  ${fie.field} ${def} COMMENT \\'${fie.title}\\'\n                )\n                ENGINE=${model_info.engine_type}\n                DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n                CHECKSUM=0\n                ROW_FORMAT=DYNAMIC\n                DELAY_KEY_WRITE=0\n                ;`\n                sql = this.parseSql(sql);\n            }\n        }\n        let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n\n        return res >= 0;\n\n    }\n\n    /**\n     * 更新表字段\n     * @param array _field 需要更新的字段属性\n     * @return boolean true 成功 ， false 失败\n     * @author\n     */\n    async updateField(_field) {\n        //检查表是否存在\n         await this.checkTableExist(_field.model_id);\n\n        //获取原字段名\n        let last_field = await this.where({id: _field.id}).getField('name');\n\n        //获取默认值\n        let def = _field.value != '' ? ' DEFAULT ' + _field.value : '';\n\n        let sql = `ALTER TABLE \\`${this.table_name}\\` CHANGE COLUMN \\`${last_field}\\` \\`${_field.name}\\`  ${_field.field} ${def} COMMENT \\'${_field.title}\\' ;`\n        sql = this.parseSql(sql);\n        console.log(sql);\n        let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n        console.log(res);\n        return res == 0;\n    }\n\n    /**\n     * 删除一个字段\n     * @param array field 需要删除的字段属性\n     * @return boolean true 成功 ， false 失败\n     * @author\n     */\n    async  deleteField(_field) {\n        //检查表是否存在\n         await this.checkTableExist(_field.model_id);\n\n        let sql = `ALTER TABLE \\`${this.table_name}\\` DROP COLUMN \\`${_field.name}\\`;`\n\n        sql = this.parseSql(sql);\n       // console.log(sql);\n        let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n        return res == 0;\n    }\n\n\n    /**\n     * 检查同一张表是否有相同的字段\n     * @param name 要验证的字段名称\n     * @param model_id 要验证的字段的模型id\n     * @author\n     */\n    async checkName(name, model_id, id) {\n        let map = {'name': name, 'model_id': model_id};\n        if (!think.isEmpty(id)) {\n            map.id = [\"!=\", id];\n        }\n        let res = await this.where(map).find();\n        return think.isEmpty(res);\n    }\n\n    /**\n     * 获取属性信息并缓存\n     * @param int id 属性id\n     * @param string field 要获取的字段名\n     * @return string  属性信息\n     */\n    async get_model_attribute(model_id, group, fields) {\n        //group=group?true:false;\n        //fields=fields?true:false;\n        let map;\n        //验证ID\n        if (think.isEmpty(model_id) || !think.isNumberString(model_id)) {\n            return '';\n        }\n        //获取属性\n        map = {model_id: model_id};\n        let extend = await this.model('model').where({id: model_id}).getField('extend', true);\n        //console.log(extend);\n        if (extend) {\n            map = {model_id: ['IN', [model_id, extend]]}\n        }\n        let info = await this.where(map).field(fields).select();\n        let attr = {};\n        if (group) {\n            for (let val of info) {\n                attr[val.id] = val;\n            }\n            let model = await this.model('model').field(\"field_sort,attribute_list,attribute_alias\").find(model_id);\n            let attribute;\n            if (model.attribute_list) {\n                attribute = model.attribute_list.split(\",\")\n            } else {\n                attribute = [];\n            }\n            let group;\n            if (think.isEmpty(model.field_sort)) {\n                group = {1: obj_values(attr)}\n            } else {\n                group = JSON.parse(model.field_sort);\n                let keys = Object.keys(group);\n                //console.log(group);\n                let _group = {};\n                for (var k in group) {\n                    let __group = []\n                    for (let val of group[k]) {\n                        __group.push(attr[val]);\n                        delete attr[val];\n                    }\n                    _group[k] = __group;\n                }\n                group = _group;\n\n                if (!think.isEmpty(attr)) {\n                    let narr = []\n                    for (let k in attr) {\n                        if (!in_array(attr[k].id, attribute)) {\n                            delete attr[k];\n                        } else {\n                            narr.push(attr[k]);\n                        }\n                    }\n                    group[keys[0]] = group[keys[0]].concat(narr)\n\n                }\n                if (!think.isEmpty(model.attribute_alias)) {\n                    //let alias  = preg_split('/[;\\r\\n]+/s', model.attribute_alias);\n                    let alias = model.attribute_alias.split('\\r\\n');\n                    //think.log(alias);\n                    let fields = {};\n                    for (let value of alias) {\n                        let val = value.split(':');\n                        //think.log(val);\n                        fields[val[0]] = val[1];\n                    }\n                    //think.log(fields);\n                    for (let value in group) {\n                        group[value].forEach((v, k)=> {\n                            if (!think.isEmpty(fields[v.name])) {\n                                //think.log(group[value][k]);\n                                group[value][k]['title'] = fields[v.name];\n                               \n                            }\n                        })\n                         //think.log(group[value]['title']);\n                    }\n                    \n                }\n                attr = group;\n                //think.log(attr);\n            }\n        } else {\n            for (let v of info) {\n                attr[v.name] = v;\n            }\n        }\n        return attr;\n    }\n}"
    ]
}