{
    "version": 3,
    "sources": [
        "../../../src/common/service/qiniu.js"
    ],
    "names": [
        "init",
        "uploadpic",
        "filePath",
        "key",
        "istoken",
        "uptoken",
        "uploadFile",
        "localFile",
        "deferred",
        "think",
        "defer",
        "extra",
        "io",
        "PutExtra",
        "putFile",
        "err",
        "ret",
        "console",
        "log",
        "hash",
        "persistentId",
        "resolve",
        "promise",
        "bucket",
        "putPolicy",
        "rs",
        "PutPolicy",
        "token",
        "cache",
        "setup",
        "conf",
        "ACCESS_KEY",
        "QINIU_AK",
        "SECRET_KEY",
        "QINIU_SK",
        "QINIU_BUCKET",
        "remove",
        "delfile",
        "client",
        "Client",
        "stat",
        "fsize",
        "putTime",
        "mimeType",
        "pfop",
        "pipeline",
        "fops",
        "saveas_key",
        "util",
        "urlsafeBase64Encode",
        "saved_bucket",
        "saved_key",
        "opts",
        "pipleline",
        "PFOP",
        "fop",
        "download",
        "url",
        "QINIU_DOMAIN_NAME",
        "policy",
        "GetPolicy",
        "downloadUrl",
        "makeRequest",
        "service",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/service/qiniu.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\nimport qiniu from 'qiniu';\nexport default class extends think.service.base {\n  /**\n   * init\n   * @return {}         []\n   */\n   init(){\n    super.init();\n\n  }\n\n    /**\n     * 七牛上传\n     * @param filePath 要上传文件的本地路径\n     * @param key 上传到七牛后保存的文件名\n     * @returns {*}\n     */\n  async uploadpic(filePath,key,istoken=false){\n    let setup = await think.cache(\"setup\");\n    qiniu.conf.ACCESS_KEY = setup.QINIU_AK;\n    qiniu.conf.SECRET_KEY = setup.QINIU_SK;\n      let bucket = setup.QINIU_BUCKET;\n        //用于前端直传直接返回 token\n        if(istoken && filePath==null){\n            let putPolicy = new qiniu.rs.PutPolicy(bucket);\n            //let putPolicy = new qiniu.rs.PutPolicy2(new policy(bucket));\n            return putPolicy.token();\n        }\n\n        //获取token\n      function uptoken(bucket, key) {\n               let putPolicy = new qiniu.rs.PutPolicy(bucket+\":\"+key);\n               // let putPolicy = new qiniu.rs.PutPolicy2(new policy(bucket+\":\"+key));\n               return putPolicy.token();\n           }\n      let  token = uptoken(bucket, key);\n\n\n       //构造上传函数\n       //noinspection JSAnnotator\n       function uploadFile(uptoken, key, localFile) {\n           let deferred = think.defer();\n           var extra = new qiniu.io.PutExtra();\n           qiniu.io.putFile(uptoken, key, localFile, extra, function(err, ret) {\n               if(!err) {\n                   // 上传成功， 处理返回值\n                   console.log(ret.hash, ret.key, ret.persistentId);\n                   deferred.resolve(ret);\n               } else {\n                   // 上传失败， 处理返回代码\n                   console.log(err);\n                   deferred.resolve(false);\n               }\n           });\n           return deferred.promise;\n       }\n     return await uploadFile(token, key, filePath);\n  }\n    //删除资源\n    async remove(key){\n\n        let setup = await think.cache(\"setup\");\n        qiniu.conf.ACCESS_KEY = setup.QINIU_AK;\n        qiniu.conf.SECRET_KEY = setup.QINIU_SK;\n        let bucket = setup.QINIU_BUCKET;\n\n        function delfile() {\n            let deferred = think.defer();\n            //构建bucketmanager对象\n            let client = new qiniu.rs.Client();\n            //删除资源\n            client.remove(bucket, key, function(err, ret) {\n                if (!err) {\n                    // ok\n                    deferred.resolve(true);\n                } else {\n                    console.log(err);\n                    deferred.resolve(false);\n                }\n            });\n            return deferred.promise;\n        }\n\n    return await delfile();\n\n    }\n    //获取文件信息\n    async stat(key){\n        let setup = await think.cache(\"setup\");\n        qiniu.conf.ACCESS_KEY = setup.QINIU_AK;\n        qiniu.conf.SECRET_KEY = setup.QINIU_SK;\n        let bucket = setup.QINIU_BUCKET;\n\n\n        function stat() {\n            let deferred = think.defer();\n            //构建bucketmanager对象\n            var client = new qiniu.rs.Client();\n            //获取文件信息\n            client.stat(bucket, key, function(err, ret) {\n                if (!err) {\n                    console.log(ret.hash, ret.fsize, ret.putTime, ret.mimeType);\n                    deferred.resolve(ret);\n                } else {\n                    console.log(err);\n                    deferred.resolve(err);\n                }\n            });\n          return deferred.promise;\n        }\n        return await stat();\n    }\n    //音视频转码\n   async pfop(){\n       let setup = await think.cache(\"setup\");\n       qiniu.conf.ACCESS_KEY = setup.QINIU_AK;\n       qiniu.conf.SECRET_KEY = setup.QINIU_SK;\n\n\n//要转码的文件所在的空间和文件名\n       let bucket = setup.QINIU_BUCKET;\n       let  key = 'thinkjs-create-project.mp4';\n\n//转码所使用的队列名称。\n       let pipeline = 'abc';\n\n//要进行转码的转码操作。\n       let fops = \"avthumb/mp4/s/640x360/vb/1.25m\"\n\n//可以对转码后的文件进行使用saveas参数自定义命名，当然也可以不指定文件会默认命名并保存在当前空间\n        let saveas_key = qiniu.util.urlsafeBase64Encode(saved_bucket+':'+saved_key);\n        fops = fops+'|saveas/'+saveas_key;\n      // console.log(saveas_key);\n       let opts = {\n            pipeline: pipleline\n        };\n\n        var PFOP = qiniu.fop.pfop(bucket, key, fops, opts, function(err, ret) {\n            if(!err) {\n                console.log(ret);\n                // 上传成功， 处理返回值\n                console.log('curl '+'http://api.qiniu.com/status/get/prefop?id='+ret.persistentId);\n            } else {\n                // 上传失败， 处理返回代码\n                console.log(err);\n            }\n        });\n    }\n    async download(key){\n        let setup = await think.cache(\"setup\");\n        qiniu.conf.ACCESS_KEY = setup.QINIU_AK;\n        qiniu.conf.SECRET_KEY = setup.QINIU_SK;\n//构建私有空间的链接\n        let url = `http://${setup.QINIU_DOMAIN_NAME}/${key}`;\n        var policy = new qiniu.rs.GetPolicy();\n\n//生成下载链接url\n        var downloadUrl = policy.makeRequest(url);\n\n//打印下载的url\n        console.log(downloadUrl);\n        return downloadUrl;\n    }\n}"
    ]
}