{
    "version": 3,
    "sources": [
        "../../../src/common/service/qqapi.js"
    ],
    "names": [
        "init",
        "access_token",
        "openid",
        "baseUrl",
        "get_user_info",
        "think",
        "cache",
        "setup",
        "oauth_consumer_key",
        "QQ_APPID",
        "URL_GET_USERINFO",
        "getuserinfo",
        "deferred",
        "defer",
        "get",
        "res",
        "body",
        "on",
        "d",
        "push",
        "Buffer",
        "concat",
        "resolve",
        "JSON",
        "parse",
        "e",
        "console",
        "error",
        "promise",
        "service",
        "base"
    ],
    "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;AAEE;;;;mBAIAA,I,iBAAKC,Y,EAAaC,M,EAAO;AACvB;AACA,SAAKC,OAAL,GAAe,sBAAf;AACA,SAAKF,YAAL,GAAkBA,YAAlB;AACA,SAAKC,MAAL,GAAaA,MAAb;AAED,G;;mBACKE,a;2FAAcH,Y,EAAaC,M;;;;;;;qBACbG,MAAMC,KAAN,CAAY,OAAZ,C;;;AAAdC,mB;AACAC,gC,GAAqBD,MAAME,Q;AAC3BC,8B,GAAmB,KAAKP,OAAL,0CAAmD,KAAKF,YAAxD,4BAA2FO,kBAA3F,gBAAwH,KAAKN,MAA7H,C;;AACnBS,yB,GAAY,SAAZA,WAAY,CAACD,gBAAD,EAAoB;AAClC,oBAAIE,WAAWP,MAAMQ,KAAN,EAAf;AACA,gCAAMC,GAAN,CAAUJ,gBAAV,EAA4B,UAACK,GAAD,EAAS;AACnC;AACD;;AAEC,sBAAIC,OAAO,EAAX;AACAD,sBAAIE,EAAJ,CAAO,MAAP,EAAe,UAACC,CAAD,EAAO;AACpB;AACAF,yBAAKG,IAAL,CAAUD,CAAV;AACD,mBAHD;AAIAH,sBAAIE,EAAJ,CAAO,KAAP,EAAc,UAAUC,CAAV,EAAa;AACzBF,2BAAOI,OAAOC,MAAP,CAAcL,IAAd,CAAP;AACA;AACAJ,6BAASU,OAAT,CAAiBC,KAAKC,KAAL,CAAWR,IAAX,CAAjB;AACA;AACD,mBALD;AAOD,iBAhBD,EAgBGC,EAhBH,CAgBM,OAhBN,EAgBe,UAACQ,CAAD,EAAO;AACpBC,0BAAQC,KAAR,CAAcF,CAAd;AACD,iBAlBD;AAmBA,uBAAOb,SAASgB,OAAhB;AACD,e;;;qBACYjB,YAAYD,gBAAZ,C;;;;;;;;;;;;;;;;;;;;;EAvCYL,MAAMwB,OAAN,CAAcC,I",
    "file": "../../../src/common/service/qqapi.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n\n'use strict';\nimport https from 'https';\nexport default class extends think.service.base {\n  /**\n   * init\n   * @return {}         []\n   */\n  init(access_token,openid){\n    //super.init(...args);\n    this.baseUrl = \"https://graph.qq.com\";\n    this.access_token=access_token;\n    this.openid =openid;\n\n  }\n  async get_user_info(access_token,openid){\n    let setup = await think.cache(\"setup\");\n    let oauth_consumer_key = setup.QQ_APPID;\n    let URL_GET_USERINFO = this.baseUrl + `/user/get_user_info?access_token=${this.access_token}&oauth_consumer_key=${oauth_consumer_key}&openid=${this.openid}`;\n    let getuserinfo=(URL_GET_USERINFO)=>{\n      let deferred = think.defer();\n      https.get(URL_GET_USERINFO, (res) => {\n        //console.log('statusCode: ', res.statusCode);\n       // console.log('headers: ', res.headers);\n        \n        var body = [];\n        res.on('data', (d) => {\n          //process.stdout.write(d);\n          body.push(d);\n        });\n        res.on(\"end\", function (d) {\n          body = Buffer.concat(body) ;\n          //console.log(body) ;\n          deferred.resolve(JSON.parse(body));\n          //boday+=d;\n        });\n\n      }).on('error', (e) => {\n        console.error(e);\n      });\n      return deferred.promise;\n    }\n    return await getuserinfo(URL_GET_USERINFO);\n  }\n}"
    ]
}