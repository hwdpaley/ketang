{
    "version": 3,
    "sources": [
        "../../../../src/common/adapter/database/mysql.js"
    ],
    "names": [
        "init",
        "file",
        "config",
        "type",
        "http",
        "create",
        "backuppath",
        "path",
        "name",
        "filenmae",
        "part",
        "think",
        "mkdir",
        "isFile",
        "db",
        "sql",
        "host",
        "port",
        "times",
        "Date",
        "filesql",
        "appendFileSync",
        "undefined",
        "write",
        "size",
        "length",
        "states",
        "statSync",
        "session",
        "aa",
        "backup",
        "table",
        "start",
        "model",
        "query",
        "result",
        "trim",
        "count",
        "forEach",
        "obj_values",
        "row",
        "join",
        "adapter",
        "base"
    ],
    "mappings": "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",
    "file": "../../../../src/common/adapter/database/mysql.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n/**\n * base adapter\n */\nimport Fs from 'fs';\nexport default class extends think.adapter.base {\n    /**\n     * init\n     *  @param {Array}  file   [备份或还原的文件信息]\n     *  @param {Array}  config [备份配置信息]\n     *  @param {String} type   [执行类型，export - 备份数据， import - 还原数据]\n     * @return {[]}         []\n     */\n    init(file, config, type, http) {\n        super.init(http);\n        this.file = file;\n        this.config = config;\n        this.type = type;\n    }\n\n    /**\n     * 写入初始数据\n     * @return boolean true - 写入成功，false - 写入失败\n     */\n    create() {\n        let backuppath = this.config.path + this.file.name;\n        let filenmae = backuppath + '/' + this.file.name + '-' + this.file.part + '.sql';\n        think.mkdir(backuppath);\n\n        if (!think.isFile(filenmae)) {\n            let db = think.config('db');\n            let sql = \"-- -----------------------------\\n\";\n            sql += \"-- Bieber MySQL Data Transfer \\n\";\n            sql += \"-- \\n\";\n            sql += \"-- Host     : \" + db.host + \"\\n\";\n            sql += \"-- Port     : \" + db.port + \"\\n\";\n            sql += \"-- Database : \" + db.name + \"\\n\";\n            sql += \"-- \\n\";\n            sql += \"-- Part : #\" + this['part'] + \"\\n\";\n            sql += \"-- Date : \" + times(new Date(), \"s\") + \"\\n\";\n            sql += \"-- -----------------------------\\n\\n\";\n            sql += \"SET FOREIGN_KEY_CHECKS = 0;\\n\\n\";\n            let filesql = Fs.appendFileSync(filenmae, sql);\n            if (filesql == undefined) {\n                return true;\n            } else {\n                return false;\n            }\n\n        }\n    }\n\n\n    /**\n     * 写入sql语句\n     * @param {String} sql [要写入的SQL语句]\n     */\n    async write(sql) {\n\n        let size = sql.length;\n        //console.log(size)\n        let backuppath = this.config.path + this.file.name;\n        let filenmae = backuppath + '/' + this.file.name + '-' + this.file.part + '.sql';\n        // console.log(filenmae)\n        let states = Fs.statSync(filenmae)\n        this.size = states.size + size;\n        //console.log(this.size+\"-\"+this.config.part) ;\n        if (this.size > this.config.part) {//分卷\n\n            this.file.part++;\n            this.create();\n            let http = this.http;\n            //think.session(http);\n            await http.session('backup_file', this.file);\n            //await think.session('backup_file', this.file);\n\n        }\n        let aa = Fs.appendFileSync(filenmae, sql);\n\n        //console.log(aa);\n        //TODO\n    }\n\n    /**\n     * 备份表结构\n     * @param  {String}  table [表名]\n     * @param  {Integer} start [起始行数]\n     * @return {Boolean}        false - [备份失败]\n     */\n    async backup(table, start) {\n        //数据库对象\n        //console.log(think.config('db'))\n        let db = think.model('mysql', think.config('db'));\n        //备份表结构\n        if (0 == start) {\n            let result = await db.query(\"SHOW CREATE TABLE \" + table);\n            //console.log(result);\n            let sql = \"\\n\";\n            sql += \"-- -----------------------------\\n\";\n            sql += \"-- Table structure for `\" + table + \"`\\n\";\n            sql += \"-- -----------------------------\\n\";\n            sql += \"DROP TABLE IF EXISTS `\" + table + \"`;\\n\";\n            sql += trim(result[0]['Create Table']) + \";\\n\\n\";\n            //console.log(sql);\n            this.write(sql)\n            //if(false === this.write(sql)){\n            //  return false;\n            //}\n        }\n        //数据总数\n        let result = await db.query(\"SELECT COUNT(*) AS count FROM \" + table);\n        let count = result[0].count;\n        //console.log(count);\n        //备份表数据\n        if (count) {\n            //写入数据注释\n            if (0 == start) {\n                let sql = \"-- -----------------------------\\n\";\n                sql += \"-- Records of `\" + table + \"`\\n\";\n                sql += \"-- -----------------------------\\n\";\n                this.write(sql);\n                //console.log(sql);\n            }\n\n\n            //备份数据记录\n            result = await db.query(\"SELECT * FROM \" + table + \" LIMIT \" + start + \" , 1000\");\n            result.forEach(row => {\n                //console.log(obj_values(row).join(\"', '\"))\n                let sql = \"INSERT INTO `\" + table + \"` VALUES ('\" + obj_values(row).join(\"', '\") + \"');\\n\";\n                this.write(sql);\n                //console.log(sql);\n                //if(false === this.write(sql)){\n                //  return false;\n                //}\n            });\n            //还有更多数据\n            if (count > start + 1000) {\n                return [start + 1000, count];\n            }\n        }\n        //备份下一表\n        return 0;\n        //console.log(result);\n    }\n\n\n}"
    ]
}