{
    "version": 3,
    "sources": [
        "../../../src/uc/controller/order.js"
    ],
    "names": [
        "locale",
        "indexAction",
        "weblogin",
        "status",
        "param",
        "map",
        "think",
        "isEmpty",
        "assign",
        "type",
        "pay_status",
        "delivery_status",
        "is_del",
        "user_id",
        "user",
        "uid",
        "model",
        "where",
        "page",
        "order",
        "countSelect",
        "data",
        "html",
        "http",
        "desc",
        "pageNum",
        "url",
        "class",
        "text",
        "next",
        "prev",
        "total",
        "val",
        "payment",
        "channel",
        "id",
        "getField",
        "province",
        "city",
        "county",
        "end_time",
        "date_from",
        "create_time",
        "Number",
        "setup",
        "ORDER_DELAY",
        "order_id",
        "select",
        "goods",
        "numarr",
        "v",
        "prom_goods",
        "JSON",
        "parse",
        "push",
        "goods_nums",
        "extend",
        "nums",
        "eval",
        "join",
        "count",
        "nopaid",
        "receipt",
        "meta_title",
        "checkMobile",
        "userAgent",
        "isAjax",
        "format",
        "json",
        "active",
        "display",
        "controller",
        "action",
        "delorderAction",
        "res",
        "get",
        "update",
        "delete",
        "success",
        "name",
        "fail",
        "confirmreceiptAction"
    ],
    "mappings": "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",
    "file": "../../../src/uc/controller/order.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\nimport moment from \"moment\"\nmoment.locale('zh-cn');\nimport Base from './base.js';\nimport pagination from 'think-pagination';\nexport default class extends Base {\n  //我的订单\n  async indexAction() {\n    //判断是否登陆\n    await this.weblogin();\n    let status = this.param(\"status\") || null;\n    //console.log(status);\n    let map;\n\n    //当前位置\n    if (!think.isEmpty(status)) {\n      this.assign('status', status);\n    }\n    //筛选订单\n\n    if (status == 0) {//未付款的订单\n      map = {\n        type: 0,\n        pay_status: 0,\n        delivery_status: [\"!=\", 1],\n        status: [\"NOTIN\", [4, 6]],\n        is_del: 0,\n        user_id: this.user.uid,\n      }\n    } else if (status == 1) {//代收货的订单\n      //(item.pay_status == 1 or item.status ==3) and item.delivery_status != 1 and item.status != 6 and item.status != 4\n      //item.delivery_status == 1 and item.status != 6 and item.status != 4\n      // map={\n      //     status: [\"NOTIN\", [4, 6]],\n      //     delivery_status: [\"!=\", 1],\n      //     is_del: 0,\n      //     user_id: this.user.uid,\n      //     _complex:{\n      //         pay_status: 1,\n      //         status: 3,\n      //         _logic: \"or\"\n      //     }\n      // }\n      map = {\n        type: 0,\n        status: [\"NOTIN\", [4, 6]],\n        delivery_status: 1,\n        is_del: 0,\n        user_id: this.user.uid,\n      }\n    } else {\n      map = {\n        type: 0,\n        is_del: 0,\n        user_id: this.user.uid,\n      }\n    }\n\n\n    //console.log(map);\n    // this.config(\"db.nums_per_page\",20)\n    let data = await this.model(\"order\").where(map).page(this.param('page')).order(\"create_time DESC\").countSelect();\n    let html = pagination(data, this.http, {\n      desc: false, //show description\n      pageNum: 2,\n      url: '', //page url, when not set, it will auto generated\n      class: 'nomargin', //pagenation extra class\n      text: {\n        next: '下一页',\n        prev: '上一页',\n        total: 'count: ${count} , pages: ${pages}'\n      }\n    });\n    this.assign('pagination', html);\n    for (let val of data.data) {\n      switch (val.payment) {\n        case 100:\n          val.channel = \"预付款支付\";\n          break;\n        case 1001:\n          val.channel = \"货到付款\";\n          break;\n        default:\n          val.channel = await this.model(\"pingxx\").where({id: val.payment}).getField(\"title\", true);\n      }\n      val.province = await this.model(\"area\").where({id: val.province}).getField(\"name\", true);\n      val.city = await this.model(\"area\").where({id: val.city}).getField(\"name\", true);\n      val.county = await this.model(\"area\").where({id: val.county}).getField(\"name\", true);\n      //未付款订单倒计时\n      if (val.pay_status == 0) {\n        val.end_time = date_from(val.create_time + (Number(this.setup.ORDER_DELAY) * 60000))\n      }\n      //console.log(this.setup.ORDER_DELAY_BUND)\n      //查出订单里面的商品列表\n      val.goods = await this.model(\"order_goods\").where({order_id: val.id}).select();\n      let numarr=[];\n      for (let v of val.goods) {\n        v.prom_goods = JSON.parse(v.prom_goods);\n        numarr.push(v.goods_nums);\n        v = think.extend(v, v.prom_goods);\n        delete v.prom_goods;\n      }\n      //console.log(val.goods)\n      val.nums = eval(numarr.join(\"+\"));\n    }\n    //未付款统计\n    let nopaid = await this.model(\"order\").where({\n      type: 0,\n      pay_status: 0,\n      delivery_status: [\"!=\", 1],\n      status: [\"NOTIN\", [4, 6]],\n      is_del: 0,\n      user_id: this.user.uid,\n    }).count(\"id\");\n    this.assign(\"nopaid\", nopaid);\n    //未付款统计\n    let receipt = await this.model(\"order\").where({\n      type: 0,\n      status: [\"NOTIN\", [4, 6]],\n      delivery_status: 1,\n      is_del: 0,\n      user_id: this.user.uid,\n    }).count(\"id\");\n    this.assign(\"nopaid\", nopaid);\n    this.assign(\"receipt\", receipt);\n    //console.log(data.data);\n    this.assign(\"count\",data.count);\n    this.assign('list', data.data);\n    this.meta_title = \"我的订单\";\n    //判断浏览客户端\n    if (checkMobile(this.userAgent())) {\n      if(this.isAjax(\"get\")){\n        for(let v of data.data){\n          v.create_time =moment(v.create_time).format('lll')\n        }\n        return this.json(data);\n      }else {\n        this.active = \"user/index\";\n        return this.display(`mobile/${this.http.controller}/${this.http.action}`)\n      }\n    } else {\n      return this.display();\n    }\n  }\n\n  //删除订单\n  async delorderAction() {\n    //判断是否登陆\n    await this.weblogin();\n\n    let res;\n    let type = this.get(\"type\") || null;\n    if (think.isEmpty(type)) {\n      let map = {\n        id: this.get(\"id\"),\n        user_id: this.user.uid,\n        status: [\"IN\", [4, 6]]\n      }\n      res = await this.model(\"order\").where(map).update({is_del: 1});\n    } else {\n      res = await this.model(\"order\").where({id: this.get(\"id\"), user_id: this.user.uid}).delete()\n    }\n\n    if (res) {\n      return this.success({name: \"删除成功！\"});\n    } else {\n      return this.fail(\"删除失败!\");\n    }\n  }\n\n  //确认收货\n  async confirmreceiptAction() {\n    //判断是否登陆\n    await this.weblogin();\n    let map = {\n      id: this.get(\"id\"),\n      user_id: this.user.uid,\n      delivery_status: 1,\n      status: [\"NOTIN\", [4, 6]]\n    }\n    let res = await this.model(\"order\").where(map).update({status: 4});\n    if (res) {\n      return this.success({name: \"操作成功！\"});\n    } else {\n      return this.fail(\"操作失败!\");\n    }\n  }\n\n\n}"
    ]
}