{
    "version": 3,
    "sources": [
        "../../../src/uc/controller/publish.js"
    ],
    "names": [
        "indexAction",
        "weblogin",
        "cate_id",
        "get",
        "priv",
        "http",
        "error",
        "Error",
        "think",
        "statusAction",
        "model_id",
        "position",
        "group_id",
        "sortid",
        "sortval",
        "models",
        "groups",
        "model",
        "_model",
        "isEmpty",
        "get_category",
        "sort",
        "JSON",
        "parse",
        "defaultshow",
        "where",
        "select",
        "typevar",
        "val",
        "optionid",
        "find",
        "option",
        "type",
        "rules",
        "parse_type_attr",
        "choices",
        "parse_config_attr",
        "console",
        "log",
        "v",
        "id",
        "searchtxt",
        "searcharr",
        "arr",
        "split",
        "len",
        "length",
        "i",
        "obj",
        "name",
        "unit",
        "pid",
        "push",
        "assign",
        "get_parent_category",
        "nav",
        "isNumberString",
        "field",
        "data",
        "list_grid",
        "fields",
        "ngrids",
        "grids",
        "value",
        "title",
        "href",
        "indexOf",
        "values",
        "format",
        "array",
        "unique",
        "getDocumentList",
        "list",
        "pics",
        "get_pic",
        "parseDocumentList",
        "modellist",
        "modelobj",
        "get_document_model",
        "meta_title",
        "display",
        "addAction",
        "fail",
        "check_category",
        "allow_publish",
        "info",
        "category_id",
        "article",
        "get_model_attribute",
        "get_type_bycate",
        "type_list",
        "active",
        "editAction",
        "document",
        "details",
        "uid",
        "user",
        "sort_id",
        "tid",
        "fid",
        "getField",
        "tags",
        "zxmyshopAction",
        "updateAction",
        "post",
        "is_ajax",
        "ip",
        "is_login",
        "roleid",
        "addexa",
        "updates",
        "res",
        "success",
        "url",
        "map",
        "status",
        "param",
        "update_time",
        "Date",
        "valueOf",
        "Document",
        "get_sub_category",
        "subcate",
        "getSchema",
        "tablefields",
        "isArray",
        "array_diff",
        "modelName",
        "alias",
        "join",
        "table",
        "as",
        "on",
        "key",
        "array_search",
        "nsobj",
        "optionidarr",
        "valuearr",
        "qarr",
        "vv",
        "Number",
        "order",
        "page",
        "countSelect",
        "Pages",
        "adapter",
        "pages",
        "count",
        "get_all_category",
        "cate",
        "cates",
        "parr",
        "in_array",
        "approvalAction",
        "get_model",
        "is_approval",
        "modlist",
        "approvaldetailsAction",
        "approvaldelAction",
        "delete",
        "getmenuAction",
        "mold",
        "target",
        "json",
        "arr_to_tree",
        "ajaxaddtagsAction",
        "thenAdd",
        "increment",
        "rdata",
        "errno",
        "ajaxgettagsAction"
    ],
    "mappings": "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",
    "file": "../../../src/uc/controller/publish.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nimport Base from './base.js';\n\nexport default class extends Base {\n    /**\n     * index action\n     * @return {Promise} []\n     */\n    //在线投稿\n    async indexAction() {\n            await this.weblogin();\n            let cate_id = this.get('cate_id') || null;\n            //console.log(cate_id);\n            //权限控制\n            let priv = await this.priv(cate_id);\n            if (priv) {\n                this.http.error = new Error('网站禁止投稿！');\n                return think.statusAction(702, this.http);\n            }\n\n            //let [model_id=null,position=null,group_id=null,sortid=null,sortval=null]=[this.get('model_id'),this.get('position'),this.get('group_id'),this.get('sortid'),this.get('sortval')];\n\n            let model_id = this.get('model_id') || null;\n            let position = this.get('position') || null;\n            let group_id = this.get('group_id') || 0;\n            let sortid = this.get('sortid') || 0;\n            let sortval = this.get('sortval') || null;\n            let models, groups, model, _model;\n            // let groups;\n            // let model;\n            // let _model;\n            if (!think.isEmpty(cate_id)) {\n                // 获取分类信息\n                let sort = await this.model(\"category\").get_category(cate_id, 'documentsorts');\n                if (sort) {\n                    sort = JSON.parse(sort);\n                    if (sortid == 0) {\n                        sortid = sort.defaultshow;\n                    }\n                    let typevar = await this.model(\"typevar\").where({ sortid: sortid }).select();\n                    for (let val of typevar) {\n\n                        val.option = await this.model(\"typeoption\").where({ optionid: val.optionid }).find();\n                        if (val.option.type == 'select' || val.option.type == 'radio') {\n                            if (!think.isEmpty(val.option.rules)) {\n                                val.option.rules = JSON.parse(val.option.rules);\n                                val.rules = parse_type_attr(val.option.rules.choices);\n                                val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                            }\n\n                        } else if (val.option.type == 'checkbox') {\n                            if (!think.isEmpty(val.option.rules)) {\n                                val.option.rules = JSON.parse(val.option.rules);\n                                val.rules = parse_type_attr(val.option.rules.choices);\n                                console.log(val.rules);\n                                for (let v of val.rules) {\n                                    v.id = \"l>\" + v.id\n                                }\n                                val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                                //console.log(val.rules);\n                            }\n                        } else if (val.option.type == 'range') {\n                            if (!think.isEmpty(val.option.rules)) {\n                                let searchtxt = JSON.parse(val.option.rules).searchtxt;\n                                let searcharr = []\n                                if (!think.isEmpty(searchtxt)) {\n                                    let arr = searchtxt.split(\",\");\n                                    let len = arr.length;\n                                    for (var i = 0; i < len; i++) {\n                                        let obj = {}\n                                        if (!think.isEmpty(arr[i - 1])) {\n                                            if (i == 1) {\n                                                obj.id = 'd>' + arr[i];\n                                                obj.name = '低于' + arr[i] + val.option.unit;\n                                                obj.pid = 0\n                                                searcharr.push(obj);\n                                            } else {\n                                                obj.id = arr[i - 1] + '>' + arr[i];\n                                                obj.name = arr[i - 1] + \"-\" + arr[i] + val.option.unit;\n                                                obj.pid = 0\n                                                searcharr.push(obj)\n                                            }\n\n                                        }\n\n                                    }\n                                    searcharr.push({ id: 'u>' + arr[len - 1], name: '高于' + arr[len - 1] + val.option.unit, pid: 0 })\n                                }\n                                //console.log(searcharr);\n                                val.option.rules = JSON.parse(val.option.rules);\n                                val.rules = searcharr;\n                                // val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n\n                            }\n                        }\n                    }\n                    //console.log(typevar);\n                    this.assign(\"typevar\", typevar);\n                }\n                //console.log(sort);\n                this.assign(\"sort\", sort);\n                let pid = this.get(\"pid\") || 0;\n                // 获取列表绑定的模型\n                if (pid == 0) {\n                    models = await this.model(\"category\").get_category(cate_id, 'model');\n                    // 获取分组定义\n                    groups = await this.model(\"category\").get_category(cate_id, 'groups');\n                    if (groups) {\n                        groups = parse_config_attr(groups);\n                    }\n                } else { // 子文档列表\n                    models = await this.model(\"category\").get_category(cate_id, 'model_sub');\n                }\n                //获取面包屑信息\n                let nav = await this.model('category').get_parent_category(cate_id || 0);\n                this.assign('breadcrumb', nav);\n                if (think.isEmpty(model_id) && !think.isNumberString(models)) {\n\n                    // 绑定多个模型 取基础模型的列表定义\n                    model = await this.model('model').where({ name: 'document' }).find();\n                    //console.log(model);\n                } else {\n\n                    model_id = model_id ? model_id : models;\n                    //获取模型信息\n                    model = await this.model('model').where({ id: ['IN', [model_id]] }).find();\n\n                    if (think.isEmpty(model['list_grid'])) {\n                        let data = await this.model('model').field('list_grid').where({ name: 'document' }).find();\n                        model.list_grid = data.list_grid;\n                        //console.log(33);\n                    }\n                }\n                this.assign('model', models.split(\",\"))\n                _model = models.split(\",\")\n            } else { // 子文档列表\n                //获取模型信息\n                model = await this.model(\"model\").where({ name: \"document\" }).find();\n                model_id = null;\n                cate_id = 0;\n                this.assign('model', null);\n                _model = null;\n            }\n            //解析列表规则\n            let fields = [];\n            let ngrids = [];\n            //console.log(model);\n            let grids = model.list_grid.split(\"\\r\\n\");\n            for (let value of grids) {\n                //字段:标题:链接\n                let val = value.split(\":\");\n                //支持多个字段显示\n                let field = val[0].split(\",\");\n                value = { field: field, title: val[1] }\n\n                if (!think.isEmpty(val[2])) {\n                    value.href = val[2];\n                }\n                // console.log(222);\n                if (val[1]) {\n                    if (val[1].indexOf('|') > -1) {\n                        // 显示格式定义\n                        [values.title, values.format] = val[1].split('|');\n                    }\n                }\n                //console.log(field);\n                for (let val of field) {\n                    let array = val.split('|');\n                    fields.push(array[0]);\n                }\n                ngrids.push(value);\n            }\n            // 文档模型列表始终要获取的数据字段 用于其他用途\n            fields.push('category_id');\n            fields.push('model_id');\n            fields.push('pid');\n            //过滤重复字段\n            fields = unique(fields);\n            //console.log(fields);\n            // console.log(model_id);\n            let list = await this.getDocumentList(cate_id, model_id, position, fields, group_id, sortval, sortid);\n            for (let val of list) {\n                if (val.pics) {\n                    //val.pics = await get_pics_one(val.pics,\"path\");\n                    val.pics = await get_pic(val.pics.split(\",\")[0], 1, 100)\n                } else {\n                    val.pics = '/static/noimg.jpg';\n                }\n            }\n            // console.log(list);\n            list = await this.parseDocumentList(list, model_id);\n            //获取模型信息\n            let modellist = [];\n            //console.log(111111111)\n            if (think.isEmpty(_model)) {\n                modellist = null;\n            } else {\n                for (let val of _model) {\n                    let modelobj = {}\n                    modelobj.id = val;\n                    modelobj.title = await this.model(\"model\").get_document_model(val, \"title\");\n                    modellist.push(modelobj);\n                }\n            }\n            this.meta_title = \"在线投稿\";\n            this.assign('modellist', modellist);\n            this.assign('cate_id', cate_id);\n            this.assign('model_id', model_id);\n            this.assign('group_id', group_id);\n            this.assign('sortid', sortid);\n            this.assign('position', position);\n            this.assign('groups', groups);\n            this.assign('list', list);\n            this.assign('list_grids', ngrids);\n            this.assign('model_list', model);\n            console.log(\"list=============\" + JSON.stringify(list));\n            console.log(\"list_grids=============\" + JSON.stringify(ngrids));\n            return this.display();\n\n        }\n        /**\n         * 新增投稿\n         */\n    async addAction() {\n        await this.weblogin();\n        let cate_id = this.get(\"cate_id\") || 0;\n        if (think.isEmpty(cate_id)) {\n            console.log(\"null.    ----------\");\n        }\n        //权限控制\n        let priv = await this.priv(cate_id);\n        if (priv) {\n            this.http.error = new Error('您所在的会员组,禁止在本栏目投稿！');\n            return think.statusAction(702, this.http);\n        }\n        let model_id = this.get(\"model_id\") || 0;\n        let group_id = this.get(\"group_id\") || '';\n        let sortid = this.get('sortid') || 0;\n        console.log(\"cate_id,model_id,group_id,sortid=====\" + cate_id + \",\" + model_id + \",\" + group_id + \",\" + sortid);\n        think.isEmpty(cate_id) && this.fail(\"参数不能为空\");\n        think.isEmpty(model_id) && this.fail(\"该分类未绑定模型\");\n        // 获取分组定义\n        let groups = await this.model(\"category\").get_category(cate_id, 'groups');\n        if (groups) {\n            groups = parse_config_attr(groups);\n        }\n        // 获取分类信息\n        let sort = await this.model(\"category\").get_category(cate_id, 'documentsorts');\n        if (sort) {\n            sort = JSON.parse(sort);\n            if (sortid == 0) {\n                sortid = sort.defaultshow;\n            }\n            let typevar = await this.model(\"typevar\").where({ sortid: sortid }).select();\n            for (let val of typevar) {\n\n                val.option = await this.model(\"typeoption\").where({ optionid: val.optionid }).find();\n                if (val.option.type == 'select') {\n                    if (!think.isEmpty(val.option.rules)) {\n                        val.option.rules = JSON.parse(val.option.rules);\n                        val.rules = parse_type_attr(val.option.rules.choices);\n                        val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                    }\n\n                } else if (val.option.type == \"radio\" || val.option.type == \"checkbox\") {\n                    if (!think.isEmpty(val.option.rules)) {\n                        val.option.rules = JSON.parse(val.option.rules);\n                        val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                    }\n                } else {\n                    if (!think.isEmpty(val.option.rules)) {\n                        val.option.rules = JSON.parse(val.option.rules);\n                    }\n                }\n            }\n            //console.log(typevar);\n            this.assign(\"typevar\", typevar);\n        }\n        //console.log(sort);\n        this.assign(\"sort\", sort);\n        //检查该分类是否允许发布\n        let allow_publish = await this.model(\"category\").check_category(cate_id);\n        //console.log(allow_publish);\n        !allow_publish && this.fail(\"该分类不允许发布内容\");\n\n        //获取当先的模型信息\n        let model = await this.model(\"model\").get_document_model(model_id);\n\n        //处理结果\n        let info = {};\n        info.pid = this.get(\"pid\") ? this.get(\"pid\") : 0;\n        info.model_id = model_id;\n        info.category_id = cate_id;\n        info.group_id = group_id;\n\n        if (info.pid) {\n            let article = await this.model(\"document\").field('id,title,type').find(info.pid);\n            this.assign(\"article\", article);\n        }\n        //获取表单字段排序\n        let fields = await this.model(\"attribute\").get_model_attribute(model.id, true);\n        think.log(fields);\n        //获取当前分类文档的类型\n        let type_list = await this.model(\"category\").get_type_bycate(cate_id);\n        //console.log(type_list);\n        //获取面包屑信息\n        let nav = await this.model('category').get_parent_category(cate_id);\n        //console.log(model);\n        this.assign('groups', groups);\n        this.assign('breadcrumb', nav);\n        this.assign('info', info);\n        this.assign('fields', fields);\n        this.assign('type_list', type_list);\n        this.assign('model', model);\n        this.meta_title = '新增' + model.title;\n        this.active = \"admin/article/index\";\n        console.log('add------------');\n        return this.display();\n    }\n\n    //编辑文档\n    async editAction() {\n            await this.weblogin();\n            let id = this.get('id') || \"\";\n            console.log(\"id==========,\" + id);\n            let sortid = this.get('sortid') || 0;\n            if (think.isEmpty(id)) {\n                this.fail(\"参数不能为空\");\n            }\n            //获取详细数据；\n            let document = this.model(\"document\")\n            let data = await document.details(id);\n            //安全验证\n            if (data.uid != this.user.uid) {\n                this.http.error = new Error('只能编辑自己的稿件哦(*^_^*)!');\n                return think.statusAction(702, this.http);\n            }\n            //let model =  this.model(\"model\").getmodel(2);\n            if (data.pid != 0) {\n                //获取上级文档\n                let article = document.field(\"id,title,type\").find(data.pid);\n                this.assign('article', article);\n            }\n            let model = await this.model(\"model\").get_document_model(data.model_id);\n\n            // 获取分组定义\n            let groups = await this.model(\"category\").get_category(data.category_id, 'groups');\n            if (groups) {\n                groups = parse_config_attr(groups);\n            }\n            this.assign('groups', groups);\n            // 获取分类信息\n            let sort = await this.model(\"category\").get_category(data.category_id, 'documentsorts');\n            if (sort) {\n                sort = JSON.parse(sort);\n                if (sortid != 0) {\n                    data.sort_id = sortid;\n                } else if (data.sort_id == 0) {\n                    data.sort_id = sort.defaultshow;\n                }\n                let typevar = await this.model(\"typevar\").where({ sortid: data.sort_id }).select();\n                for (let val of typevar) {\n\n                    val.option = await this.model(\"typeoption\").where({ optionid: val.optionid }).find();\n                    if (val.option.type == 'select') {\n                        if (!think.isEmpty(val.option.rules)) {\n                            val.option.rules = JSON.parse(val.option.rules);\n                            val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                            val.option.value = await this.model(\"typeoptionvar\").where({ sortid: data.sort_id, tid: data.id, fid: data.category_id, optionid: val.option.optionid }).getField(\"value\", true) || \"\";\n                        }\n\n                    } else if (val.option.type == \"radio\" || val.option.type == \"checkbox\") {\n                        if (!think.isEmpty(val.option.rules)) {\n                            val.option.rules = JSON.parse(val.option.rules);\n                            val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                            val.option.value = await this.model(\"typeoptionvar\").where({ sortid: data.sort_id, tid: data.id, fid: data.category_id, optionid: val.option.optionid }).getField(\"value\", true) || \"\";\n                        }\n                    } else {\n                        if (!think.isEmpty(val.option.rules)) {\n                            val.option.rules = JSON.parse(val.option.rules);\n                            val.option.value = await this.model(\"typeoptionvar\").where({ sortid: data.sort_id, tid: data.id, fid: data.category_id, optionid: val.option.optionid }).getField(\"value\", true) || \"\";\n                        }\n                    }\n                }\n                // console.log(typevar);\n                this.assign(\"typevar\", typevar);\n            }\n            //console.log(sort);\n            this.assign(\"sort\", sort);\n            //获取表单字段排序\n            let fields = await this.model(\"attribute\").get_model_attribute(model.id, true);\n            this.assign('fields', fields);\n            //获取当前分类文档的类型\n            let type_list = await this.model(\"category\").get_type_bycate(data.category_id)\n                //获取suk tags\n            let tags = await this.model('tags').where({ model_id: data.model_id }).select();\n            this.assign('tags', tags);\n            //获取面包屑信息\n            let nav = await this.model('category').get_parent_category(data.category_id);\n            //console.log(model);\n            this.assign('breadcrumb', nav);\n            //console.log(model);\n            this.assign('type_list', type_list);\n            this.meta_title = '编辑' + model.title;\n            this.active = \"admin/article/index\";\n            this.assign({\n                \"navxs\": true,\n            });\n            //console.log(data);\n            this.assign('data', data);\n            this.assign('model_id', data.model_id);\n            this.assign('model', model);\n            this.display();\n        }\n   //编辑文档\n    async zxmyshopAction() {\n            await this.weblogin();\n            let id = this.get('id') || \"\";\n            console.log(\"id==========,\" + id);\n            let sortid = this.get('sortid') || 0;\n            if (think.isEmpty(id)) {\n                this.fail(\"参数不能为空\");\n            }\n            //获取详细数据；\n            let document = this.model(\"document\")\n            let data = await document.details(id);\n            //安全验证\n            if (data.uid != this.user.uid) {\n                this.http.error = new Error('只能编辑自己的稿件哦(*^_^*)!');\n                return think.statusAction(702, this.http);\n            }\n            //let model =  this.model(\"model\").getmodel(2);\n            if (data.pid != 0) {\n                //获取上级文档\n                let article = document.field(\"id,title,type\").find(data.pid);\n                this.assign('article', article);\n            }\n            let model = await this.model(\"model\").get_document_model(data.model_id);\n\n            // 获取分组定义\n            let groups = await this.model(\"category\").get_category(data.category_id, 'groups');\n            if (groups) {\n                groups = parse_config_attr(groups);\n            }\n            this.assign('groups', groups);\n            // 获取分类信息\n            let sort = await this.model(\"category\").get_category(data.category_id, 'documentsorts');\n            if (sort) {\n                sort = JSON.parse(sort);\n                if (sortid != 0) {\n                    data.sort_id = sortid;\n                } else if (data.sort_id == 0) {\n                    data.sort_id = sort.defaultshow;\n                }\n                let typevar = await this.model(\"typevar\").where({ sortid: data.sort_id }).select();\n                for (let val of typevar) {\n\n                    val.option = await this.model(\"typeoption\").where({ optionid: val.optionid }).find();\n                    if (val.option.type == 'select') {\n                        if (!think.isEmpty(val.option.rules)) {\n                            val.option.rules = JSON.parse(val.option.rules);\n                            val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                            val.option.value = await this.model(\"typeoptionvar\").where({ sortid: data.sort_id, tid: data.id, fid: data.category_id, optionid: val.option.optionid }).getField(\"value\", true) || \"\";\n                        }\n\n                    } else if (val.option.type == \"radio\" || val.option.type == \"checkbox\") {\n                        if (!think.isEmpty(val.option.rules)) {\n                            val.option.rules = JSON.parse(val.option.rules);\n                            val.option.rules.choices = parse_config_attr(val.option.rules.choices);\n                            val.option.value = await this.model(\"typeoptionvar\").where({ sortid: data.sort_id, tid: data.id, fid: data.category_id, optionid: val.option.optionid }).getField(\"value\", true) || \"\";\n                        }\n                    } else {\n                        if (!think.isEmpty(val.option.rules)) {\n                            val.option.rules = JSON.parse(val.option.rules);\n                            val.option.value = await this.model(\"typeoptionvar\").where({ sortid: data.sort_id, tid: data.id, fid: data.category_id, optionid: val.option.optionid }).getField(\"value\", true) || \"\";\n                        }\n                    }\n                }\n                // console.log(typevar);\n                this.assign(\"typevar\", typevar);\n            }\n            //console.log(sort);\n            this.assign(\"sort\", sort);\n            //获取表单字段排序\n            let fields = await this.model(\"attribute\").get_model_attribute(model.id, true);\n            this.assign('fields', fields);\n            //获取当前分类文档的类型\n            let type_list = await this.model(\"category\").get_type_bycate(data.category_id)\n                //获取suk tags\n            let tags = await this.model('tags').where({ model_id: data.model_id }).select();\n            this.assign('tags', tags);\n            //获取面包屑信息\n            let nav = await this.model('category').get_parent_category(data.category_id);\n            //console.log(model);\n            this.assign('breadcrumb', nav);\n            //console.log(model);\n            this.assign('type_list', type_list);\n            this.meta_title = '编辑' + model.title;\n            this.active = \"admin/article/index\";\n            this.assign({\n                \"navxs\": true,\n            });\n            //console.log(data);\n            this.assign('data', data);\n            this.assign('model_id', data.model_id);\n            this.assign('model', model);\n            this.display();\n        }\n        /**\n         * 更新或者添加数据\n         */\n    async updateAction() {\n        await this.weblogin();\n        let data = this.post();\n        //绑定发布者id\n        data.uid = this.user.uid;\n        //安全验证\n        if (data.is_ajax != 'true') {\n            return this.fail(\"非法提交！\");\n        }\n        //验证权限\n        if (think.isEmpty(data.id)) { //发布\n            data.uid = this.user.uid;\n            data.ip = this.ip();\n            //检查本栏目发布是否需要审核\n            let roleid = await this.model(\"member\").where({ id: this.is_login }).getField('groupid', true);\n            let addexa = await this.model(\"category_priv\").priv(data.category_id, roleid, 'addexa');\n            // if (addexa) {\n            //     let addp = await this.model(\"approval\").adds(data.model_id, this.user.uid, data.title, data);\n            //     if (addp) {\n            //         return this.success({ name: \"发布成功, 请等待管理员审核...\", url: '/uc/publish/index/cate_id/' + data.category_id });\n            //     } else {\n            //         return this.fail(\"操作失败！\");\n            //     }\n            // }\n        } else { //修改\n            data.uid = this.user.uid;\n            data.ip = this.ip();\n            //检查本栏目编辑是否需要审核\n            console.log();\n            let roleid = await this.model(\"member\").where({ id: this.is_login }).getField('groupid', true);\n            let addexa = await this.model(\"category_priv\").priv(data.category_id, roleid, 'editexa');\n            console.log(\"addexa-------------\"+addexa+\",\"+data.category_id);\n            // if (addexa) {\n            //     let addp = await this.model(\"approval\").adds(data.model_id, this.user.uid, data.title, data);\n            //     if (addp) {\n            //         return this.success({ name: \"编辑成功, 请等待管理员审核...\", url: '/uc/publish/index/cate_id/' + data.category_id });\n            //     } else {\n            //         return this.fail(\"操作失败！\");\n            //     }\n            // }\n        }\n        //console.log(data);\n        //return false;\n        let res = await this.model('document').updates(data);\n        // console.log(\"edit data=====\"+JSON.stringify(data));\n\n        \n        // let res ={ data:\n        // { name: '',\n        //     title: '1111',\n        //     description: '',\n        //     type: '2',\n        //     cover_id: '',\n        //     file: '',\n        //     link_id: '0',\n        //     display: '1',\n        //     deadline: '',\n        //     view: '0',\n        //     comment: '0',\n        //     level: '0',\n        //     create_time: 1470888723186,\n        //     template: '',\n        //     bookmark: '0',\n        //     id: null,\n        //     pid: '0',\n        //     model_id: '2',\n        //     category_id: '39',\n        //     uid: 2,\n        //     is_ajax: 'true',\n        //     update_time: 1470888723186,\n        //     status: 1 },\n        //     id: 248 }\n        //console.log(res);\n        if (res) {\n            //行为记录\n            if (!res.data.id) {\n                //await this.model(\"action\").log(\"add_document\", \"document\", res.id, this.user.uid, this.ip(), this.http.url);//添加行为日志\n                return this.success({ name: \"添加成功\", url: \"/uc/\" + res.data.category_id });\n            } else {\n                return this.success({ name: \"更新成功\", url: \"/uc\" });\n            }\n\n        } else {\n            return this.fail(\"操作失败！\");\n        }\n\n\n    }\n\n    /**\n     * 默认文档列表方法\n     * @param integer $cate_id 分类id\n     * @param integer $model_id 模型id\n     * @param integer $position 推荐标志\n     * @param mixed $field 字段列表\n     * @param integer $group_id 分组id\n     */\n    async getDocumentList(cate_id, model_id, position, field, group_id, sortval, sortid) {\n            //console.log(2222222);\n            /* 查询条件初始化 */\n            cate_id = cate_id || 0, field = field || true;\n            let map = {};\n            //获取当前用户的信息\n            map.uid = this.user.uid;\n            let status;\n            if (!think.isEmpty(this.get('title'))) {\n                map.title = ['like', '%' + this.param('title') + '%'];\n            }\n            if (!think.isEmpty(this.get('status'))) {\n                map.status = this.param('status');\n                status = map.status;\n            } else {\n                status = null;\n                map.status = ['IN', '0,1,2'];\n            }\n            if (!think.isEmpty(this.get('time-start'))) {\n                map.update_time = { '>=': new Date(this.param('time-start').valueOf()) };\n            }\n            if (!think.isEmpty(this.get('time-end'))) {\n                map.update_time = { '<=': 24 * 60 * 60 + new Date(this.param('time-end').valueOf()) };\n            }\n            if (!think.isEmpty(this.get('nickname'))) {\n                map.uid = await this.model('member').where({ 'nickname': this.param('nickname') }).getField('uid');\n            }\n\n            // 构建列表数据\n            let Document = this.model('document');\n\n            if (cate_id) {\n                //获取当前分类的所有子栏目\n                let subcate = await this.model('category').get_sub_category(cate_id);\n                // console.log(subcate);\n                subcate.push(cate_id);\n                map.category_id = ['IN', subcate];\n            }\n            // console.log(map);\n            map.pid = this.param('pid') || 0;\n            //console.log(map.pid);\n            if (map.pid != 0) { // 子文档列表忽略分类\n                delete map.category_id;\n            }\n\n            //console.log(array_diff(tablefields,field));\n            if (!think.isEmpty(model_id)) {\n                map.model_id = model_id;\n                await Document.select();\n                let tablefields = Object.keys(await Document.getSchema());\n                //console.log(array_diff(tablefields,field));\n                // console.log(field);\n                //return\n                if (think.isArray(field) && array_diff(tablefields, field)) {\n                    let modelName = await this.model('model').where({ id: model_id }).getField('name');\n                    //console.log('__DOCUMENT_'+modelName[0].toUpperCase()+'__ '+modelName[0]+' ON DOCUMENT.id='+modelName[0]+'.id');\n                    // let sql = Document.parseSql(sql)\n                    //console.log(`${this.config('db.prefix')}document_${modelName[0]} ${modelName[0]} ON DOCUMENT.id=${modelName[0]}.id`);\n                    // return\n                    //Document.join('__DOCUMENT_'+modelName[0].toUpperCase()+'__ '+modelName[0]+' ON DOCUMENT.id='+modelName[0]+'.id');\n                    //Document.alias('DOCUMENT').join(`${this.config('db.prefix')}document_${modelName[0]} ${modelName[0]} ON DOCUMENT.id=${modelName[0]}.id`);\n                    //console.log(3333333333);\n                    Document.alias('DOCUMENT').join({\n                        table: `document_${modelName[0]}`,\n                        join: \"inner\",\n                        as: modelName[0],\n                        on: [\"id\", \"id\"]\n                    })\n                    let key = array_search(field, 'id');\n                    //console.log(key)\n                    if (false !== key) {\n                        delete field[key];\n                        field[key] = 'DOCUMENT.id';\n                    }\n                }\n            }\n            //console.log(field);\n            //console.log(1111111);\n            if (!think.isEmpty(position)) {\n                map[1] = \"position & {$position} = {$position}\";\n            }\n            if (!think.isEmpty(group_id)) {\n                map['group_id'] = group_id;\n            }\n            if (!think.isEmpty(sortid)) {\n                map.sort_id = [\"IN\", [sortid, 0]];\n            }\n            let nsobj = {};\n            if (!think.isEmpty(sortval)) {\n                sortval = sortval.split(\"|\");\n                nsobj = {}\n                let optionidarr = [];\n                let valuearr = [];\n                for (let v of sortval) {\n                    let qarr = v.split(\"_\");\n                    nsobj[qarr[0]] = qarr[1];\n                    if (qarr[1] != 0) {\n                        let vv = qarr[1].split(\">\");\n                        //console.log(vv);\n                        if (vv[0] == \"d\" && !think.isEmpty(vv[1])) {\n                            map[\"t.\" + qarr[0]] = [\"<\", vv[1]];\n                        } else if (vv[0] == \"u\" && !think.isEmpty(vv[1])) {\n                            map[\"t.\" + qarr[0]] = [\">\", vv[1]];\n                        } else if (vv[0] == \"l\" && !think.isEmpty(vv[1])) {\n                            map[\"t.\" + qarr[0]] = [\"like\", `%\"${vv[1]}\"%`];\n                        } else if (!think.isEmpty(vv[0]) && !think.isEmpty(vv[1])) {\n                            map[\"t.\" + qarr[0]] = [\"BETWEEN\", Number(vv[0]), Number(vv[1])];\n                        } else {\n                            map[\"t.\" + qarr[0]] = qarr[1];\n                        }\n\n                    }\n                }\n                map.fid = cate_id;\n                // where.optionid = [\"IN\",optionidarr];\n                // where['value'] = [\"IN\",valuearr];\n                // let type= await this.model(\"typeoptionvar\").where(where).select();\n                //  console.log(type);\n                // console.log(map);\n            }\n            //console.log(map);\n            let list;\n            if (!think.isEmpty(sortval)) {\n                list = await Document.alias('DOCUMENT').join({\n                    table: \"type_optionvalue\" + sortid,\n                    join: \"left\", // 有 left,right,inner 3 个值\n                    as: \"t\",\n                    on: [\"id\", \"tid\"]\n\n                }).where(map).order('level DESC,DOCUMENT.id DESC').field(field.join(\",\")).page(this.get(\"page\"), 20).countSelect();\n            } else {\n                list = await Document.alias('DOCUMENT').where(map).order('level DESC,DOCUMENT.id DESC').field(field.join(\",\")).page(this.get(\"page\"), 20).countSelect();\n            }\n            //let list=await this.model('document').where(map).order('level DESC').field(field.join(\",\")).page(this.get(\"page\")).countSelect();\n            let Pages = think.adapter(\"pages\", \"page\"); //加载名为 dot 的 Template Adapter\n            let pages = new Pages(this.http); //实例化 Adapter\n            let page = pages.pages(list);\n\n\n            if (map['pid'] != 0) {\n                // 获取上级文档\n                let article = await Document.field('id,title,type').find(map['pid']);\n                this.assign('article', article);\n                // console.log(article);\n            }\n\n            //检查该分类是否允许发布内容\n            let allow_publish = await this.model(\"category\").get_category(cate_id, 'allow_publish');\n            this.assign(\"nsobj\", nsobj);\n            this.assign('_total', list.count); //该分类下的文档总数\n            this.assign('pagerData', page); //分页展示使用\n            this.assign('status', status);\n            this.assign('allow', allow_publish);\n            this.assign('pid', map.pid);\n            //console.log(list.data);\n            this.meta_title = '文档列表';\n            return list.data;\n        }\n        //权限验证\n    async priv(cate_id) {\n        let cate = cate_id || await this.model(\"category\").get_all_category();\n        let roleid = await this.model(\"member\").where({ id: this.user.uid }).getField('groupid', true);\n        let cates = [];\n        if (cate_id) {\n            let priv = await this.model(\"category_priv\").priv(cate_id, roleid, 'add');\n            if (priv == 1) {\n                cates.push(priv)\n            }\n        } else {\n            // let priv = await this.model(\"category_priv\").where({catid:39,is_admin:0,roleid:2,action:'add'}).select();\n            // console.log(priv);\n            //前台投稿分类\n            //TODO 权限控制(管理员)\n            let parr = [];\n            for (let val of cate) {\n                let priv = await this.model(\"category_priv\").priv(val.id, roleid, 'add');\n                val.priv = priv\n                if (priv == 1 && val.pid != 0) {\n                    parr.push(val.pid)\n                }\n            }\n\n            if (think.isEmpty(parr)) {\n                cates = cate;\n            } else {\n\n                for (let val of cate) {\n                    if (in_array(val.id, parr)) {\n                        val.priv = 1\n                    }\n                }\n\n                for (let val of cate) {\n                    if (val.priv == 1) {\n                        cates.push(val);\n                    }\n                }\n            }\n        }\n\n\n\n        return think.isEmpty(cates)\n    }\n\n    /**\n     * 待审稿件\n     * @returns {Promise.<void>}\n     */\n    async approvalAction() {\n            let map = {};\n            map.uid = this.user.uid;\n            if (!think.isEmpty(this.get(\"model\"))) {\n                map.model = this.get(\"model\");\n            }\n            let list = await this.model(\"approval\").where(map).page(this.get('page'), 20).order('time DESC').countSelect();\n            let Pages = think.adapter(\"pages\", \"page\"); //加载名为 dot 的 Template Adapter\n            let pages = new Pages(this.http); //实例化 Adapter\n            let page = pages.pages(list);\n            this.assign('pagerData', page); //分页展示使用\n            this.assign('list', list);\n            let modlist = await this.model(\"model\").get_model(null, null, { is_approval: 1 });\n            for (let val of modlist) {\n                val.count = await this.model(\"approval\").where({ model: val.id }).count();\n            }\n            //console.log(modlist);\n            this.assign(\"model\", modlist);\n            this.assign(\"count\", await this.model(\"approval\").where({ uid: this.user.uid }).count())\n            this.meta_title = \"待审稿件\";\n            return this.display();\n        }\n        /**\n         * 查看待审稿件详情\n         */\n    async approvaldetailsAction() {\n        let id = this.get(\"id\");\n        let details = await this.model(\"approval\").where({ uid: this.user.uid }).find(id);\n        let info = JSON.parse(details.data);\n        this.assign(\"info\", info)\n        this.meta_title = \"查看详情\";\n        return this.display();\n    }\n\n    /**\n     * 删除撤销审核\n     *\n     */\n    async approvaldelAction() {\n            let id = this.get(\"id\");\n            let res = await this.model(\"approval\").where({ uid: this.user.uid, id: id }).delete();\n            if (res) {\n                return this.success({ name: \"删除成功!\" });\n            } else {\n                return this.fail(\"操作失败!\");\n            }\n        }\n        /**\n         * 显示左边菜单，进行权限控制\n         * @author\n         */\n\n    async getmenuAction() {\n            let cate = await this.model(\"category\").get_all_category({ mold: 0 });\n            let roleid = await this.model(\"member\").where({ id: this.user.uid }).getField('groupid', true);\n            // let priv = await this.model(\"category_priv\").where({catid:39,is_admin:0,roleid:2,action:'add'}).select();\n            // console.log(priv);\n            //前台投稿分类\n            //TODO 权限控制(管理员)\n            let parr = [];\n            for (let val of cate) {\n                val.url = `/uc/publish/index/cate_id/${val.id}`;\n                val.target = '_self';\n                let priv = await this.model(\"category_priv\").priv(val.id, roleid, 'add');\n                val.priv = priv\n                if (priv == 1 && val.pid != 0) {\n                    parr.push(val.pid)\n                }\n            }\n            let cates = [];\n            if (think.isEmpty(parr)) {\n                for (let val of cate) {\n                    if (val.priv == 1) {\n                        cates.push(val);\n                    }\n                }\n            } else {\n\n                for (let val of cate) {\n                    if (in_array(val.id, parr)) {\n                        val.priv = 1\n                    }\n                }\n\n                for (let val of cate) {\n                    if (val.priv == 1) {\n                        cates.push(val);\n                    }\n                }\n            }\n\n            //console.log(cates);\n            //think.log(cate);\n            return this.json(arr_to_tree(cates, 0))\n        }\n        //ajax添加tags\n    async ajaxaddtagsAction() {\n        let data = this.post();\n        data.model_id = Number(data.model_id);\n        let model = this.model(\"tags\");\n        let res = await model.where({ name: data.name }).thenAdd(data);\n        if (res.type == \"exist\") {\n            await model.where({ id: res.id }).increment('num');\n            return this.fail(\"已经存在，不要重复添加，请直接选择！\")\n        }\n        let rdata = {\n            errno: 0,\n            id: res.id,\n            name: data.name\n        }\n        return this.json(rdata);\n    }\n    async ajaxgettagsAction() {\n        let map = this.get();\n        let model = this.model(\"tags\");\n        let res = await model.where(map).select();\n        return this.json(res);\n    }\n\n}\n"
    ]
}