{
    "version": 3,
    "sources": [
        "../../../src/uc/controller/qq.js"
    ],
    "names": [
        "indexAction",
        "setup",
        "IS_QQ_LOGIN",
        "http",
        "error",
        "Error",
        "think",
        "statusAction",
        "is_login",
        "redirect",
        "display",
        "loginresultAction",
        "res",
        "get",
        "qqapi",
        "service",
        "qq",
        "access_token",
        "openid",
        "get_user_info",
        "userinfo",
        "model",
        "where",
        "find",
        "qq_user",
        "isEmpty",
        "add",
        "update",
        "uid",
        "filePath",
        "RESOURCE_PATH",
        "mkdir",
        "isFile",
        "spiderImage",
        "figureurl_qq_2",
        "figureurl_qq_1",
        "id",
        "getField",
        "last_login_time",
        "qq_userInfo",
        "nickname",
        "session",
        "autoLogin",
        "ip",
        "qqloginAction",
        "assign",
        "meta_title",
        "checkMobile",
        "userAgent",
        "controller",
        "action",
        "organizingAction",
        "data",
        "post",
        "username",
        "fail",
        "ltrim",
        "mobile",
        "email",
        "password",
        "password2",
        "status",
        "reg_time",
        "Date",
        "valueOf",
        "reg_ip",
        "_ip2int",
        "encryptPassword",
        "reg",
        "headimgurl",
        "console",
        "log",
        "wx_userInfo",
        "success",
        "name",
        "url",
        "logonbindingAction",
        "signin",
        "qq_info",
        "imgUrl",
        "deferred",
        "defer",
        "imgData",
        "setEncoding",
        "on",
        "chunk",
        "writeFileSync",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../../src/uc/controller/qq.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nimport Base from './base.js';\nimport http from 'http';\nimport fs from 'fs';\nexport default class extends Base {\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  /**qq登陆回掉地址 */\n  indexAction(){\n    //auto render template file index_index.html\n    if(this.setup.IS_QQ_LOGIN == 0){\n      this.http.error = new Error('没有开启QQ登陆，请到后台开启！');\n      return think.statusAction(702, this.http);\n    }\n    if(this.is_login){\n      this.redirect('/uc/index')\n    }\n    return this.display();\n  }\n  /**获取qq登陆信息 */\n  async loginresultAction(){\n    if(this.setup.IS_QQ_LOGIN == 0){\n      this.http.error = new Error('没有开启QQ登陆，请到后台开启！');\n      return think.statusAction(702, this.http);\n    }\n    if(this.is_login){\n      this.redirect('/uc/index')\n    }\n    let res = this.get();\n    let qqapi = think.service(\"qqapi\");\n    let qq = new qqapi(res.access_token,res.openid);\n    let userinfo =await qq.get_user_info();\n    let qq_user=await this.model(\"qq_user\").where({openid:res.openid}).find();\n    if(think.isEmpty(qq_user)){\n      userinfo.openid=res.openid;\n      //think.log(userinfo);\n      await this.model(\"qq_user\").add(userinfo);\n      this.redirect(`/uc/qq/qqlogin/id/${res.openid}`);\n    }else {\n      await this.model(\"qq_user\").where({openid:res.openid}).update(userinfo);\n      //检查qq号是否跟网站会员绑定\n      if(think.isEmpty(qq_user.uid)){\n        //没绑定跳转绑定页面\n        this.redirect(`/uc/qq/qqlogin/id/${res.openid}`);\n\n      }else {\n        //更qq信头像\n        let filePath=think.RESOURCE_PATH + '/upload/avatar/' + qq_user.uid;\n        think.mkdir(filePath);\n        //如果没有用户没有图像，使用QQ头像\n        if(!think.isFile(filePath+'/avatar.png')){\n          await this.spiderImage(userinfo.figureurl_qq_2||userinfo.figureurl_qq_1,filePath+'/avatar.png')\n        }\n        //绑定直接登陆\n        let last_login_time = await this.model(\"member\").where({id:qq_user.uid}).getField(\"last_login_time\",true);\n        let qq_userInfo = {\n          'uid': qq_user.uid,\n          'username': userinfo.nickname,\n          'last_login_time': last_login_time,\n        };\n        await this.session('webuser', qq_userInfo);\n        await this.model(\"member\").autoLogin({id:qq_user.uid}, this.ip());//更新用户登录信息，自动登陆\n        this.redirect(\"/uc/index\");\n      }\n    }\n  }\n  //qq用户绑定页面\n  async qqloginAction(){\n    if(this.setup.IS_QQ_LOGIN == 0){\n      this.http.error = new Error('没有开启QQ登陆，请到后台开启！');\n      return think.statusAction(702, this.http);\n    }\n    if(this.is_login){\n      this.redirect('/uc/index')\n    }\n    let openid = this.get(\"id\");\n    let qq_user=await this.model(\"qq_user\").where({openid:openid}).find();\n    this.assign(\"qq_user\",qq_user);\n    this.meta_title=\"账号绑定\"\n    if(checkMobile(this.userAgent())){\n      return this.display(`mobile/${this.http.controller}/${this.http.action}`);\n    }else{\n      return this.display();\n    }\n  }\n  /**完善资料绑定 */\n  async organizingAction(){\n    let data = this.post();\n    //验证\n    let res;\n    if(think.isEmpty(data.username)){\n      return this.fail(\"用户昵称不能为空！\");\n    }else{\n      res = await this.model(\"member\").where({username:ltrim(data.username)}).find();\n      if(!think.isEmpty(res)){\n        return this.fail(\"用户昵称已存在，请重新填写！\")\n      }\n    }\n    if(think.isEmpty(data.mobile)){\n      return this.fail(\"手机号码不能为空！\")\n    }else{\n      res = await this.model(\"member\").where({mobile:data.mobile}).find();\n      if(!think.isEmpty(res)){\n        return this.fail(\"手机号码已存在，请重新填写！\")\n      }\n    }\n    if(think.isEmpty(data.email)){\n      return this.fail(\"电子邮箱不能为空！\")\n    }else{\n      res = await this.model(\"member\").where({email:data.email}).find();\n      if(!think.isEmpty(res)){\n        return this.fail(\"电子邮箱已存在，请重新填写！\")\n      }\n    }\n    if(think.isEmpty(data.password) && think.isEmpty(data.password2)){\n      return this.fail(\"密码不能为空！\")\n    }else{\n\n      if(data.password != data.password2){\n        return this.fail(\"两次输入的密码不一致，请重新填写！\")\n      }\n    }\n    data.status = 1;\n    data.reg_time = new Date().valueOf();\n    data.reg_ip = _ip2int(this.ip());\n    data.password = encryptPassword(data.password);\n    let reg = await this.model(\"member\").add(data);\n    if(!think.isEmpty(reg)){\n      //添加用户副表\n      await this.model(\"qq_user\").where({openid:data.openid}).update({uid:reg});\n      //更新微信头像\n      let filePath=think.RESOURCE_PATH + '/upload/avatar/' +reg;\n      think.mkdir(filePath)\n      if(!think.isFile(filePath+'/avatar.png')){\n        await this.spiderImage(data.headimgurl,filePath+'/avatar.png')\n      }\n    }\n    console.log(data);\n    await this.model(\"member\").autoLogin({id:reg}, this.ip());//更新用户登录信息，自动登陆\n    let wx_userInfo = {\n      'uid':reg,\n      'username': data.username,\n      'last_login_time': data.reg_time,\n    };\n    await this.session('webuser', wx_userInfo);\n    return this.success({name:\"绑定成功\",url:\"/uc/index\"});\n\n\n  }\n  /**登录绑定 */\n  async logonbindingAction(){\n    let data = this.post();\n    //console.log(data);\n    let username = this.post('username');\n    let password = this.post('password');\n    password = encryptPassword(password);\n    console.log(data);\n\n    let res = await this.model(\"member\").signin(username, password, this.ip(), 5,0);\n    if (0 < res.uid) {\n      //记录用户登录行为\n      // await this.model(\"action\", {}, \"admin\").log(\"user_login\", \"member\", res.uid, res.uid, this.ip(), this.http.url);\n      //console.log(11111111111111);\n      let qq_info = await this.model(\"qq_user\").where({openid:data.openid}).find();\n      await this.model(\"qq_user\").where({openid:data.openid}).update({uid:res.uid});\n      //更新微信头像\n      let filePath=think.RESOURCE_PATH + '/upload/avatar/' +res.uid;\n      think.mkdir(filePath)\n      if(!think.isFile(filePath+'/avatar.png')) {\n        await this.spiderImage(data.headimgurl, filePath + '/avatar.png')\n      }\n      res.username = qq_info.nickname;\n      await this.session('webuser', res);\n      //TODO 用户密钥\n      return this.success({name:\"绑定成功\",url:\"/uc/index\"});\n    } else { //登录失败\n      let fail;\n      switch (res) {\n        case -1:\n          fail = '用户不存在或被禁用';\n          break; //系统级别禁用\n        case -2:\n          fail = '密码错误';\n          break;\n        default:\n          fail = '未知错误';\n          break; // 0-接口参数错误（调试阶段使用）\n      }\n      this.fail(fail);\n    }\n  }\n  /**\n   * 更新微信头像\n   */\n  spiderImage(imgUrl,filePath) {\n    let deferred = think.defer();\n    http.get(imgUrl, function (res) {\n      var imgData = \"\";\n      res.setEncoding(\"binary\");\n      res.on(\"data\", function (chunk) {\n        imgData += chunk;\n      });\n\n      res.on(\"end\", function () {\n        fs.writeFileSync(filePath, imgData, \"binary\");\n        deferred.resolve(filePath);\n      });\n    });\n    return deferred.promise;\n  }\n}"
    ]
}