{
    "version": 3,
    "sources": [
        "../../../src/uc/controller/ueditor.js"
    ],
    "names": [
        "init",
        "http",
        "indexAction",
        "config",
        "action",
        "get",
        "think",
        "log",
        "result",
        "uploads",
        "uploadlist",
        "crawler",
        "state",
        "jsonp",
        "base64",
        "fieldName",
        "pathFormat",
        "maxSize",
        "allowFiles",
        "setup",
        "IS_QINIU",
        "file",
        "extend",
        "filepath",
        "path",
        "basename",
        "qiniu",
        "service",
        "instance",
        "uploadpic",
        "uppic",
        "isEmpty",
        "QINIU_DOMAIN_NAME",
        "key",
        "hash",
        "originalFilename",
        "up",
        "adapter",
        "upload",
        "getFileInfo",
        "source",
        "post",
        "isArray",
        "list",
        "imgUrl",
        "saveRemote",
        "info",
        "push",
        "url",
        "title",
        "original",
        "listSize",
        "size",
        "start",
        "end",
        "parseInt",
        "substr",
        "lastIndexOf",
        "files",
        "scanFolder",
        "length",
        "len",
        "files_n",
        "i",
        "t",
        "toLocaleLowerCase",
        "in_array",
        "lenn",
        "Math",
        "min",
        "f",
        "fileList",
        "folderList",
        "walk",
        "readdirSync",
        "RESOURCE_PATH",
        "forEach",
        "item",
        "tmpPath",
        "stats",
        "statSync",
        "isDirectory",
        "console"
    ],
    "mappings": "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",
    "file": "../../../src/uc/controller/ueditor.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nimport Base from './base.js';\nimport fs from 'fs';\nimport path from 'path';\nexport default class extends Base {\n  init(http) {\n    super.init(http);\n  }\n  /**\n   * index action\n   * @return {Promise} []\n   */\n  async indexAction(){\n    //auto render template file index_index.html\n    this.config = this.config(\"ueditor\");\n    let action = this.get(\"action\");\n    think.log(action);\n    let result;\n    switch (action) {\n      case 'config':\n        result = this.config;\n\n        break;\n\n        /* 上传图片 */\n      case 'uploadimage':\n        /* 上传涂鸦 */\n      case 'uploadscrawl':\n        /* 上传视频 */\n      case 'uploadvideo':\n        /* 上传文件 */\n      case 'uploadfile':\n\n        result =await this.uploads();\n        //console.log(result);\n        break;\n\n        /* 列出图片 */\n      case 'listimage':\n        result = this.uploadlist();\n        break;\n        /* 列出文件 */\n      case 'listfile':\n        result = this.uploadlist();\n        break;\n\n        /* 抓取远程文件 */\n      case 'catchimage':\n        result = await this.crawler();\n        break;\n\n      default:\n        result = {\n          state: '请求地址出错'\n        };\n\n        break;\n    }\n    //返回结果\n    this.jsonp(result);\n\n  }\n\n  async uploads(){\n    /**\n     * 得到上传文件所对应的各个参数,数组结构\n     * obj={\n     *     \"state\" : \"\",          //上传状态，上传成功时必须返回\"SUCCESS\"\n     *     \"url\" : \"\",            //返回的地址\n     *     \"title\" : \"\",          //新文件名\n     *     \"original\" : \"\",       //原始文件名\n     *     \"type\" : \"\" ,           //文件类型\n     *     \"size\" : \"\",           //文件大小\n     * }\n     */\n    let action = this.get(\"action\");\n    let base64 = \"upload\";\n    let config = {};\n    let fieldName;\n    //console.log(setup);\n    switch (action) {\n      case 'uploadimage':\n        config = {\n          pathFormat: this.config['imagePathFormat'],\n          maxSize: this.config['imageMaxSize'],\n          allowFiles: this.config['imageAllowFiles'],\n        };\n        fieldName = this.config['imageFieldName'];\n        break;\n      case 'uploadscrawl':\n        config = {\n          \"pathFormat\": this.config['scrawlPathFormat'],\n          \"maxSize\": this.config['scrawlMaxSize'],\n          \"allowFiles\": this.config['scrawlAllowFiles'],\n          \"oriName\": \"scrawl.png\"\n        };\n        fieldName = this.config['scrawlFieldName'];\n        base64 = \"base64\";\n        break;\n      case 'uploadvideo':\n        config = {\n          \"pathFormat\": this.config['videoPathFormat'],\n          \"maxSize\": this.config['videoMaxSize'],\n          \"allowFiles\": this.config['videoAllowFiles']\n        };\n        fieldName = this.config['videoFieldName'];\n        break;\n      case 'uploadfile':\n      default:\n        config = {\n          \"pathFormat\": this.config['filePathFormat'],\n          \"maxSize\": this.config['fileMaxSize'],\n          \"allowFiles\": this.config['fileAllowFiles']\n        };\n        fieldName = this.config['fileFieldName'];\n        break;\n    }\n     //加入七牛接口\n     if(this.setup.IS_QINIU==1 && base64==\"upload\"){\n       let file = think.extend({}, this.file(fieldName));\n       // console.log(file);\n       let filepath = file.path;\n       let basename = path.basename(filepath);\n       let qiniu = think.service(\"qiniu\");\n       let instance = new qiniu();\n       let uppic = await instance.uploadpic(filepath,basename);\n       if(!think.isEmpty(uppic)){\n         return {\n           \"state\" : \"SUCCESS\",\n           \"url\" : `//${this.setup.QINIU_DOMAIN_NAME}/${uppic.key}`,\n           \"title\" : uppic.hash,\n           \"original\" : file.originalFilename,\n           \"type\" : \".jpg\",\n           \"size\" : 0\n         };\n       }\n     } else {\n       //return self.uploader(fieldName, config, oriName, size, path, base64);\n       let up = think.adapter(\"editor\", \"ueditor\"); //加载名为 ueditor 的 editor Adapter\n       let upload = new up(fieldName, config, base64, this.http); //实例化 Adapter\n       return upload.getFileInfo();\n     }\n  }\n\n  //抓取远程图片\n  async crawler(){\n    /* 上传配置 */\n    let config = {\n      \"pathFormat\" : this.config['catcherPathFormat'],\n      \"maxSize\" : this.config['catcherMaxSize'],\n      \"allowFiles\" : this.config['catcherAllowFiles'],\n      \"oriName\" : \"remote.png\"\n    };\n    let fieldName = this.config['catcherFieldName'];\n    let source = this.post(fieldName+\"[]\");\n    if(think.isArray(source)) {\n      source = source;\n    }else{\n      source = [source];\n    }\n    let list = [];\n    for(let imgUrl of source){\n      let up = think.adapter(\"editor\", \"ueditor\"); //加载名为 ueditor 的 editor Adapter\n      let upload = new up(imgUrl, config, \"remote\"); //实例化 Adapter\n      let info =  await upload.saveRemote();\n      //console.log(info);\n      list.push({\"state\":\"SUCCESS\",\"url\":info.url,\"size\":431521,\"title\":info.title,\"original\":info.original,\"source\":imgUrl});\n    }\n    //console.log(think.isEmpty(list));\n    return {\n      state:!think.isEmpty(list) ? 'SUCCESS':'ERROR',\n      list:list\n    }\n  }\n\n  /**\n   * 获取已上传的文件列表\n   */\n  uploadlist() {\n    var allowFiles, listSize, path;\n    //判断类型\n    switch (this.get(\"action\")) {\n        //列出文件\n      case 'listfile':\n        allowFiles = this.config['fileManagerAllowFiles'];\n        listSize = this.config['fileManagerListSize'];\n        path = this.config['fileManagerListPath'];\n        break;\n        //列出图片\n      case 'listimage':\n      default:\n        allowFiles = this.config['imageManagerAllowFiles'];\n        listSize = this.config['imageManagerListSize'];\n        path = this.config['imageManagerListPath'];\n    }\n    //allowFiles = allowFiles.join(\"\").replace(/[.]/g,\"|\").substr(1);\n    /* 获取参数 */\n    var size = this.get('size') ? this.get('size') : listSize;\n    var start = this.get('start') ? this.get('start') : 0;\n    var end = parseInt(size) + parseInt(start);\n    /* 获取文件列表 */\n    path = path.substr(0, path.lastIndexOf(\"/\"));\n    var files = this.scanFolder(path).files;\n    if (files.length == 0) {\n      return {\n        \"state\": \"no match file\",\n        \"list\": [],\n        \"start\": start,\n        \"total\": files.length\n      }\n    }\n    /* 获取指定范围的列表 */\n    var len = files.length;\n    var files_n=[];\n    for(var i = 0; i<len ; i++){\n      var t= files[i].substr(files[i].lastIndexOf(\".\")).toLocaleLowerCase();\n      if(in_array(t,allowFiles)){\n        files_n.push(files[i])\n      }\n    }\n\n    var lenn=files_n.length;\n    for (var i = Math.min(end, lenn) - 1,list=[]; i < lenn && i >= 0 && i >= start; i--) {\n      var f=files_n[i];\n      list.push({url:f});\n    }\n\n    return {\n      \"state\": \"SUCCESS\",\n      \"list\": list,\n      \"start\": start,\n      \"total\": files.length\n    };\n\n  }\n  /**\n   * 遍历获取目录下的指定类型的文件\n   */\n  scanFolder(path) {\n    var fileList = [],\n        folderList = [],\n        walk = function (path, fileList, folderList) {\n          let files = fs.readdirSync(think.RESOURCE_PATH+\"/\"+path);\n          files.forEach(function (item) {\n            var tmpPath = path + '/' + item,\n                stats = fs.statSync(think.RESOURCE_PATH+\"/\"+tmpPath);\n\n            if (stats.isDirectory()) {\n              walk(tmpPath, fileList, folderList);\n              folderList.push(tmpPath);\n            } else {\n              fileList.push(tmpPath);\n            }\n          });\n        };\n\n    walk(path, fileList, folderList);\n\n    console.log('扫描' + path + '成功');\n\n    return {\n      'files': fileList,\n      'folders': folderList\n    }\n  }\n}\n"
    ]
}