{
    "version": 3,
    "sources": [
        "../../../src/uc/controller/sina.js"
    ],
    "names": [
        "indexAction",
        "setup",
        "IS_SINA_LOGIN",
        "http",
        "error",
        "Error",
        "think",
        "statusAction",
        "is_login",
        "redirect",
        "http_",
        "config",
        "redirectURI",
        "host",
        "isEmpty",
        "get",
        "SINA_APPKEY",
        "code",
        "SINA",
        "service",
        "sina",
        "gettoken",
        "token",
        "console",
        "log",
        "getuserinfo",
        "access_token",
        "uid",
        "userinfo",
        "model",
        "find",
        "id",
        "sina_user",
        "add",
        "where",
        "update",
        "filePath",
        "RESOURCE_PATH",
        "mkdir",
        "isFile",
        "spiderImage",
        "avatar_large",
        "avatar_hd",
        "getField",
        "last_login_time",
        "sina_userInfo",
        "screen_name",
        "session",
        "autoLogin",
        "ip",
        "loginAction",
        "assign",
        "meta_title",
        "checkMobile",
        "userAgent",
        "display",
        "controller",
        "action",
        "organizingAction",
        "data",
        "post",
        "res",
        "username",
        "fail",
        "ltrim",
        "mobile",
        "email",
        "password",
        "password2",
        "status",
        "reg_time",
        "Date",
        "valueOf",
        "reg_ip",
        "_ip2int",
        "encryptPassword",
        "reg",
        "openid",
        "headimgurl",
        "success",
        "name",
        "url",
        "logonbindingAction",
        "signin",
        "sina_info",
        "imgUrl",
        "deferred",
        "defer",
        "imgData",
        "setEncoding",
        "on",
        "chunk",
        "writeFileSync",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../../src/uc/controller/sina.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | Bieber [ 美媒网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2017 http://www.gzxinbibo.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: Tony <912697590@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nimport Base from './base.js';\nimport http from 'http';\nimport fs from 'fs';\nexport default class extends Base {\n  /**\n   * 新浪授权回掉地址\n   * index action\n   * @return {Promise} []\n   */\n  async indexAction(){\n    //检测是否开启微博登陆\n      if(this.setup.IS_SINA_LOGIN == 0){\n          this.http.error = new Error('没有开启微博登陆，请到后台开启！');\n          return think.statusAction(702, this.http);\n      }\n      //检测是否登陆\n      if(this.is_login){\n          return this.redirect('/uc/index')\n      }\n      let http_;\n      if(this.config().http_==1){\n          http_=\"http://\"\n      }else {\n          http_ =\"https://\"\n      }\n      let redirectURI = `${http_}${this.http.host}/uc/sina/index`;\n      //检查是否回掉code，如果没有跳转授权接口\n      if(think.isEmpty(this.get(\"code\"))){\n\n          return this.redirect(`https://api.weibo.com/oauth2/authorize?client_id=${this.setup.SINA_APPKEY}&redirect_uri=${redirectURI}&response_type=code`)\n      }else {\n        let code = this.get(\"code\");\n          let SINA = think.service(\"sina\");\n          let sina = new SINA(code,redirectURI);\n          let token =await sina.gettoken();\n          console.log(token);\n          let userinfo = await sina.getuserinfo(token.access_token,token.uid);\n          let sina_user=await this.model(\"sina_user\").find(userinfo.id);\n          console.log(sina_user);\n          if(think.isEmpty(sina_user)){\n              await this.model(\"sina_user\").add(userinfo);\n              return this.redirect(`/uc/sina/login/id/${userinfo.id}`);\n          }else {\n              await this.model(\"sina_user\").where({id:userinfo.id}).update(userinfo);\n              //检查微博号是否跟网站会员绑定\n              if(think.isEmpty(sina_user.uid)||sina_user.uid==0){\n                  //没绑定跳转绑定页面\n                 return this.redirect(`/uc/sina/login/id/${userinfo.id}`);\n\n              }else {\n                  //更新头像\n                  let filePath=think.RESOURCE_PATH + '/upload/avatar/' + sina_user.uid;\n                  think.mkdir(filePath);\n                  //如果没有用户没有图像，使用微博头像\n                  if(!think.isFile(filePath+'/avatar.png')){\n                      await this.spiderImage(userinfo.avatar_large||userinfo.avatar_hd,filePath+'/avatar.png')\n                  }\n                  //绑定直接登陆\n                  let last_login_time = await this.model(\"member\").where({id:sina_user.uid}).getField(\"last_login_time\",true);\n                  let sina_userInfo = {\n                      'uid': sina_user.uid,\n                      'username': sina_user.screen_name,\n                      'last_login_time': last_login_time,\n                  };\n                  await this.session('webuser', sina_userInfo);\n                  await this.model(\"member\").autoLogin({id:sina_user.uid}, this.ip());//更新用户登录信息，自动登陆\n                 return this.redirect(\"/uc/index\");\n              }\n          }\n\n      }\n  }\n    //用户绑定页面\n    async loginAction(){\n        if(this.setup.IS_SINA_LOGIN == 0){\n            this.http.error = new Error('没有开启微博登陆，请到后台开启！');\n            return think.statusAction(702, this.http);\n        }\n        if(this.is_login){\n            this.redirect('/uc/index')\n        }\n        let id = this.get(\"id\");\n        let sina_user=await this.model(\"sina_user\").find(id);\n        console.log(sina_user);\n        this.assign(\"sina_user\",sina_user);\n        this.meta_title=\"账号绑定\"\n        if(checkMobile(this.userAgent())){\n            return this.display(`mobile/${this.http.controller}/${this.http.action}`);\n        }else{\n            return this.display();\n        }\n    }\n    /**完善资料绑定 */\n    async organizingAction(){\n        let data = this.post();\n        //验证\n        let res;\n        if(think.isEmpty(data.username)){\n            return this.fail(\"用户昵称不能为空！\");\n        }else{\n            res = await this.model(\"member\").where({username:ltrim(data.username)}).find();\n            if(!think.isEmpty(res)){\n                return this.fail(\"用户昵称已存在，请重新填写！\")\n            }\n        }\n        if(think.isEmpty(data.mobile)){\n            return this.fail(\"手机号码不能为空！\")\n        }else{\n            res = await this.model(\"member\").where({mobile:data.mobile}).find();\n            if(!think.isEmpty(res)){\n                return this.fail(\"手机号码已存在，请重新填写！\")\n            }\n        }\n        if(think.isEmpty(data.email)){\n            return this.fail(\"电子邮箱不能为空！\")\n        }else{\n            res = await this.model(\"member\").where({email:data.email}).find();\n            if(!think.isEmpty(res)){\n                return this.fail(\"电子邮箱已存在，请重新填写！\")\n            }\n        }\n        if(think.isEmpty(data.password) && think.isEmpty(data.password2)){\n            return this.fail(\"密码不能为空！\")\n        }else{\n\n            if(data.password != data.password2){\n                return this.fail(\"两次输入的密码不一致，请重新填写！\")\n            }\n        }\n        data.status = 1;\n        data.reg_time = new Date().valueOf();\n        data.reg_ip = _ip2int(this.ip());\n        data.password = encryptPassword(data.password);\n        let reg = await this.model(\"member\").add(data);\n        if(!think.isEmpty(reg)){\n            //添加用户副表\n            await this.model(\"sina_user\").where({id:data.openid}).update({uid:reg});\n            //更新微信头像\n            let filePath=think.RESOURCE_PATH + '/upload/avatar/' +reg;\n            think.mkdir(filePath)\n            if(!think.isFile(filePath+'/avatar.png')){\n                await this.spiderImage(data.headimgurl,filePath+'/avatar.png')\n            }\n        }\n        console.log(data);\n        await this.model(\"member\").autoLogin({id:reg}, this.ip());//更新用户登录信息，自动登陆\n        let sina_userInfo = {\n            'uid':reg,\n            'username': data.username,\n            'last_login_time': data.reg_time,\n        };\n        await this.session('webuser', sina_userInfo);\n        return this.success({name:\"绑定成功\",url:\"/uc/index\"});\n\n\n    }\n    /**登录绑定 */\n    async logonbindingAction(){\n        let data = this.post();\n        //console.log(data);\n        let username = this.post('username');\n        let password = this.post('password');\n        password = encryptPassword(password);\n        console.log(data);\n\n        let res = await this.model(\"member\").signin(username, password, this.ip(), 5,0);\n        console.log(res);\n        if (0 < res.uid) {\n            //记录用户登录行为\n            // await this.model(\"action\", {}, \"admin\").log(\"user_login\", \"member\", res.uid, res.uid, this.ip(), this.http.url);\n            //console.log(11111111111111);\n            let sina_info = await this.model(\"sina_user\").where({id:data.openid}).find();\n            console.log(sina_info);\n            await this.model(\"sina_user\").where({id:data.openid}).update({uid:res.uid});\n            //更新微信头像\n            let filePath=think.RESOURCE_PATH + '/upload/avatar/' +res.uid;\n            think.mkdir(filePath)\n            if(!think.isFile(filePath+'/avatar.png')) {\n                await this.spiderImage(data.headimgurl, filePath + '/avatar.png')\n            }\n            res.username = sina_info.screen_name;\n            await this.session('webuser', res);\n            //TODO 用户密钥\n            return this.success({name:\"绑定成功\",url:\"/uc/index\"});\n        } else { //登录失败\n            let fail;\n            switch (res) {\n                case -1:\n                    fail = '用户不存在或被禁用';\n                    break; //系统级别禁用\n                case -2:\n                    fail = '密码错误';\n                    break;\n                default:\n                    fail = '未知错误';\n                    break; // 0-接口参数错误（调试阶段使用）\n            }\n            this.fail(fail);\n        }\n    }\n    /**\n     * 更新微信头像\n     */\n    spiderImage(imgUrl,filePath) {\n        let deferred = think.defer();\n        http.get(imgUrl, function (res) {\n            var imgData = \"\";\n            res.setEncoding(\"binary\");\n            res.on(\"data\", function (chunk) {\n                imgData += chunk;\n            });\n\n            res.on(\"end\", function () {\n                fs.writeFileSync(filePath, imgData, \"binary\");\n                deferred.resolve(filePath);\n            });\n        });\n        return deferred.promise;\n    }\n}"
    ]
}